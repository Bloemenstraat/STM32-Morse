
Morse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008228  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080083c8  080083c8  000183c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f0  080084f0  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  080084f0  080084f0  000184f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084f8  080084f8  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084f8  080084f8  000184f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084fc  080084fc  000184fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08008500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c88  200001c8  080086c8  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e50  080086c8  00021e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013896  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000318f  00000000  00000000  00033a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00036c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00037d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001955d  00000000  00000000  00038cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001481d  00000000  00000000  00052235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fd96  00000000  00000000  00066a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f67e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac4  00000000  00000000  000f6838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c8 	.word	0x200001c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080083b0 	.word	0x080083b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001cc 	.word	0x200001cc
 80001dc:	080083b0 	.word	0x080083b0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <delay+0x30>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2200      	movs	r2, #0
 80005c4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80005c6:	bf00      	nop
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <delay+0x30>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d3f9      	bcc.n	80005c8 <delay+0x14>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200001e4 	.word	0x200001e4

080005e8 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIO_Port, RS_Pin, rs);  // rs = 1 for sending data, rs = 0 for command
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	2102      	movs	r1, #2
 80005fc:	4820      	ldr	r0, [pc, #128]	; (8000680 <send_to_lcd+0x98>)
 80005fe:	f000 ff51 	bl	80014a4 <HAL_GPIO_WritePin>

	/* Write the data to their respective pin */
	HAL_GPIO_WritePin(GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	08db      	lsrs	r3, r3, #3
 8000606:	b2db      	uxtb	r3, r3
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	461a      	mov	r2, r3
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	481b      	ldr	r0, [pc, #108]	; (8000680 <send_to_lcd+0x98>)
 8000614:	f000 ff46 	bl	80014a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	089b      	lsrs	r3, r3, #2
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	461a      	mov	r2, r3
 8000626:	2140      	movs	r1, #64	; 0x40
 8000628:	4815      	ldr	r0, [pc, #84]	; (8000680 <send_to_lcd+0x98>)
 800062a:	f000 ff3b 	bl	80014a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Port, D5_Pin, ((data>>1)&0x01));
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	085b      	lsrs	r3, r3, #1
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	461a      	mov	r2, r3
 800063c:	2120      	movs	r1, #32
 800063e:	4810      	ldr	r0, [pc, #64]	; (8000680 <send_to_lcd+0x98>)
 8000640:	f000 ff30 	bl	80014a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	2110      	movs	r1, #16
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <send_to_lcd+0x98>)
 8000652:	f000 ff27 	bl	80014a4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIO_Port, EN_Pin, 1);
 8000656:	2201      	movs	r2, #1
 8000658:	2108      	movs	r1, #8
 800065a:	4809      	ldr	r0, [pc, #36]	; (8000680 <send_to_lcd+0x98>)
 800065c:	f000 ff22 	bl	80014a4 <HAL_GPIO_WritePin>
	delay (20);
 8000660:	2014      	movs	r0, #20
 8000662:	f7ff ffa7 	bl	80005b4 <delay>
	HAL_GPIO_WritePin(GPIO_Port, EN_Pin, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2108      	movs	r1, #8
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <send_to_lcd+0x98>)
 800066c:	f000 ff1a 	bl	80014a4 <HAL_GPIO_WritePin>
	delay (20);
 8000670:	2014      	movs	r0, #20
 8000672:	f7ff ff9f 	bl	80005b4 <delay>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40020000 	.word	0x40020000

08000684 <LCD_SendCmd>:

void LCD_SendCmd (char cmd)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	091b      	lsrs	r3, r3, #4
 8000692:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS = 0 for sending command
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ffa5 	bl	80005e8 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff9c 	bl	80005e8 <send_to_lcd>
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <LCD_SendData>:

void LCD_SendData (char data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* Send higher 4-bits */
	datatosend = ((data>>4)&0x0f);
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	091b      	lsrs	r3, r3, #4
 80006c6:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2101      	movs	r1, #1
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff8b 	bl	80005e8 <send_to_lcd>

	/* Send lower 4-bits */
	datatosend = ((data)&0x0f);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f003 030f 	and.w	r3, r3, #15
 80006d8:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	2101      	movs	r1, #1
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff82 	bl	80005e8 <send_to_lcd>
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <LCD_Clear>:

void LCD_Clear (void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	LCD_SendCmd(0x01);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f7ff ffc7 	bl	8000684 <LCD_SendCmd>
	HAL_Delay(2);
 80006f6:	2002      	movs	r0, #2
 80006f8:	f000 fc02 	bl	8000f00 <HAL_Delay>
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}

08000700 <LCD_Init>:
    LCD_SendCmd (col);
}


void LCD_Init (void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	// 4-bit mode initialisation
	HAL_Delay(50);  // wait for >40ms
 8000704:	2032      	movs	r0, #50	; 0x32
 8000706:	f000 fbfb 	bl	8000f00 <HAL_Delay>
	LCD_SendCmd (0x30);
 800070a:	2030      	movs	r0, #48	; 0x30
 800070c:	f7ff ffba 	bl	8000684 <LCD_SendCmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000710:	2005      	movs	r0, #5
 8000712:	f000 fbf5 	bl	8000f00 <HAL_Delay>
	LCD_SendCmd (0x30);
 8000716:	2030      	movs	r0, #48	; 0x30
 8000718:	f7ff ffb4 	bl	8000684 <LCD_SendCmd>
	HAL_Delay(1);  // wait for >100us
 800071c:	2001      	movs	r0, #1
 800071e:	f000 fbef 	bl	8000f00 <HAL_Delay>
	LCD_SendCmd (0x30);
 8000722:	2030      	movs	r0, #48	; 0x30
 8000724:	f7ff ffae 	bl	8000684 <LCD_SendCmd>
	HAL_Delay(10);
 8000728:	200a      	movs	r0, #10
 800072a:	f000 fbe9 	bl	8000f00 <HAL_Delay>
	LCD_SendCmd (0x20);  // 4bit mode
 800072e:	2020      	movs	r0, #32
 8000730:	f7ff ffa8 	bl	8000684 <LCD_SendCmd>
	HAL_Delay(10);
 8000734:	200a      	movs	r0, #10
 8000736:	f000 fbe3 	bl	8000f00 <HAL_Delay>

  // Dislay initialisation
	LCD_SendCmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800073a:	2028      	movs	r0, #40	; 0x28
 800073c:	f7ff ffa2 	bl	8000684 <LCD_SendCmd>
	HAL_Delay(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fbdd 	bl	8000f00 <HAL_Delay>
	LCD_SendCmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000746:	2008      	movs	r0, #8
 8000748:	f7ff ff9c 	bl	8000684 <LCD_SendCmd>
	HAL_Delay(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f000 fbd7 	bl	8000f00 <HAL_Delay>
	LCD_SendCmd (0x01);  // clear display
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff ff96 	bl	8000684 <LCD_SendCmd>
	HAL_Delay(1);
 8000758:	2001      	movs	r0, #1
 800075a:	f000 fbd1 	bl	8000f00 <HAL_Delay>
	HAL_Delay(1);
 800075e:	2001      	movs	r0, #1
 8000760:	f000 fbce 	bl	8000f00 <HAL_Delay>
	LCD_SendCmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000764:	2006      	movs	r0, #6
 8000766:	f7ff ff8d 	bl	8000684 <LCD_SendCmd>
	HAL_Delay(1);
 800076a:	2001      	movs	r0, #1
 800076c:	f000 fbc8 	bl	8000f00 <HAL_Delay>
	LCD_SendCmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000770:	200c      	movs	r0, #12
 8000772:	f7ff ff87 	bl	8000684 <LCD_SendCmd>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <LCD_SendString>:

void LCD_SendString (char *str)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	while (*str) LCD_SendData (*str++);
 8000782:	e006      	b.n	8000792 <LCD_SendString+0x18>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff93 	bl	80006b8 <LCD_SendData>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f4      	bne.n	8000784 <LCD_SendString+0xa>
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <append>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
char* morse[] = {"._", "_...", "_._.", "_..", ".", ".._.", "__.", "....", "..", ".___", "_._", "._..", "__", "_.", "___", ".__.", "__._", "._.", "...", "_", ".._",  "..._", ".__", "_.._", "_.__", "__.."};

int append(char *s, char c) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
    uint8_t len = strlen(s);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fd1f 	bl	80001f4 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	73fb      	strb	r3, [r7, #15]

    if (len == 4)
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d101      	bne.n	80007c4 <append+0x20>
    	return 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	e00b      	b.n	80007dc <append+0x38>

    s[len] = c;
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	78fa      	ldrb	r2, [r7, #3]
 80007cc:	701a      	strb	r2, [r3, #0]
    s[len+1] = '\0';
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	3301      	adds	r3, #1
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]

    return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <search>:

int search(char* code) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	//Convert a morse sequence to the corresponding letter
    for (int i = 0; i < 26; i++) {
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	e010      	b.n	8000814 <search+0x30>
        if(!strcmp(code, morse[i]))
 80007f2:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <search+0x40>)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007fa:	4619      	mov	r1, r3
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fcef 	bl	80001e0 <strcmp>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <search+0x2a>
            return (65+i);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3341      	adds	r3, #65	; 0x41
 800080c:	e006      	b.n	800081c <search+0x38>
    for (int i = 0; i < 26; i++) {
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	3301      	adds	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2b19      	cmp	r3, #25
 8000818:	ddeb      	ble.n	80007f2 <search+0xe>
    }
    return 1;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000

08000828 <blink>:

void blink(uint16_t pin, uint32_t delay) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(LED_PORT, pin, GPIO_PIN_SET);
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	2201      	movs	r2, #1
 8000838:	4619      	mov	r1, r3
 800083a:	4808      	ldr	r0, [pc, #32]	; (800085c <blink+0x34>)
 800083c:	f000 fe32 	bl	80014a4 <HAL_GPIO_WritePin>
	HAL_Delay(delay);
 8000840:	6838      	ldr	r0, [r7, #0]
 8000842:	f000 fb5d 	bl	8000f00 <HAL_Delay>
	HAL_GPIO_WritePin(LED_PORT, pin, GPIO_PIN_RESET);
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	2200      	movs	r2, #0
 800084a:	4619      	mov	r1, r3
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <blink+0x34>)
 800084e:	f000 fe29 	bl	80014a4 <HAL_GPIO_WritePin>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40020400 	.word	0x40020400

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char code[4], letter, data[10];
	int uart_buf_len;
	uint32_t timer_val;
	uint8_t is_pressed = 0, wait_letter = 0, clear = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	76fb      	strb	r3, [r7, #27]
 800086a:	2300      	movs	r3, #0
 800086c:	76bb      	strb	r3, [r7, #26]
 800086e:	2300      	movs	r3, #0
 8000870:	767b      	strb	r3, [r7, #25]

	memset(code, 0, sizeof code);
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	2204      	movs	r2, #4
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f007 f922 	bl	8007ac4 <memset>
	memset(data, 0, sizeof data);
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	220a      	movs	r2, #10
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f007 f91c 	bl	8007ac4 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f000 fac6 	bl	8000e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f8a4 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f000 f95a 	bl	8000b4c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000898:	f006 fbda 	bl	8007050 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800089c:	f000 f906 	bl	8000aac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80008a0:	484b      	ldr	r0, [pc, #300]	; (80009d0 <main+0x170>)
 80008a2:	f002 fd15 	bl	80032d0 <HAL_TIM_Base_Start>
  LCD_Init();
 80008a6:	f7ff ff2b 	bl	8000700 <LCD_Init>
  LCD_Clear();
 80008aa:	f7ff ff1f 	bl	80006ec <LCD_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //CDC_Transmit_FS((uint8_t*)uart_buf, uart_buf_len);
	  if (wait_letter) {
 80008ae:	7ebb      	ldrb	r3, [r7, #26]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d02f      	beq.n	8000914 <main+0xb4>
		  if (HAL_GetTick() - timer_val >= 5000) {
 80008b4:	f000 fb18 	bl	8000ee8 <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	f241 3287 	movw	r2, #4999	; 0x1387
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d926      	bls.n	8000914 <main+0xb4>
			  blink(GREEN_LED, 500);
 80008c6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008ca:	2020      	movs	r0, #32
 80008cc:	f7ff ffac 	bl	8000828 <blink>
			  letter = search(code);
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff85 	bl	80007e4 <search>
 80008da:	4603      	mov	r3, r0
 80008dc:	763b      	strb	r3, [r7, #24]
			  uart_buf_len = sprintf(data, "%c", letter);
 80008de:	7e3a      	ldrb	r2, [r7, #24]
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	493c      	ldr	r1, [pc, #240]	; (80009d4 <main+0x174>)
 80008e4:	4618      	mov	r0, r3
 80008e6:	f007 f8f5 	bl	8007ad4 <siprintf>
 80008ea:	6178      	str	r0, [r7, #20]
			  LCD_SendString(data);
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff43 	bl	800077a <LCD_SendString>

			  if (CONSOLE_MODE) CDC_Transmit_FS((uint8_t*)data, uart_buf_len);
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f006 fc65 	bl	80071cc <CDC_Transmit_FS>
			  memset(code, 0, sizeof code);
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	2204      	movs	r2, #4
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f007 f8da 	bl	8007ac4 <memset>
			  wait_letter = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	76bb      	strb	r3, [r7, #26]
		  }
	  }

	  if (HAL_GPIO_ReadPin(LED_PORT, BTN_INPUT)){
 8000914:	2140      	movs	r1, #64	; 0x40
 8000916:	4830      	ldr	r0, [pc, #192]	; (80009d8 <main+0x178>)
 8000918:	f000 fdac 	bl	8001474 <HAL_GPIO_ReadPin>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d008      	beq.n	8000934 <main+0xd4>
		  if (!is_pressed) {
 8000922:	7efb      	ldrb	r3, [r7, #27]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1c2      	bne.n	80008ae <main+0x4e>
			  is_pressed = 1;
 8000928:	2301      	movs	r3, #1
 800092a:	76fb      	strb	r3, [r7, #27]
			  timer_val = HAL_GetTick();
 800092c:	f000 fadc 	bl	8000ee8 <HAL_GetTick>
 8000930:	61f8      	str	r0, [r7, #28]
 8000932:	e7bc      	b.n	80008ae <main+0x4e>
		  }
	  }

	  else if (!HAL_GPIO_ReadPin(LED_PORT, BTN_INPUT) && is_pressed == 1) {
 8000934:	2140      	movs	r1, #64	; 0x40
 8000936:	4828      	ldr	r0, [pc, #160]	; (80009d8 <main+0x178>)
 8000938:	f000 fd9c 	bl	8001474 <HAL_GPIO_ReadPin>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1b5      	bne.n	80008ae <main+0x4e>
 8000942:	7efb      	ldrb	r3, [r7, #27]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d1b2      	bne.n	80008ae <main+0x4e>
		  is_pressed = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	76fb      	strb	r3, [r7, #27]
		  timer_val = HAL_GetTick() - timer_val;
 800094c:	f000 facc 	bl	8000ee8 <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	61fb      	str	r3, [r7, #28]
		  if (timer_val <= 1000) {
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800095e:	d80e      	bhi.n	800097e <main+0x11e>
			  blink(BLUE_LED, 100);
 8000960:	2164      	movs	r1, #100	; 0x64
 8000962:	2010      	movs	r0, #16
 8000964:	f7ff ff60 	bl	8000828 <blink>
			  clear = append(code, '.');
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	212e      	movs	r1, #46	; 0x2e
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff18 	bl	80007a4 <append>
 8000974:	4603      	mov	r3, r0
 8000976:	767b      	strb	r3, [r7, #25]
			  wait_letter = 1;
 8000978:	2301      	movs	r3, #1
 800097a:	76bb      	strb	r3, [r7, #26]
 800097c:	e013      	b.n	80009a6 <main+0x146>
		  }
		  else if (timer_val <= 3000) {
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000984:	4293      	cmp	r3, r2
 8000986:	d80e      	bhi.n	80009a6 <main+0x146>
			  blink(BLUE_LED, 500);
 8000988:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800098c:	2010      	movs	r0, #16
 800098e:	f7ff ff4b 	bl	8000828 <blink>
			  clear = append(code, '_');
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	215f      	movs	r1, #95	; 0x5f
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff03 	bl	80007a4 <append>
 800099e:	4603      	mov	r3, r0
 80009a0:	767b      	strb	r3, [r7, #25]
			  wait_letter = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	76bb      	strb	r3, [r7, #26]
		  }
		  if (clear) {
 80009a6:	7e7b      	ldrb	r3, [r7, #25]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d00c      	beq.n	80009c6 <main+0x166>
			  memset(code, 0, sizeof code);
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	2204      	movs	r2, #4
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f007 f885 	bl	8007ac4 <memset>
			  blink(RED_LED, 250);
 80009ba:	21fa      	movs	r1, #250	; 0xfa
 80009bc:	2008      	movs	r0, #8
 80009be:	f7ff ff33 	bl	8000828 <blink>
			  wait_letter = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	76bb      	strb	r3, [r7, #26]
		  }
		  timer_val = HAL_GetTick();
 80009c6:	f000 fa8f 	bl	8000ee8 <HAL_GetTick>
 80009ca:	61f8      	str	r0, [r7, #28]
	  if (wait_letter) {
 80009cc:	e76f      	b.n	80008ae <main+0x4e>
 80009ce:	bf00      	nop
 80009d0:	200001e4 	.word	0x200001e4
 80009d4:	08008460 	.word	0x08008460
 80009d8:	40020400 	.word	0x40020400

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b094      	sub	sp, #80	; 0x50
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	2230      	movs	r2, #48	; 0x30
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f007 f86a 	bl	8007ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <SystemClock_Config+0xc8>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	4a26      	ldr	r2, [pc, #152]	; (8000aa4 <SystemClock_Config+0xc8>)
 8000a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a10:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <SystemClock_Config+0xc8>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <SystemClock_Config+0xcc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a20      	ldr	r2, [pc, #128]	; (8000aa8 <SystemClock_Config+0xcc>)
 8000a26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <SystemClock_Config+0xcc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a42:	2302      	movs	r3, #2
 8000a44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a4c:	2319      	movs	r3, #25
 8000a4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a50:	23c0      	movs	r3, #192	; 0xc0
 8000a52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 0320 	add.w	r3, r7, #32
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 ffb5 	bl	80029d0 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a6c:	f000 f8e0 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	230f      	movs	r3, #15
 8000a72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a74:	2302      	movs	r3, #2
 8000a76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	2103      	movs	r1, #3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 fa17 	bl	8002ec0 <HAL_RCC_ClockConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a98:	f000 f8ca 	bl	8000c30 <Error_Handler>
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3750      	adds	r7, #80	; 0x50
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40007000 	.word	0x40007000

08000aac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000aca:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <MX_TIM1_Init+0x9c>)
 8000acc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000ad0:	225f      	movs	r2, #95	; 0x5f
 8000ad2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af4:	4813      	ldr	r0, [pc, #76]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000af6:	f002 fb9b 	bl	8003230 <HAL_TIM_Base_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b00:	f000 f896 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000b12:	f002 fc37 	bl	8003384 <HAL_TIM_ConfigClockSource>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b1c:	f000 f888 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000b2e:	f002 fe0b 	bl	8003748 <HAL_TIMEx_MasterConfigSynchronization>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b38:	f000 f87a 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200001e4 	.word	0x200001e4
 8000b48:	40010000 	.word	0x40010000

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <MX_GPIO_Init+0xd8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a2e      	ldr	r2, [pc, #184]	; (8000c24 <MX_GPIO_Init+0xd8>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <MX_GPIO_Init+0xd8>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <MX_GPIO_Init+0xd8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a27      	ldr	r2, [pc, #156]	; (8000c24 <MX_GPIO_Init+0xd8>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <MX_GPIO_Init+0xd8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <MX_GPIO_Init+0xd8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a20      	ldr	r2, [pc, #128]	; (8000c24 <MX_GPIO_Init+0xd8>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <MX_GPIO_Init+0xd8>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	21fe      	movs	r1, #254	; 0xfe
 8000bba:	481b      	ldr	r0, [pc, #108]	; (8000c28 <MX_GPIO_Init+0xdc>)
 8000bbc:	f000 fc72 	bl	80014a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2138      	movs	r1, #56	; 0x38
 8000bc4:	4819      	ldr	r0, [pc, #100]	; (8000c2c <MX_GPIO_Init+0xe0>)
 8000bc6:	f000 fc6d 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000bca:	23fe      	movs	r3, #254	; 0xfe
 8000bcc:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4619      	mov	r1, r3
 8000be0:	4811      	ldr	r0, [pc, #68]	; (8000c28 <MX_GPIO_Init+0xdc>)
 8000be2:	f000 fac3 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000be6:	2338      	movs	r3, #56	; 0x38
 8000be8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <MX_GPIO_Init+0xe0>)
 8000bfe:	f000 fab5 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c02:	2340      	movs	r3, #64	; 0x40
 8000c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_GPIO_Init+0xe0>)
 8000c16:	f000 faa9 	bl	800116c <HAL_GPIO_Init>

}
 8000c1a:	bf00      	nop
 8000c1c:	3720      	adds	r7, #32
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020400 	.word	0x40020400

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d10d      	bne.n	8000cba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_TIM_Base_MspInit+0x40>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a09      	ldr	r2, [pc, #36]	; (8000ccc <HAL_TIM_Base_MspInit+0x40>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <HAL_TIM_Base_MspInit+0x40>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f8d0 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <OTG_FS_IRQHandler+0x10>)
 8000d2a:	f000 fd24 	bl	8001776 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20001714 	.word	0x20001714

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f006 fe82 	bl	8007a70 <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20020000 	.word	0x20020000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	2000022c 	.word	0x2000022c
 8000da0:	20001e50 	.word	0x20001e50

08000da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dce:	490e      	ldr	r1, [pc, #56]	; (8000e08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de4:	4c0b      	ldr	r4, [pc, #44]	; (8000e14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df2:	f7ff ffd7 	bl	8000da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f006 fe41 	bl	8007a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fd31 	bl	8000860 <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8000e0c:	08008500 	.word	0x08008500
  ldr r2, =_sbss
 8000e10:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000e14:	20001e50 	.word	0x20001e50

08000e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <HAL_Init+0x40>)
 8000e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <HAL_Init+0x40>)
 8000e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_Init+0x40>)
 8000e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f94f 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f000 f808 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e50:	f7ff fef4 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023c00 	.word	0x40023c00

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f967 	bl	8001152 <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e9c:	f000 f92f 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000068 	.word	0x20000068
 8000eb8:	20000070 	.word	0x20000070
 8000ebc:	2000006c 	.word	0x2000006c

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000070 	.word	0x20000070
 8000ee4:	20000230 	.word	0x20000230

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000230 	.word	0x20000230

08000f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff ffee 	bl	8000ee8 <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f18:	d005      	beq.n	8000f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_Delay+0x44>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f26:	bf00      	nop
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d8f7      	bhi.n	8000f28 <HAL_Delay+0x28>
  {
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000070 	.word	0x20000070

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4907      	ldr	r1, [pc, #28]	; (8000fe4 <__NVIC_EnableIRQ+0x38>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	; (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010c8:	f7ff ff8e 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff29 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff3e 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff8e 	bl	800103c <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff31 	bl	8000fac <__NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa2 	bl	80010a4 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e159      	b.n	800143c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 8148 	bne.w	8001436 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d005      	beq.n	80011be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d130      	bne.n	8001220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 0201 	and.w	r2, r3, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b03      	cmp	r3, #3
 800122a:	d017      	beq.n	800125c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	69b9      	ldr	r1, [r7, #24]
 80012ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80a2 	beq.w	8001436 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b57      	ldr	r3, [pc, #348]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a56      	ldr	r2, [pc, #344]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b54      	ldr	r3, [pc, #336]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130e:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_GPIO_Init+0x2ec>)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a49      	ldr	r2, [pc, #292]	; (800145c <HAL_GPIO_Init+0x2f0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d019      	beq.n	800136e <HAL_GPIO_Init+0x202>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a48      	ldr	r2, [pc, #288]	; (8001460 <HAL_GPIO_Init+0x2f4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_GPIO_Init+0x1fe>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a47      	ldr	r2, [pc, #284]	; (8001464 <HAL_GPIO_Init+0x2f8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00d      	beq.n	8001366 <HAL_GPIO_Init+0x1fa>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a46      	ldr	r2, [pc, #280]	; (8001468 <HAL_GPIO_Init+0x2fc>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d007      	beq.n	8001362 <HAL_GPIO_Init+0x1f6>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a45      	ldr	r2, [pc, #276]	; (800146c <HAL_GPIO_Init+0x300>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_GPIO_Init+0x1f2>
 800135a:	2304      	movs	r3, #4
 800135c:	e008      	b.n	8001370 <HAL_GPIO_Init+0x204>
 800135e:	2307      	movs	r3, #7
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x204>
 8001362:	2303      	movs	r3, #3
 8001364:	e004      	b.n	8001370 <HAL_GPIO_Init+0x204>
 8001366:	2302      	movs	r3, #2
 8001368:	e002      	b.n	8001370 <HAL_GPIO_Init+0x204>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x204>
 800136e:	2300      	movs	r3, #0
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	f002 0203 	and.w	r2, r2, #3
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	4093      	lsls	r3, r2
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001380:	4935      	ldr	r1, [pc, #212]	; (8001458 <HAL_GPIO_Init+0x2ec>)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138e:	4b38      	ldr	r3, [pc, #224]	; (8001470 <HAL_GPIO_Init+0x304>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b2:	4a2f      	ldr	r2, [pc, #188]	; (8001470 <HAL_GPIO_Init+0x304>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <HAL_GPIO_Init+0x304>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013dc:	4a24      	ldr	r2, [pc, #144]	; (8001470 <HAL_GPIO_Init+0x304>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <HAL_GPIO_Init+0x304>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001406:	4a1a      	ldr	r2, [pc, #104]	; (8001470 <HAL_GPIO_Init+0x304>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <HAL_GPIO_Init+0x304>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_GPIO_Init+0x304>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3301      	adds	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	2b0f      	cmp	r3, #15
 8001440:	f67f aea2 	bls.w	8001188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3724      	adds	r7, #36	; 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	40013800 	.word	0x40013800
 800145c:	40020000 	.word	0x40020000
 8001460:	40020400 	.word	0x40020400
 8001464:	40020800 	.word	0x40020800
 8001468:	40020c00 	.word	0x40020c00
 800146c:	40021000 	.word	0x40021000
 8001470:	40013c00 	.word	0x40013c00

08001474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e001      	b.n	8001496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d8:	b08f      	sub	sp, #60	; 0x3c
 80014da:	af0a      	add	r7, sp, #40	; 0x28
 80014dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e10f      	b.n	8001708 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d106      	bne.n	8001508 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f005 ffaa 	bl	800745c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2203      	movs	r2, #3
 800150c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f002 fa91 	bl	8003a4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	687e      	ldr	r6, [r7, #4]
 8001534:	466d      	mov	r5, sp
 8001536:	f106 0410 	add.w	r4, r6, #16
 800153a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001542:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001546:	e885 0003 	stmia.w	r5, {r0, r1}
 800154a:	1d33      	adds	r3, r6, #4
 800154c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800154e:	6838      	ldr	r0, [r7, #0]
 8001550:	f002 f968 	bl	8003824 <USB_CoreInit>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2202      	movs	r2, #2
 800155e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0d0      	b.n	8001708 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fa7f 	bl	8003a70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	e04a      	b.n	800160e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	333d      	adds	r3, #61	; 0x3d
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	333c      	adds	r3, #60	; 0x3c
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	b298      	uxth	r0, r3
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3344      	adds	r3, #68	; 0x44
 80015b4:	4602      	mov	r2, r0
 80015b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	3340      	adds	r3, #64	; 0x40
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	3348      	adds	r3, #72	; 0x48
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	334c      	adds	r3, #76	; 0x4c
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	3354      	adds	r3, #84	; 0x54
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	3301      	adds	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3af      	bcc.n	8001578 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e044      	b.n	80016a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	3301      	adds	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d3b5      	bcc.n	800161e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	687e      	ldr	r6, [r7, #4]
 80016ba:	466d      	mov	r5, sp
 80016bc:	f106 0410 	add.w	r4, r6, #16
 80016c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80016d0:	1d33      	adds	r3, r6, #4
 80016d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016d4:	6838      	ldr	r0, [r7, #0]
 80016d6:	f002 fa17 	bl	8003b08 <USB_DevInit>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2202      	movs	r2, #2
 80016e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e00d      	b.n	8001708 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fb66 	bl	8004dd2 <USB_DevDisconnect>

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001710 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_PCD_Start+0x1c>
 8001728:	2302      	movs	r3, #2
 800172a:	e020      	b.n	800176e <HAL_PCD_Start+0x5e>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	2b01      	cmp	r3, #1
 800173a:	d109      	bne.n	8001750 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001740:	2b01      	cmp	r3, #1
 8001742:	d005      	beq.n	8001750 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001748:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f002 f969 	bl	8003a2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f003 fb16 	bl	8004d90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001776:	b590      	push	{r4, r7, lr}
 8001778:	b08d      	sub	sp, #52	; 0x34
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f003 fbd4 	bl	8004f3a <USB_GetMode>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	f040 848a 	bne.w	80020ae <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 fb38 	bl	8004e14 <USB_ReadInterrupts>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8480 	beq.w	80020ac <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fb25 	bl	8004e14 <USB_ReadInterrupts>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d107      	bne.n	80017e4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f002 0202 	and.w	r2, r2, #2
 80017e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 fb13 	bl	8004e14 <USB_ReadInterrupts>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d161      	bne.n	80018bc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699a      	ldr	r2, [r3, #24]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0210 	bic.w	r2, r2, #16
 8001806:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f003 020f 	and.w	r2, r3, #15
 8001814:	4613      	mov	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	3304      	adds	r3, #4
 8001826:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	0c5b      	lsrs	r3, r3, #17
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	2b02      	cmp	r3, #2
 8001832:	d124      	bne.n	800187e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d035      	beq.n	80018ac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800184a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800184e:	b29b      	uxth	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	6a38      	ldr	r0, [r7, #32]
 8001854:	f003 f94a 	bl	8004aec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	091b      	lsrs	r3, r3, #4
 8001860:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001864:	441a      	add	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	6a1a      	ldr	r2, [r3, #32]
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001876:	441a      	add	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	621a      	str	r2, [r3, #32]
 800187c:	e016      	b.n	80018ac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	0c5b      	lsrs	r3, r3, #17
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	2b06      	cmp	r3, #6
 8001888:	d110      	bne.n	80018ac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001890:	2208      	movs	r2, #8
 8001892:	4619      	mov	r1, r3
 8001894:	6a38      	ldr	r0, [r7, #32]
 8001896:	f003 f929 	bl	8004aec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	6a1a      	ldr	r2, [r3, #32]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018a6:	441a      	add	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	699a      	ldr	r2, [r3, #24]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0210 	orr.w	r2, r2, #16
 80018ba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f003 faa7 	bl	8004e14 <USB_ReadInterrupts>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80018d0:	f040 80a7 	bne.w	8001a22 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 faac 	bl	8004e3a <USB_ReadDevAllOutEpInterrupt>
 80018e2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80018e4:	e099      	b.n	8001a1a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80018e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 808e 	beq.w	8001a0e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 fad0 	bl	8004ea2 <USB_ReadDevOutEPInterrupt>
 8001902:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	015a      	lsls	r2, r3, #5
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	4413      	add	r3, r2
 8001916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800191a:	461a      	mov	r2, r3
 800191c:	2301      	movs	r3, #1
 800191e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fec2 	bl	80026ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00c      	beq.n	800194c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800193e:	461a      	mov	r2, r3
 8001940:	2308      	movs	r3, #8
 8001942:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 ff98 	bl	800287c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	2b00      	cmp	r3, #0
 8001954:	d008      	beq.n	8001968 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	015a      	lsls	r2, r3, #5
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	4413      	add	r3, r2
 800195e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001962:	461a      	mov	r2, r3
 8001964:	2310      	movs	r3, #16
 8001966:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d030      	beq.n	80019d4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197a:	2b80      	cmp	r3, #128	; 0x80
 800197c:	d109      	bne.n	8001992 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800198c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001990:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001994:	4613      	mov	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	3304      	adds	r3, #4
 80019a6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	78db      	ldrb	r3, [r3, #3]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d108      	bne.n	80019c2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	2200      	movs	r2, #0
 80019b4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	4619      	mov	r1, r3
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f005 fe49 	bl	8007654 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ce:	461a      	mov	r2, r3
 80019d0:	2302      	movs	r3, #2
 80019d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	f003 0320 	and.w	r3, r3, #32
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d008      	beq.n	80019f0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ea:	461a      	mov	r2, r3
 80019ec:	2320      	movs	r3, #32
 80019ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a06:	461a      	mov	r2, r3
 8001a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a0c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	3301      	adds	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a16:	085b      	lsrs	r3, r3, #1
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f47f af62 	bne.w	80018e6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 f9f4 	bl	8004e14 <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a36:	f040 80db 	bne.w	8001bf0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 fa15 	bl	8004e6e <USB_ReadDevAllInEpInterrupt>
 8001a44:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001a4a:	e0cd      	b.n	8001be8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 80c2 	beq.w	8001bdc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fa3b 	bl	8004ede <USB_ReadDevInEPInterrupt>
 8001a68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d057      	beq.n	8001b24 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69f9      	ldr	r1, [r7, #28]
 8001a90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001a94:	4013      	ands	r3, r2
 8001a96:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	015a      	lsls	r2, r3, #5
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d132      	bne.n	8001b18 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	334c      	adds	r3, #76	; 0x4c
 8001ac2:	6819      	ldr	r1, [r3, #0]
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4403      	add	r3, r0
 8001ad2:	3348      	adds	r3, #72	; 0x48
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4419      	add	r1, r3
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4403      	add	r3, r0
 8001ae6:	334c      	adds	r3, #76	; 0x4c
 8001ae8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d113      	bne.n	8001b18 <HAL_PCD_IRQHandler+0x3a2>
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af4:	4613      	mov	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4413      	add	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	3354      	adds	r3, #84	; 0x54
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d108      	bne.n	8001b18 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b10:	461a      	mov	r2, r3
 8001b12:	2101      	movs	r1, #1
 8001b14:	f003 fa42 	bl	8004f9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f005 fd1d 	bl	800755e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d008      	beq.n	8001b40 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	015a      	lsls	r2, r3, #5
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d008      	beq.n	8001b5c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	015a      	lsls	r2, r3, #5
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	4413      	add	r3, r2
 8001b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b56:	461a      	mov	r2, r3
 8001b58:	2310      	movs	r3, #16
 8001b5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d008      	beq.n	8001b78 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	015a      	lsls	r2, r3, #5
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b72:	461a      	mov	r2, r3
 8001b74:	2340      	movs	r3, #64	; 0x40
 8001b76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d023      	beq.n	8001bca <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001b82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b84:	6a38      	ldr	r0, [r7, #32]
 8001b86:	f002 f923 	bl	8003dd0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	3338      	adds	r3, #56	; 0x38
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	78db      	ldrb	r3, [r3, #3]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d108      	bne.n	8001bb8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f005 fd60 	bl	8007678 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	015a      	lsls	r2, r3, #5
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001bd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fcdb 	bl	8002592 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	3301      	adds	r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f47f af2e 	bne.w	8001a4c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 f90d 	bl	8004e14 <USB_ReadInterrupts>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c04:	d122      	bne.n	8001c4c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d108      	bne.n	8001c36 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 fec2 	bl	80029b8 <HAL_PCDEx_LPM_Callback>
 8001c34:	e002      	b.n	8001c3c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f005 fcfe 	bl	8007638 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695a      	ldr	r2, [r3, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 f8df 	bl	8004e14 <USB_ReadInterrupts>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c60:	d112      	bne.n	8001c88 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d102      	bne.n	8001c78 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f005 fcba 	bl	80075ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001c86:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 f8c1 	bl	8004e14 <USB_ReadInterrupts>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c9c:	f040 80b7 	bne.w	8001e0e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2110      	movs	r1, #16
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f002 f888 	bl	8003dd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc4:	e046      	b.n	8001d54 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001cd8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cea:	0151      	lsls	r1, r2, #5
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	440a      	add	r2, r1
 8001cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001cf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cf8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d06:	461a      	mov	r2, r3
 8001d08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d0c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d1e:	0151      	lsls	r1, r2, #5
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	440a      	add	r2, r1
 8001d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d30:	015a      	lsls	r2, r3, #5
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d3e:	0151      	lsls	r1, r2, #5
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	440a      	add	r2, r1
 8001d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d4c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d50:	3301      	adds	r3, #1
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d3b3      	bcc.n	8001cc6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d6c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001d70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d016      	beq.n	8001da8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d8a:	f043 030b 	orr.w	r3, r3, #11
 8001d8e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001da0:	f043 030b 	orr.w	r3, r3, #11
 8001da4:	6453      	str	r3, [r2, #68]	; 0x44
 8001da6:	e015      	b.n	8001dd4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001db6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001dbe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dce:	f043 030b 	orr.w	r3, r3, #11
 8001dd2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001de2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001de6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f003 f8cf 	bl	8004f9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695a      	ldr	r2, [r3, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f002 fffe 	bl	8004e14 <USB_ReadInterrupts>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e22:	d124      	bne.n	8001e6e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 f894 	bl	8004f56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 f849 	bl	8003eca <USB_GetDevSpeed>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681c      	ldr	r4, [r3, #0]
 8001e44:	f001 f9e8 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8001e48:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	4620      	mov	r0, r4
 8001e54:	f001 fd48 	bl	80038e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f005 fba8 	bl	80075ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 ffce 	bl	8004e14 <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d10a      	bne.n	8001e98 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f005 fb85 	bl	8007592 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f002 0208 	and.w	r2, r2, #8
 8001e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 ffb9 	bl	8004e14 <USB_ReadInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea8:	2b80      	cmp	r3, #128	; 0x80
 8001eaa:	d122      	bne.n	8001ef2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eb8:	2301      	movs	r3, #1
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebc:	e014      	b.n	8001ee8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	4619      	mov	r1, r3
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fb27 	bl	8002530 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d3e5      	bcc.n	8001ebe <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 ff8c 	bl	8004e14 <USB_ReadInterrupts>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f06:	d13b      	bne.n	8001f80 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f08:	2301      	movs	r3, #1
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0c:	e02b      	b.n	8001f66 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3340      	adds	r3, #64	; 0x40
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d115      	bne.n	8001f60 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	da12      	bge.n	8001f60 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	333f      	adds	r3, #63	; 0x3f
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fae8 	bl	8002530 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3301      	adds	r3, #1
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d3ce      	bcc.n	8001f0e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 ff45 	bl	8004e14 <USB_ReadInterrupts>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f94:	d155      	bne.n	8002042 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f96:	2301      	movs	r3, #1
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9a:	e045      	b.n	8002028 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d12e      	bne.n	8002022 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001fc4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	da2b      	bge.n	8002022 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001fd6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d121      	bne.n	8002022 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10a      	bne.n	8002022 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800201a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201e:	6053      	str	r3, [r2, #4]
            break;
 8002020:	e007      	b.n	8002032 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	3301      	adds	r3, #1
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202e:	429a      	cmp	r2, r3
 8002030:	d3b4      	bcc.n	8001f9c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002040:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f002 fee4 	bl	8004e14 <USB_ReadInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002056:	d10a      	bne.n	800206e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f005 fb1f 	bl	800769c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800206c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f002 fece 	bl	8004e14 <USB_ReadInterrupts>
 8002078:	4603      	mov	r3, r0
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b04      	cmp	r3, #4
 8002080:	d115      	bne.n	80020ae <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f005 fb0f 	bl	80076b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	e000      	b.n	80020ae <HAL_PCD_IRQHandler+0x938>
      return;
 80020ac:	bf00      	nop
    }
  }
}
 80020ae:	3734      	adds	r7, #52	; 0x34
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd90      	pop	{r4, r7, pc}

080020b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_PCD_SetAddress+0x1a>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e013      	b.n	80020f6 <HAL_PCD_SetAddress+0x42>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 fe2c 	bl	8004d44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	4608      	mov	r0, r1
 8002108:	4611      	mov	r1, r2
 800210a:	461a      	mov	r2, r3
 800210c:	4603      	mov	r3, r0
 800210e:	70fb      	strb	r3, [r7, #3]
 8002110:	460b      	mov	r3, r1
 8002112:	803b      	strh	r3, [r7, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800211c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002120:	2b00      	cmp	r3, #0
 8002122:	da0f      	bge.n	8002144 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	f003 020f 	and.w	r2, r3, #15
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	3338      	adds	r3, #56	; 0x38
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	3304      	adds	r3, #4
 800213a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	705a      	strb	r2, [r3, #1]
 8002142:	e00f      	b.n	8002164 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	f003 020f 	and.w	r2, r3, #15
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	3304      	adds	r3, #4
 800215c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	b2da      	uxtb	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002170:	883a      	ldrh	r2, [r7, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	78ba      	ldrb	r2, [r7, #2]
 800217a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	785b      	ldrb	r3, [r3, #1]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d004      	beq.n	800218e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800218e:	78bb      	ldrb	r3, [r7, #2]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d102      	bne.n	800219a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_PCD_EP_Open+0xaa>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e00e      	b.n	80021c6 <HAL_PCD_EP_Open+0xc8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68f9      	ldr	r1, [r7, #12]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f001 feac 	bl	8003f14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80021c4:	7afb      	ldrb	r3, [r7, #11]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	da0f      	bge.n	8002202 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	f003 020f 	and.w	r2, r3, #15
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	3338      	adds	r3, #56	; 0x38
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	3304      	adds	r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	705a      	strb	r2, [r3, #1]
 8002200:	e00f      	b.n	8002222 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	f003 020f 	and.w	r2, r3, #15
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	3304      	adds	r3, #4
 800221a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_PCD_EP_Close+0x6e>
 8002238:	2302      	movs	r3, #2
 800223a:	e00e      	b.n	800225a <HAL_PCD_EP_Close+0x8c>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68f9      	ldr	r1, [r7, #12]
 800224a:	4618      	mov	r0, r3
 800224c:	f001 feea 	bl	8004024 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
 800226e:	460b      	mov	r3, r1
 8002270:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002272:	7afb      	ldrb	r3, [r7, #11]
 8002274:	f003 020f 	and.w	r2, r3, #15
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	3304      	adds	r3, #4
 800228a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2200      	movs	r2, #0
 800229c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2200      	movs	r2, #0
 80022a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022a4:	7afb      	ldrb	r3, [r7, #11]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d102      	bne.n	80022be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022be:	7afb      	ldrb	r3, [r7, #11]
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	6979      	ldr	r1, [r7, #20]
 80022d6:	f002 f9c9 	bl	800466c <USB_EP0StartXfer>
 80022da:	e008      	b.n	80022ee <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	6979      	ldr	r1, [r7, #20]
 80022ea:	f001 ff77 	bl	80041dc <USB_EPStartXfer>
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	f003 020f 	and.w	r2, r3, #15
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	460b      	mov	r3, r1
 8002336:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002338:	7afb      	ldrb	r3, [r7, #11]
 800233a:	f003 020f 	and.w	r2, r3, #15
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	3338      	adds	r3, #56	; 0x38
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	3304      	adds	r3, #4
 800234e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2200      	movs	r2, #0
 8002360:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2201      	movs	r2, #1
 8002366:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	b2da      	uxtb	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d102      	bne.n	8002382 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002382:	7afb      	ldrb	r3, [r7, #11]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	6979      	ldr	r1, [r7, #20]
 800239a:	f002 f967 	bl	800466c <USB_EP0StartXfer>
 800239e:	e008      	b.n	80023b2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	6979      	ldr	r1, [r7, #20]
 80023ae:	f001 ff15 	bl	80041dc <USB_EPStartXfer>
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	f003 020f 	and.w	r2, r3, #15
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d901      	bls.n	80023da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e050      	b.n	800247c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	da0f      	bge.n	8002402 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	f003 020f 	and.w	r2, r3, #15
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	3338      	adds	r3, #56	; 0x38
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	3304      	adds	r3, #4
 80023f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	705a      	strb	r2, [r3, #1]
 8002400:	e00d      	b.n	800241e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	4413      	add	r3, r2
 8002414:	3304      	adds	r3, #4
 8002416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	b2da      	uxtb	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_PCD_EP_SetStall+0x82>
 800243a:	2302      	movs	r3, #2
 800243c:	e01e      	b.n	800247c <HAL_PCD_EP_SetStall+0xc0>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68f9      	ldr	r1, [r7, #12]
 800244c:	4618      	mov	r0, r3
 800244e:	f002 fba5 	bl	8004b9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	b2d9      	uxtb	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800246c:	461a      	mov	r2, r3
 800246e:	f002 fd95 	bl	8004f9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	f003 020f 	and.w	r2, r3, #15
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	429a      	cmp	r2, r3
 800249c:	d901      	bls.n	80024a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e042      	b.n	8002528 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	da0f      	bge.n	80024ca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	f003 020f 	and.w	r2, r3, #15
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	3338      	adds	r3, #56	; 0x38
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	3304      	adds	r3, #4
 80024c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	705a      	strb	r2, [r3, #1]
 80024c8:	e00f      	b.n	80024ea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	f003 020f 	and.w	r2, r3, #15
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	3304      	adds	r3, #4
 80024e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_PCD_EP_ClrStall+0x86>
 8002506:	2302      	movs	r3, #2
 8002508:	e00e      	b.n	8002528 <HAL_PCD_EP_ClrStall+0xa4>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68f9      	ldr	r1, [r7, #12]
 8002518:	4618      	mov	r0, r3
 800251a:	f002 fbad 	bl	8004c78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800253c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002540:	2b00      	cmp	r3, #0
 8002542:	da0c      	bge.n	800255e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	f003 020f 	and.w	r2, r3, #15
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	3338      	adds	r3, #56	; 0x38
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	3304      	adds	r3, #4
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e00c      	b.n	8002578 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	f003 020f 	and.w	r2, r3, #15
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	3304      	adds	r3, #4
 8002576:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68f9      	ldr	r1, [r7, #12]
 800257e:	4618      	mov	r0, r3
 8002580:	f002 f9cc 	bl	800491c <USB_EPStopXfer>
 8002584:	4603      	mov	r3, r0
 8002586:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002588:	7afb      	ldrb	r3, [r7, #11]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b08a      	sub	sp, #40	; 0x28
 8002596:	af02      	add	r7, sp, #8
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	3338      	adds	r3, #56	; 0x38
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	3304      	adds	r3, #4
 80025b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a1a      	ldr	r2, [r3, #32]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d901      	bls.n	80025ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e06c      	b.n	80026a4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d902      	bls.n	80025e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3303      	adds	r3, #3
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025ee:	e02b      	b.n	8002648 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	699a      	ldr	r2, [r3, #24]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	429a      	cmp	r2, r3
 8002604:	d902      	bls.n	800260c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	3303      	adds	r3, #3
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6919      	ldr	r1, [r3, #16]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002624:	b2db      	uxtb	r3, r3
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	4603      	mov	r3, r0
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f002 fa20 	bl	8004a70 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	441a      	add	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a1a      	ldr	r2, [r3, #32]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	441a      	add	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	b29b      	uxth	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	429a      	cmp	r2, r3
 800265c:	d809      	bhi.n	8002672 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a1a      	ldr	r2, [r3, #32]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002666:	429a      	cmp	r2, r3
 8002668:	d203      	bcs.n	8002672 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1be      	bne.n	80025f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	429a      	cmp	r2, r3
 800267c:	d811      	bhi.n	80026a2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	2201      	movs	r2, #1
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	43db      	mvns	r3, r3
 8002698:	6939      	ldr	r1, [r7, #16]
 800269a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800269e:	4013      	ands	r3, r2
 80026a0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3720      	adds	r7, #32
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	333c      	adds	r3, #60	; 0x3c
 80026c4:	3304      	adds	r3, #4
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d17b      	bne.n	80027da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d015      	beq.n	8002718 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	4a61      	ldr	r2, [pc, #388]	; (8002874 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	f240 80b9 	bls.w	8002868 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80b3 	beq.w	8002868 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	4413      	add	r3, r2
 800270a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270e:	461a      	mov	r2, r3
 8002710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002714:	6093      	str	r3, [r2, #8]
 8002716:	e0a7      	b.n	8002868 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272e:	461a      	mov	r2, r3
 8002730:	2320      	movs	r3, #32
 8002732:	6093      	str	r3, [r2, #8]
 8002734:	e098      	b.n	8002868 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800273c:	2b00      	cmp	r3, #0
 800273e:	f040 8093 	bne.w	8002868 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	4a4b      	ldr	r2, [pc, #300]	; (8002874 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d90f      	bls.n	800276a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002760:	461a      	mov	r2, r3
 8002762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002766:	6093      	str	r3, [r2, #8]
 8002768:	e07e      	b.n	8002868 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	4413      	add	r3, r2
 800277c:	3304      	adds	r3, #4
 800277e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	69da      	ldr	r2, [r3, #28]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	0159      	lsls	r1, r3, #5
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	440b      	add	r3, r1
 800278c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002796:	1ad2      	subs	r2, r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d114      	bne.n	80027cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027b4:	461a      	mov	r2, r3
 80027b6:	2101      	movs	r1, #1
 80027b8:	f002 fbf0 	bl	8004f9c <USB_EP0_OutStart>
 80027bc:	e006      	b.n	80027cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	441a      	add	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	4619      	mov	r1, r3
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f004 fea8 	bl	8007528 <HAL_PCD_DataOutStageCallback>
 80027d8:	e046      	b.n	8002868 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	4a26      	ldr	r2, [pc, #152]	; (8002878 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d124      	bne.n	800282c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f8:	461a      	mov	r2, r3
 80027fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027fe:	6093      	str	r3, [r2, #8]
 8002800:	e032      	b.n	8002868 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	4413      	add	r3, r2
 8002814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002818:	461a      	mov	r2, r3
 800281a:	2320      	movs	r3, #32
 800281c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	4619      	mov	r1, r3
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f004 fe7f 	bl	8007528 <HAL_PCD_DataOutStageCallback>
 800282a:	e01d      	b.n	8002868 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d114      	bne.n	800285c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d108      	bne.n	800285c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002854:	461a      	mov	r2, r3
 8002856:	2100      	movs	r1, #0
 8002858:	f002 fba0 	bl	8004f9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	4619      	mov	r1, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f004 fe60 	bl	8007528 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3720      	adds	r7, #32
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	4f54300a 	.word	0x4f54300a
 8002878:	4f54310a 	.word	0x4f54310a

0800287c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	333c      	adds	r3, #60	; 0x3c
 8002894:	3304      	adds	r3, #4
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4a15      	ldr	r2, [pc, #84]	; (8002904 <PCD_EP_OutSetupPacket_int+0x88>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d90e      	bls.n	80028d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d009      	beq.n	80028d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c8:	461a      	mov	r2, r3
 80028ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f004 fe17 	bl	8007504 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <PCD_EP_OutSetupPacket_int+0x88>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d90c      	bls.n	80028f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d108      	bne.n	80028f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028f0:	461a      	mov	r2, r3
 80028f2:	2101      	movs	r1, #1
 80028f4:	f002 fb52 	bl	8004f9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	4f54300a 	.word	0x4f54300a

08002908 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	70fb      	strb	r3, [r7, #3]
 8002914:	4613      	mov	r3, r2
 8002916:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d107      	bne.n	8002936 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002926:	883b      	ldrh	r3, [r7, #0]
 8002928:	0419      	lsls	r1, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	430a      	orrs	r2, r1
 8002932:	629a      	str	r2, [r3, #40]	; 0x28
 8002934:	e028      	b.n	8002988 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4413      	add	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
 8002948:	e00d      	b.n	8002966 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	3340      	adds	r3, #64	; 0x40
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	4413      	add	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	3301      	adds	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	7bfa      	ldrb	r2, [r7, #15]
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	3b01      	subs	r3, #1
 800296c:	429a      	cmp	r2, r3
 800296e:	d3ec      	bcc.n	800294a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002970:	883b      	ldrh	r3, [r7, #0]
 8002972:	0418      	lsls	r0, r3, #16
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6819      	ldr	r1, [r3, #0]
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	3b01      	subs	r3, #1
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	4302      	orrs	r2, r0
 8002980:	3340      	adds	r3, #64	; 0x40
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	887a      	ldrh	r2, [r7, #2]
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e267      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d075      	beq.n	8002ada <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ee:	4b88      	ldr	r3, [pc, #544]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d00c      	beq.n	8002a14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fa:	4b85      	ldr	r3, [pc, #532]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d112      	bne.n	8002a2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a06:	4b82      	ldr	r3, [pc, #520]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a12:	d10b      	bne.n	8002a2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	4b7e      	ldr	r3, [pc, #504]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d05b      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x108>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d157      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e242      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a34:	d106      	bne.n	8002a44 <HAL_RCC_OscConfig+0x74>
 8002a36:	4b76      	ldr	r3, [pc, #472]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a75      	ldr	r2, [pc, #468]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e01d      	b.n	8002a80 <HAL_RCC_OscConfig+0xb0>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x98>
 8002a4e:	4b70      	ldr	r3, [pc, #448]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a6f      	ldr	r2, [pc, #444]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b6d      	ldr	r3, [pc, #436]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6c      	ldr	r2, [pc, #432]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0xb0>
 8002a68:	4b69      	ldr	r3, [pc, #420]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a68      	ldr	r2, [pc, #416]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a65      	ldr	r2, [pc, #404]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d013      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7fe fa2e 	bl	8000ee8 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fe fa2a 	bl	8000ee8 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e207      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b5b      	ldr	r3, [pc, #364]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0xc0>
 8002aae:	e014      	b.n	8002ada <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fa1a 	bl	8000ee8 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7fe fa16 	bl	8000ee8 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e1f3      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	4b51      	ldr	r3, [pc, #324]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0xe8>
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d063      	beq.n	8002bae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af2:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d11c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afe:	4b44      	ldr	r3, [pc, #272]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	4b41      	ldr	r3, [pc, #260]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_RCC_OscConfig+0x152>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e1c7      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4937      	ldr	r1, [pc, #220]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	e03a      	b.n	8002bae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b40:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <HAL_RCC_OscConfig+0x244>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe f9cf 	bl	8000ee8 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7fe f9cb 	bl	8000ee8 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e1a8      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b60:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4925      	ldr	r1, [pc, #148]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]
 8002b80:	e015      	b.n	8002bae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b82:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <HAL_RCC_OscConfig+0x244>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe f9ae 	bl	8000ee8 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b90:	f7fe f9aa 	bl	8000ee8 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e187      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d036      	beq.n	8002c28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d016      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_RCC_OscConfig+0x248>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fe f98e 	bl	8000ee8 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7fe f98a 	bl	8000ee8 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e167      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x200>
 8002bee:	e01b      	b.n	8002c28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_OscConfig+0x248>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf6:	f7fe f977 	bl	8000ee8 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfc:	e00e      	b.n	8002c1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7fe f973 	bl	8000ee8 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d907      	bls.n	8002c1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e150      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
 8002c10:	40023800 	.word	0x40023800
 8002c14:	42470000 	.word	0x42470000
 8002c18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	4b88      	ldr	r3, [pc, #544]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ea      	bne.n	8002bfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8097 	beq.w	8002d64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3a:	4b81      	ldr	r3, [pc, #516]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10f      	bne.n	8002c66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	4b7d      	ldr	r3, [pc, #500]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a7c      	ldr	r2, [pc, #496]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
 8002c56:	4b7a      	ldr	r3, [pc, #488]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c62:	2301      	movs	r3, #1
 8002c64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c66:	4b77      	ldr	r3, [pc, #476]	; (8002e44 <HAL_RCC_OscConfig+0x474>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d118      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c72:	4b74      	ldr	r3, [pc, #464]	; (8002e44 <HAL_RCC_OscConfig+0x474>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a73      	ldr	r2, [pc, #460]	; (8002e44 <HAL_RCC_OscConfig+0x474>)
 8002c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7e:	f7fe f933 	bl	8000ee8 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c86:	f7fe f92f 	bl	8000ee8 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e10c      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <HAL_RCC_OscConfig+0x474>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x2ea>
 8002cac:	4b64      	ldr	r3, [pc, #400]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4a63      	ldr	r2, [pc, #396]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb8:	e01c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x324>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x30c>
 8002cc2:	4b5f      	ldr	r3, [pc, #380]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4a5e      	ldr	r2, [pc, #376]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cce:	4b5c      	ldr	r3, [pc, #368]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	4a5b      	ldr	r2, [pc, #364]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x324>
 8002cdc:	4b58      	ldr	r3, [pc, #352]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	4a57      	ldr	r2, [pc, #348]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce8:	4b55      	ldr	r3, [pc, #340]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	4a54      	ldr	r2, [pc, #336]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cee:	f023 0304 	bic.w	r3, r3, #4
 8002cf2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d015      	beq.n	8002d28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7fe f8f4 	bl	8000ee8 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe f8f0 	bl	8000ee8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0cb      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1a:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0ee      	beq.n	8002d04 <HAL_RCC_OscConfig+0x334>
 8002d26:	e014      	b.n	8002d52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d28:	f7fe f8de 	bl	8000ee8 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fe f8da 	bl	8000ee8 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e0b5      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d46:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1ee      	bne.n	8002d30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d58:	4b39      	ldr	r3, [pc, #228]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	4a38      	ldr	r2, [pc, #224]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80a1 	beq.w	8002eb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d6e:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d05c      	beq.n	8002e34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d141      	bne.n	8002e06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d82:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <HAL_RCC_OscConfig+0x478>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe f8ae 	bl	8000ee8 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe f8aa 	bl	8000ee8 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e087      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	019b      	lsls	r3, r3, #6
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	491b      	ldr	r1, [pc, #108]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_RCC_OscConfig+0x478>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fe f883 	bl	8000ee8 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fe f87f 	bl	8000ee8 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e05c      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x416>
 8002e04:	e054      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <HAL_RCC_OscConfig+0x478>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7fe f86c 	bl	8000ee8 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fe f868 	bl	8000ee8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e045      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x444>
 8002e32:	e03d      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e038      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40007000 	.word	0x40007000
 8002e48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <HAL_RCC_OscConfig+0x4ec>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d028      	beq.n	8002eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d121      	bne.n	8002eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d11a      	bne.n	8002eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d111      	bne.n	8002eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	085b      	lsrs	r3, r3, #1
 8002e94:	3b01      	subs	r3, #1
 8002e96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d107      	bne.n	8002eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800

08002ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0cc      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b68      	ldr	r3, [pc, #416]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d90c      	bls.n	8002efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b65      	ldr	r3, [pc, #404]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eea:	4b63      	ldr	r3, [pc, #396]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0b8      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d020      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f14:	4b59      	ldr	r3, [pc, #356]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	4a58      	ldr	r2, [pc, #352]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f2c:	4b53      	ldr	r3, [pc, #332]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	4a52      	ldr	r2, [pc, #328]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f38:	4b50      	ldr	r3, [pc, #320]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	494d      	ldr	r1, [pc, #308]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d044      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	4b47      	ldr	r3, [pc, #284]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d119      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e07f      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d003      	beq.n	8002f7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7e:	4b3f      	ldr	r3, [pc, #252]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e06f      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8e:	4b3b      	ldr	r3, [pc, #236]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e067      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9e:	4b37      	ldr	r3, [pc, #220]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f023 0203 	bic.w	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4934      	ldr	r1, [pc, #208]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb0:	f7fd ff9a 	bl	8000ee8 <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb8:	f7fd ff96 	bl	8000ee8 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e04f      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	4b2b      	ldr	r3, [pc, #172]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 020c 	and.w	r2, r3, #12
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d1eb      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b25      	ldr	r3, [pc, #148]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d20c      	bcs.n	8003008 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b22      	ldr	r3, [pc, #136]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b20      	ldr	r3, [pc, #128]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e032      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003014:	4b19      	ldr	r3, [pc, #100]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4916      	ldr	r1, [pc, #88]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	490e      	ldr	r1, [pc, #56]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003046:	f000 f821 	bl	800308c <HAL_RCC_GetSysClockFreq>
 800304a:	4602      	mov	r2, r0
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	490a      	ldr	r1, [pc, #40]	; (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	5ccb      	ldrb	r3, [r1, r3]
 800305a:	fa22 f303 	lsr.w	r3, r2, r3
 800305e:	4a09      	ldr	r2, [pc, #36]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd fefa 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40023c00 	.word	0x40023c00
 800307c:	40023800 	.word	0x40023800
 8003080:	080084ac 	.word	0x080084ac
 8003084:	20000068 	.word	0x20000068
 8003088:	2000006c 	.word	0x2000006c

0800308c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800308c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003090:	b090      	sub	sp, #64	; 0x40
 8003092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	637b      	str	r3, [r7, #52]	; 0x34
 8003098:	2300      	movs	r3, #0
 800309a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800309c:	2300      	movs	r3, #0
 800309e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a4:	4b59      	ldr	r3, [pc, #356]	; (800320c <HAL_RCC_GetSysClockFreq+0x180>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d00d      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x40>
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	f200 80a1 	bhi.w	80031f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x34>
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80030be:	e09b      	b.n	80031f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030c0:	4b53      	ldr	r3, [pc, #332]	; (8003210 <HAL_RCC_GetSysClockFreq+0x184>)
 80030c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80030c4:	e09b      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030c6:	4b53      	ldr	r3, [pc, #332]	; (8003214 <HAL_RCC_GetSysClockFreq+0x188>)
 80030c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030ca:	e098      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030cc:	4b4f      	ldr	r3, [pc, #316]	; (800320c <HAL_RCC_GetSysClockFreq+0x180>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030d6:	4b4d      	ldr	r3, [pc, #308]	; (800320c <HAL_RCC_GetSysClockFreq+0x180>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d028      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e2:	4b4a      	ldr	r3, [pc, #296]	; (800320c <HAL_RCC_GetSysClockFreq+0x180>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	2200      	movs	r2, #0
 80030ea:	623b      	str	r3, [r7, #32]
 80030ec:	627a      	str	r2, [r7, #36]	; 0x24
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030f4:	2100      	movs	r1, #0
 80030f6:	4b47      	ldr	r3, [pc, #284]	; (8003214 <HAL_RCC_GetSysClockFreq+0x188>)
 80030f8:	fb03 f201 	mul.w	r2, r3, r1
 80030fc:	2300      	movs	r3, #0
 80030fe:	fb00 f303 	mul.w	r3, r0, r3
 8003102:	4413      	add	r3, r2
 8003104:	4a43      	ldr	r2, [pc, #268]	; (8003214 <HAL_RCC_GetSysClockFreq+0x188>)
 8003106:	fba0 1202 	umull	r1, r2, r0, r2
 800310a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800310c:	460a      	mov	r2, r1
 800310e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003112:	4413      	add	r3, r2
 8003114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003118:	2200      	movs	r2, #0
 800311a:	61bb      	str	r3, [r7, #24]
 800311c:	61fa      	str	r2, [r7, #28]
 800311e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003122:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003126:	f7fd f8c3 	bl	80002b0 <__aeabi_uldivmod>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4613      	mov	r3, r2
 8003130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003132:	e053      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003134:	4b35      	ldr	r3, [pc, #212]	; (800320c <HAL_RCC_GetSysClockFreq+0x180>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	099b      	lsrs	r3, r3, #6
 800313a:	2200      	movs	r2, #0
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	617a      	str	r2, [r7, #20]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003146:	f04f 0b00 	mov.w	fp, #0
 800314a:	4652      	mov	r2, sl
 800314c:	465b      	mov	r3, fp
 800314e:	f04f 0000 	mov.w	r0, #0
 8003152:	f04f 0100 	mov.w	r1, #0
 8003156:	0159      	lsls	r1, r3, #5
 8003158:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800315c:	0150      	lsls	r0, r2, #5
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	ebb2 080a 	subs.w	r8, r2, sl
 8003166:	eb63 090b 	sbc.w	r9, r3, fp
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003176:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800317a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800317e:	ebb2 0408 	subs.w	r4, r2, r8
 8003182:	eb63 0509 	sbc.w	r5, r3, r9
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	00eb      	lsls	r3, r5, #3
 8003190:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003194:	00e2      	lsls	r2, r4, #3
 8003196:	4614      	mov	r4, r2
 8003198:	461d      	mov	r5, r3
 800319a:	eb14 030a 	adds.w	r3, r4, sl
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	eb45 030b 	adc.w	r3, r5, fp
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031b2:	4629      	mov	r1, r5
 80031b4:	028b      	lsls	r3, r1, #10
 80031b6:	4621      	mov	r1, r4
 80031b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031bc:	4621      	mov	r1, r4
 80031be:	028a      	lsls	r2, r1, #10
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c6:	2200      	movs	r2, #0
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	60fa      	str	r2, [r7, #12]
 80031cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031d0:	f7fd f86e 	bl	80002b0 <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4613      	mov	r3, r2
 80031da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_RCC_GetSysClockFreq+0x180>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	0c1b      	lsrs	r3, r3, #16
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	3301      	adds	r3, #1
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80031ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031f6:	e002      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_RCC_GetSysClockFreq+0x184>)
 80031fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003200:	4618      	mov	r0, r3
 8003202:	3740      	adds	r7, #64	; 0x40
 8003204:	46bd      	mov	sp, r7
 8003206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800320a:	bf00      	nop
 800320c:	40023800 	.word	0x40023800
 8003210:	00f42400 	.word	0x00f42400
 8003214:	017d7840 	.word	0x017d7840

08003218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <HAL_RCC_GetHCLKFreq+0x14>)
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000068 	.word	0x20000068

08003230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e041      	b.n	80032c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd fd18 	bl	8000c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3304      	adds	r3, #4
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f000 f950 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d001      	beq.n	80032e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e03c      	b.n	8003362 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1e      	ldr	r2, [pc, #120]	; (8003370 <HAL_TIM_Base_Start+0xa0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d018      	beq.n	800332c <HAL_TIM_Base_Start+0x5c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003302:	d013      	beq.n	800332c <HAL_TIM_Base_Start+0x5c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1a      	ldr	r2, [pc, #104]	; (8003374 <HAL_TIM_Base_Start+0xa4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00e      	beq.n	800332c <HAL_TIM_Base_Start+0x5c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a19      	ldr	r2, [pc, #100]	; (8003378 <HAL_TIM_Base_Start+0xa8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d009      	beq.n	800332c <HAL_TIM_Base_Start+0x5c>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a17      	ldr	r2, [pc, #92]	; (800337c <HAL_TIM_Base_Start+0xac>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_TIM_Base_Start+0x5c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a16      	ldr	r2, [pc, #88]	; (8003380 <HAL_TIM_Base_Start+0xb0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d111      	bne.n	8003350 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b06      	cmp	r3, #6
 800333c:	d010      	beq.n	8003360 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0201 	orr.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334e:	e007      	b.n	8003360 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40010000 	.word	0x40010000
 8003374:	40000400 	.word	0x40000400
 8003378:	40000800 	.word	0x40000800
 800337c:	40000c00 	.word	0x40000c00
 8003380:	40014000 	.word	0x40014000

08003384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_TIM_ConfigClockSource+0x1c>
 800339c:	2302      	movs	r3, #2
 800339e:	e0b4      	b.n	800350a <HAL_TIM_ConfigClockSource+0x186>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d8:	d03e      	beq.n	8003458 <HAL_TIM_ConfigClockSource+0xd4>
 80033da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033de:	f200 8087 	bhi.w	80034f0 <HAL_TIM_ConfigClockSource+0x16c>
 80033e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e6:	f000 8086 	beq.w	80034f6 <HAL_TIM_ConfigClockSource+0x172>
 80033ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ee:	d87f      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x16c>
 80033f0:	2b70      	cmp	r3, #112	; 0x70
 80033f2:	d01a      	beq.n	800342a <HAL_TIM_ConfigClockSource+0xa6>
 80033f4:	2b70      	cmp	r3, #112	; 0x70
 80033f6:	d87b      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x16c>
 80033f8:	2b60      	cmp	r3, #96	; 0x60
 80033fa:	d050      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x11a>
 80033fc:	2b60      	cmp	r3, #96	; 0x60
 80033fe:	d877      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003400:	2b50      	cmp	r3, #80	; 0x50
 8003402:	d03c      	beq.n	800347e <HAL_TIM_ConfigClockSource+0xfa>
 8003404:	2b50      	cmp	r3, #80	; 0x50
 8003406:	d873      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003408:	2b40      	cmp	r3, #64	; 0x40
 800340a:	d058      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x13a>
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	d86f      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003410:	2b30      	cmp	r3, #48	; 0x30
 8003412:	d064      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x15a>
 8003414:	2b30      	cmp	r3, #48	; 0x30
 8003416:	d86b      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003418:	2b20      	cmp	r3, #32
 800341a:	d060      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x15a>
 800341c:	2b20      	cmp	r3, #32
 800341e:	d867      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d05c      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x15a>
 8003424:	2b10      	cmp	r3, #16
 8003426:	d05a      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x15a>
 8003428:	e062      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6899      	ldr	r1, [r3, #8]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f000 f965 	bl	8003708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800344c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	609a      	str	r2, [r3, #8]
      break;
 8003456:	e04f      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	6899      	ldr	r1, [r3, #8]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f000 f94e 	bl	8003708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800347a:	609a      	str	r2, [r3, #8]
      break;
 800347c:	e03c      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	461a      	mov	r2, r3
 800348c:	f000 f8c2 	bl	8003614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2150      	movs	r1, #80	; 0x50
 8003496:	4618      	mov	r0, r3
 8003498:	f000 f91b 	bl	80036d2 <TIM_ITRx_SetConfig>
      break;
 800349c:	e02c      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6859      	ldr	r1, [r3, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f000 f8e1 	bl	8003672 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2160      	movs	r1, #96	; 0x60
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f90b 	bl	80036d2 <TIM_ITRx_SetConfig>
      break;
 80034bc:	e01c      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6859      	ldr	r1, [r3, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f000 f8a2 	bl	8003614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2140      	movs	r1, #64	; 0x40
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f8fb 	bl	80036d2 <TIM_ITRx_SetConfig>
      break;
 80034dc:	e00c      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4619      	mov	r1, r3
 80034e8:	4610      	mov	r0, r2
 80034ea:	f000 f8f2 	bl	80036d2 <TIM_ITRx_SetConfig>
      break;
 80034ee:	e003      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
      break;
 80034f4:	e000      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003508:	7bfb      	ldrb	r3, [r7, #15]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a34      	ldr	r2, [pc, #208]	; (80035f8 <TIM_Base_SetConfig+0xe4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00f      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003532:	d00b      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a31      	ldr	r2, [pc, #196]	; (80035fc <TIM_Base_SetConfig+0xe8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a30      	ldr	r2, [pc, #192]	; (8003600 <TIM_Base_SetConfig+0xec>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <TIM_Base_SetConfig+0xf0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d108      	bne.n	800355e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a25      	ldr	r2, [pc, #148]	; (80035f8 <TIM_Base_SetConfig+0xe4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01b      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356c:	d017      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a22      	ldr	r2, [pc, #136]	; (80035fc <TIM_Base_SetConfig+0xe8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a21      	ldr	r2, [pc, #132]	; (8003600 <TIM_Base_SetConfig+0xec>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00f      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a20      	ldr	r2, [pc, #128]	; (8003604 <TIM_Base_SetConfig+0xf0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00b      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1f      	ldr	r2, [pc, #124]	; (8003608 <TIM_Base_SetConfig+0xf4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1e      	ldr	r2, [pc, #120]	; (800360c <TIM_Base_SetConfig+0xf8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d003      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <TIM_Base_SetConfig+0xfc>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d108      	bne.n	80035b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <TIM_Base_SetConfig+0xe4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d103      	bne.n	80035e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	615a      	str	r2, [r3, #20]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800
 8003604:	40000c00 	.word	0x40000c00
 8003608:	40014000 	.word	0x40014000
 800360c:	40014400 	.word	0x40014400
 8003610:	40014800 	.word	0x40014800

08003614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f023 0201 	bic.w	r2, r3, #1
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800363e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f023 030a 	bic.w	r3, r3, #10
 8003650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	621a      	str	r2, [r3, #32]
}
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003672:	b480      	push	{r7}
 8003674:	b087      	sub	sp, #28
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f023 0210 	bic.w	r2, r3, #16
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800369c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	031b      	lsls	r3, r3, #12
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b085      	sub	sp, #20
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f043 0307 	orr.w	r3, r3, #7
 80036f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	609a      	str	r2, [r3, #8]
}
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	021a      	lsls	r2, r3, #8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	431a      	orrs	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	609a      	str	r2, [r3, #8]
}
 800373c:	bf00      	nop
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800375c:	2302      	movs	r3, #2
 800375e:	e050      	b.n	8003802 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d018      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ac:	d013      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a18      	ldr	r2, [pc, #96]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00e      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a16      	ldr	r2, [pc, #88]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d009      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a15      	ldr	r2, [pc, #84]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d004      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a13      	ldr	r2, [pc, #76]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d10c      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40010000 	.word	0x40010000
 8003814:	40000400 	.word	0x40000400
 8003818:	40000800 	.word	0x40000800
 800381c:	40000c00 	.word	0x40000c00
 8003820:	40014000 	.word	0x40014000

08003824 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003824:	b084      	sub	sp, #16
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	f107 001c 	add.w	r0, r7, #28
 8003832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	2b01      	cmp	r3, #1
 800383a:	d122      	bne.n	8003882 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003866:	2b01      	cmp	r3, #1
 8003868:	d105      	bne.n	8003876 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f001 fbee 	bl	8005058 <USB_CoreReset>
 800387c:	4603      	mov	r3, r0
 800387e:	73fb      	strb	r3, [r7, #15]
 8003880:	e01a      	b.n	80038b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f001 fbe2 	bl	8005058 <USB_CoreReset>
 8003894:	4603      	mov	r3, r0
 8003896:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	639a      	str	r2, [r3, #56]	; 0x38
 80038aa:	e005      	b.n	80038b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d10b      	bne.n	80038d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f043 0206 	orr.w	r2, r3, #6
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f043 0220 	orr.w	r2, r3, #32
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038e2:	b004      	add	sp, #16
 80038e4:	4770      	bx	lr
	...

080038e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	4613      	mov	r3, r2
 80038f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d165      	bne.n	80039c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4a41      	ldr	r2, [pc, #260]	; (8003a04 <USB_SetTurnaroundTime+0x11c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d906      	bls.n	8003912 <USB_SetTurnaroundTime+0x2a>
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4a40      	ldr	r2, [pc, #256]	; (8003a08 <USB_SetTurnaroundTime+0x120>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d202      	bcs.n	8003912 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800390c:	230f      	movs	r3, #15
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e062      	b.n	80039d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4a3c      	ldr	r2, [pc, #240]	; (8003a08 <USB_SetTurnaroundTime+0x120>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d306      	bcc.n	8003928 <USB_SetTurnaroundTime+0x40>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	4a3b      	ldr	r2, [pc, #236]	; (8003a0c <USB_SetTurnaroundTime+0x124>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d202      	bcs.n	8003928 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003922:	230e      	movs	r3, #14
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e057      	b.n	80039d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4a38      	ldr	r2, [pc, #224]	; (8003a0c <USB_SetTurnaroundTime+0x124>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d306      	bcc.n	800393e <USB_SetTurnaroundTime+0x56>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4a37      	ldr	r2, [pc, #220]	; (8003a10 <USB_SetTurnaroundTime+0x128>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d202      	bcs.n	800393e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003938:	230d      	movs	r3, #13
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e04c      	b.n	80039d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4a33      	ldr	r2, [pc, #204]	; (8003a10 <USB_SetTurnaroundTime+0x128>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d306      	bcc.n	8003954 <USB_SetTurnaroundTime+0x6c>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	4a32      	ldr	r2, [pc, #200]	; (8003a14 <USB_SetTurnaroundTime+0x12c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d802      	bhi.n	8003954 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800394e:	230c      	movs	r3, #12
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e041      	b.n	80039d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4a2f      	ldr	r2, [pc, #188]	; (8003a14 <USB_SetTurnaroundTime+0x12c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d906      	bls.n	800396a <USB_SetTurnaroundTime+0x82>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4a2e      	ldr	r2, [pc, #184]	; (8003a18 <USB_SetTurnaroundTime+0x130>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d802      	bhi.n	800396a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003964:	230b      	movs	r3, #11
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e036      	b.n	80039d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4a2a      	ldr	r2, [pc, #168]	; (8003a18 <USB_SetTurnaroundTime+0x130>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d906      	bls.n	8003980 <USB_SetTurnaroundTime+0x98>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4a29      	ldr	r2, [pc, #164]	; (8003a1c <USB_SetTurnaroundTime+0x134>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d802      	bhi.n	8003980 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800397a:	230a      	movs	r3, #10
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	e02b      	b.n	80039d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4a26      	ldr	r2, [pc, #152]	; (8003a1c <USB_SetTurnaroundTime+0x134>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d906      	bls.n	8003996 <USB_SetTurnaroundTime+0xae>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4a25      	ldr	r2, [pc, #148]	; (8003a20 <USB_SetTurnaroundTime+0x138>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d202      	bcs.n	8003996 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003990:	2309      	movs	r3, #9
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	e020      	b.n	80039d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <USB_SetTurnaroundTime+0x138>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d306      	bcc.n	80039ac <USB_SetTurnaroundTime+0xc4>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4a20      	ldr	r2, [pc, #128]	; (8003a24 <USB_SetTurnaroundTime+0x13c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d802      	bhi.n	80039ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80039a6:	2308      	movs	r3, #8
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	e015      	b.n	80039d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <USB_SetTurnaroundTime+0x13c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d906      	bls.n	80039c2 <USB_SetTurnaroundTime+0xda>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <USB_SetTurnaroundTime+0x140>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d202      	bcs.n	80039c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80039bc:	2307      	movs	r3, #7
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e00a      	b.n	80039d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80039c2:	2306      	movs	r3, #6
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e007      	b.n	80039d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80039ce:	2309      	movs	r3, #9
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	e001      	b.n	80039d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80039d4:	2309      	movs	r3, #9
 80039d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	029b      	lsls	r3, r3, #10
 80039ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	00d8acbf 	.word	0x00d8acbf
 8003a08:	00e4e1c0 	.word	0x00e4e1c0
 8003a0c:	00f42400 	.word	0x00f42400
 8003a10:	01067380 	.word	0x01067380
 8003a14:	011a499f 	.word	0x011a499f
 8003a18:	01312cff 	.word	0x01312cff
 8003a1c:	014ca43f 	.word	0x014ca43f
 8003a20:	016e3600 	.word	0x016e3600
 8003a24:	01a6ab1f 	.word	0x01a6ab1f
 8003a28:	01e84800 	.word	0x01e84800

08003a2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f043 0201 	orr.w	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 0201 	bic.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d115      	bne.n	8003abe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	f7fd fa2e 	bl	8000f00 <HAL_Delay>
      ms++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f001 fa45 	bl	8004f3a <USB_GetMode>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d01e      	beq.n	8003af4 <USB_SetCurrentMode+0x84>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b31      	cmp	r3, #49	; 0x31
 8003aba:	d9f0      	bls.n	8003a9e <USB_SetCurrentMode+0x2e>
 8003abc:	e01a      	b.n	8003af4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d115      	bne.n	8003af0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f7fd fa15 	bl	8000f00 <HAL_Delay>
      ms++;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f001 fa2c 	bl	8004f3a <USB_GetMode>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <USB_SetCurrentMode+0x84>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b31      	cmp	r3, #49	; 0x31
 8003aec:	d9f0      	bls.n	8003ad0 <USB_SetCurrentMode+0x60>
 8003aee:	e001      	b.n	8003af4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e005      	b.n	8003b00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b32      	cmp	r3, #50	; 0x32
 8003af8:	d101      	bne.n	8003afe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b08:	b084      	sub	sp, #16
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b086      	sub	sp, #24
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	e009      	b.n	8003b3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	3340      	adds	r3, #64	; 0x40
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	2200      	movs	r2, #0
 8003b34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	2b0e      	cmp	r3, #14
 8003b40:	d9f2      	bls.n	8003b28 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d11c      	bne.n	8003b82 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b56:	f043 0302 	orr.w	r3, r3, #2
 8003b5a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003b80:	e00b      	b.n	8003b9a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bac:	4619      	mov	r1, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	680b      	ldr	r3, [r1, #0]
 8003bb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d10c      	bne.n	8003bda <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d104      	bne.n	8003bd0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f965 	bl	8003e98 <USB_SetDevSpeed>
 8003bce:	e008      	b.n	8003be2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f960 	bl	8003e98 <USB_SetDevSpeed>
 8003bd8:	e003      	b.n	8003be2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003bda:	2103      	movs	r1, #3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f95b 	bl	8003e98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003be2:	2110      	movs	r1, #16
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f8f3 	bl	8003dd0 <USB_FlushTxFifo>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f91f 	bl	8003e38 <USB_FlushRxFifo>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c16:	461a      	mov	r2, r3
 8003c18:	2300      	movs	r3, #0
 8003c1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c22:	461a      	mov	r2, r3
 8003c24:	2300      	movs	r3, #0
 8003c26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	e043      	b.n	8003cb6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c44:	d118      	bne.n	8003c78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	e013      	b.n	8003c8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	e008      	b.n	8003c8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c84:	461a      	mov	r2, r3
 8003c86:	2300      	movs	r3, #0
 8003c88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c96:	461a      	mov	r2, r3
 8003c98:	2300      	movs	r3, #0
 8003c9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d3b7      	bcc.n	8003c2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	e043      	b.n	8003d4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cda:	d118      	bne.n	8003d0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10a      	bne.n	8003cf8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e013      	b.n	8003d20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d04:	461a      	mov	r2, r3
 8003d06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	e008      	b.n	8003d20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2300      	movs	r3, #0
 8003d30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d3b7      	bcc.n	8003cc4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f043 0210 	orr.w	r2, r3, #16
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699a      	ldr	r2, [r3, #24]
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <USB_DevInit+0x2c4>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f043 0208 	orr.w	r2, r3, #8
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d107      	bne.n	8003dbc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003db4:	f043 0304 	orr.w	r3, r3, #4
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dc8:	b004      	add	sp, #16
 8003dca:	4770      	bx	lr
 8003dcc:	803c3800 	.word	0x803c3800

08003dd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3301      	adds	r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <USB_FlushTxFifo+0x64>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d901      	bls.n	8003df0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e01b      	b.n	8003e28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	daf2      	bge.n	8003dde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	019b      	lsls	r3, r3, #6
 8003e00:	f043 0220 	orr.w	r2, r3, #32
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <USB_FlushTxFifo+0x64>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e006      	b.n	8003e28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	d0f0      	beq.n	8003e08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	00030d40 	.word	0x00030d40

08003e38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3301      	adds	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4a11      	ldr	r2, [pc, #68]	; (8003e94 <USB_FlushRxFifo+0x5c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e018      	b.n	8003e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	daf2      	bge.n	8003e44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2210      	movs	r2, #16
 8003e66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <USB_FlushRxFifo+0x5c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d901      	bls.n	8003e7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e006      	b.n	8003e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b10      	cmp	r3, #16
 8003e84:	d0f0      	beq.n	8003e68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	00030d40 	.word	0x00030d40

08003e98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	68f9      	ldr	r1, [r7, #12]
 8003eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b087      	sub	sp, #28
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 0306 	and.w	r3, r3, #6
 8003ee2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d102      	bne.n	8003ef0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003eea:	2300      	movs	r3, #0
 8003eec:	75fb      	strb	r3, [r7, #23]
 8003eee:	e00a      	b.n	8003f06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d002      	beq.n	8003efc <USB_GetDevSpeed+0x32>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b06      	cmp	r3, #6
 8003efa:	d102      	bne.n	8003f02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003efc:	2302      	movs	r3, #2
 8003efe:	75fb      	strb	r3, [r7, #23]
 8003f00:	e001      	b.n	8003f06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f02:	230f      	movs	r3, #15
 8003f04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	785b      	ldrb	r3, [r3, #1]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d13a      	bne.n	8003fa6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	2101      	movs	r1, #1
 8003f42:	fa01 f303 	lsl.w	r3, r1, r3
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	68f9      	ldr	r1, [r7, #12]
 8003f4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d155      	bne.n	8004014 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	791b      	ldrb	r3, [r3, #4]
 8003f82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	059b      	lsls	r3, r3, #22
 8003f8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	0151      	lsls	r1, r2, #5
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	440a      	add	r2, r1
 8003f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	e036      	b.n	8004014 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	68f9      	ldr	r1, [r7, #12]
 8003fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d11a      	bne.n	8004014 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	791b      	ldrb	r3, [r3, #4]
 8003ff8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	0151      	lsls	r1, r2, #5
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	440a      	add	r2, r1
 8004006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800400a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004012:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	785b      	ldrb	r3, [r3, #1]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d161      	bne.n	8004104 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004056:	d11f      	bne.n	8004098 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	0151      	lsls	r1, r2, #5
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	440a      	add	r2, r1
 800406e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004072:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004076:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	0151      	lsls	r1, r2, #5
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	440a      	add	r2, r1
 800408e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004096:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040b8:	4013      	ands	r3, r2
 80040ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	2101      	movs	r1, #1
 80040ce:	fa01 f303 	lsl.w	r3, r1, r3
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	68f9      	ldr	r1, [r7, #12]
 80040d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040dc:	4013      	ands	r3, r2
 80040de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	0159      	lsls	r1, r3, #5
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	440b      	add	r3, r1
 80040f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fa:	4619      	mov	r1, r3
 80040fc:	4b35      	ldr	r3, [pc, #212]	; (80041d4 <USB_DeactivateEndpoint+0x1b0>)
 80040fe:	4013      	ands	r3, r2
 8004100:	600b      	str	r3, [r1, #0]
 8004102:	e060      	b.n	80041c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800411a:	d11f      	bne.n	800415c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	0151      	lsls	r1, r2, #5
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	440a      	add	r2, r1
 8004132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800413a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	0151      	lsls	r1, r2, #5
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	440a      	add	r2, r1
 8004152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800415a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	2101      	movs	r1, #1
 800416e:	fa01 f303 	lsl.w	r3, r1, r3
 8004172:	041b      	lsls	r3, r3, #16
 8004174:	43db      	mvns	r3, r3
 8004176:	68f9      	ldr	r1, [r7, #12]
 8004178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800417c:	4013      	ands	r3, r2
 800417e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	2101      	movs	r1, #1
 8004192:	fa01 f303 	lsl.w	r3, r1, r3
 8004196:	041b      	lsls	r3, r3, #16
 8004198:	43db      	mvns	r3, r3
 800419a:	68f9      	ldr	r1, [r7, #12]
 800419c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041a0:	4013      	ands	r3, r2
 80041a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	0159      	lsls	r1, r3, #5
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	440b      	add	r3, r1
 80041ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041be:	4619      	mov	r1, r3
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <USB_DeactivateEndpoint+0x1b4>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	ec337800 	.word	0xec337800
 80041d8:	eff37800 	.word	0xeff37800

080041dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	; 0x28
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	4613      	mov	r3, r2
 80041e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	785b      	ldrb	r3, [r3, #1]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	f040 815c 	bne.w	80044b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d132      	bne.n	800426c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004220:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004224:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004228:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	0151      	lsls	r1, r2, #5
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	440a      	add	r2, r1
 8004240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004248:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	0151      	lsls	r1, r2, #5
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	440a      	add	r2, r1
 8004260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004264:	0cdb      	lsrs	r3, r3, #19
 8004266:	04db      	lsls	r3, r3, #19
 8004268:	6113      	str	r3, [r2, #16]
 800426a:	e074      	b.n	8004356 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	440a      	add	r2, r1
 8004282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004286:	0cdb      	lsrs	r3, r3, #19
 8004288:	04db      	lsls	r3, r3, #19
 800428a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6999      	ldr	r1, [r3, #24]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	440b      	add	r3, r1
 80042c8:	1e59      	subs	r1, r3, #1
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80042d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80042d4:	4b9d      	ldr	r3, [pc, #628]	; (800454c <USB_EPStartXfer+0x370>)
 80042d6:	400b      	ands	r3, r1
 80042d8:	69b9      	ldr	r1, [r7, #24]
 80042da:	0148      	lsls	r0, r1, #5
 80042dc:	69f9      	ldr	r1, [r7, #28]
 80042de:	4401      	add	r1, r0
 80042e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042e4:	4313      	orrs	r3, r2
 80042e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fe:	69b9      	ldr	r1, [r7, #24]
 8004300:	0148      	lsls	r0, r1, #5
 8004302:	69f9      	ldr	r1, [r7, #28]
 8004304:	4401      	add	r1, r0
 8004306:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800430a:	4313      	orrs	r3, r2
 800430c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	791b      	ldrb	r3, [r3, #4]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d11f      	bne.n	8004356 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	0151      	lsls	r1, r2, #5
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	440a      	add	r2, r1
 800432c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004330:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004334:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	0151      	lsls	r1, r2, #5
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	440a      	add	r2, r1
 800434c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004350:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004354:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d14b      	bne.n	80043f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d009      	beq.n	8004378 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004370:	461a      	mov	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	791b      	ldrb	r3, [r3, #4]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d128      	bne.n	80043d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d110      	bne.n	80043b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	0151      	lsls	r1, r2, #5
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	440a      	add	r2, r1
 80043a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	e00f      	b.n	80043d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	0151      	lsls	r1, r2, #5
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	440a      	add	r2, r1
 80043c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	0151      	lsls	r1, r2, #5
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	440a      	add	r2, r1
 80043e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e133      	b.n	800465c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	0151      	lsls	r1, r2, #5
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	440a      	add	r2, r1
 800440a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800440e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004412:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	791b      	ldrb	r3, [r3, #4]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d015      	beq.n	8004448 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 811b 	beq.w	800465c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	2101      	movs	r1, #1
 8004438:	fa01 f303 	lsl.w	r3, r1, r3
 800443c:	69f9      	ldr	r1, [r7, #28]
 800443e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004442:	4313      	orrs	r3, r2
 8004444:	634b      	str	r3, [r1, #52]	; 0x34
 8004446:	e109      	b.n	800465c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d110      	bne.n	800447a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	0151      	lsls	r1, r2, #5
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	440a      	add	r2, r1
 800446e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004472:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	e00f      	b.n	800449a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	0151      	lsls	r1, r2, #5
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	440a      	add	r2, r1
 8004490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004498:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	6919      	ldr	r1, [r3, #16]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	b298      	uxth	r0, r3
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	4603      	mov	r3, r0
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 fade 	bl	8004a70 <USB_WritePacket>
 80044b4:	e0d2      	b.n	800465c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	0151      	lsls	r1, r2, #5
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	440a      	add	r2, r1
 80044cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d0:	0cdb      	lsrs	r3, r3, #19
 80044d2:	04db      	lsls	r3, r3, #19
 80044d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	0151      	lsls	r1, r2, #5
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	440a      	add	r2, r1
 80044ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d126      	bne.n	8004550 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004518:	69b9      	ldr	r1, [r7, #24]
 800451a:	0148      	lsls	r0, r1, #5
 800451c:	69f9      	ldr	r1, [r7, #28]
 800451e:	4401      	add	r1, r0
 8004520:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004524:	4313      	orrs	r3, r2
 8004526:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	0151      	lsls	r1, r2, #5
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	440a      	add	r2, r1
 800453e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004546:	6113      	str	r3, [r2, #16]
 8004548:	e03a      	b.n	80045c0 <USB_EPStartXfer+0x3e4>
 800454a:	bf00      	nop
 800454c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	699a      	ldr	r2, [r3, #24]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4413      	add	r3, r2
 800455a:	1e5a      	subs	r2, r3, #1
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	fbb2 f3f3 	udiv	r3, r2, r3
 8004564:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	8afa      	ldrh	r2, [r7, #22]
 800456c:	fb03 f202 	mul.w	r2, r3, r2
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	8afb      	ldrh	r3, [r7, #22]
 8004584:	04d9      	lsls	r1, r3, #19
 8004586:	4b38      	ldr	r3, [pc, #224]	; (8004668 <USB_EPStartXfer+0x48c>)
 8004588:	400b      	ands	r3, r1
 800458a:	69b9      	ldr	r1, [r7, #24]
 800458c:	0148      	lsls	r0, r1, #5
 800458e:	69f9      	ldr	r1, [r7, #28]
 8004590:	4401      	add	r1, r0
 8004592:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004596:	4313      	orrs	r3, r2
 8004598:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b0:	69b9      	ldr	r1, [r7, #24]
 80045b2:	0148      	lsls	r0, r1, #5
 80045b4:	69f9      	ldr	r1, [r7, #28]
 80045b6:	4401      	add	r1, r0
 80045b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045bc:	4313      	orrs	r3, r2
 80045be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d10d      	bne.n	80045e2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6919      	ldr	r1, [r3, #16]
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045de:	460a      	mov	r2, r1
 80045e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	791b      	ldrb	r3, [r3, #4]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d128      	bne.n	800463c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d110      	bne.n	800461c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	0151      	lsls	r1, r2, #5
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	440a      	add	r2, r1
 8004610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004614:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e00f      	b.n	800463c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	0151      	lsls	r1, r2, #5
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	440a      	add	r2, r1
 8004652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004656:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800465a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	1ff80000 	.word	0x1ff80000

0800466c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	4613      	mov	r3, r2
 8004678:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	785b      	ldrb	r3, [r3, #1]
 8004688:	2b01      	cmp	r3, #1
 800468a:	f040 80ce 	bne.w	800482a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d132      	bne.n	80046fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	0151      	lsls	r1, r2, #5
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	440a      	add	r2, r1
 80046d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	0151      	lsls	r1, r2, #5
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	440a      	add	r2, r1
 80046f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f4:	0cdb      	lsrs	r3, r3, #19
 80046f6:	04db      	lsls	r3, r3, #19
 80046f8:	6113      	str	r3, [r2, #16]
 80046fa:	e04e      	b.n	800479a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	0151      	lsls	r1, r2, #5
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	440a      	add	r2, r1
 8004712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004716:	0cdb      	lsrs	r3, r3, #19
 8004718:	04db      	lsls	r3, r3, #19
 800471a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	0151      	lsls	r1, r2, #5
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	440a      	add	r2, r1
 8004732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004736:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800473a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800473e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	699a      	ldr	r2, [r3, #24]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	429a      	cmp	r2, r3
 800474a:	d903      	bls.n	8004754 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	440a      	add	r2, r1
 800476a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004772:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800478a:	6939      	ldr	r1, [r7, #16]
 800478c:	0148      	lsls	r0, r1, #5
 800478e:	6979      	ldr	r1, [r7, #20]
 8004790:	4401      	add	r1, r0
 8004792:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004796:	4313      	orrs	r3, r2
 8004798:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d11e      	bne.n	80047de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b4:	461a      	mov	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	e097      	b.n	800490e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	0151      	lsls	r1, r2, #5
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	440a      	add	r2, r1
 80047f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 8083 	beq.w	800490e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	2101      	movs	r1, #1
 800481a:	fa01 f303 	lsl.w	r3, r1, r3
 800481e:	6979      	ldr	r1, [r7, #20]
 8004820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004824:	4313      	orrs	r3, r2
 8004826:	634b      	str	r3, [r1, #52]	; 0x34
 8004828:	e071      	b.n	800490e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	0151      	lsls	r1, r2, #5
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	440a      	add	r2, r1
 8004840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004844:	0cdb      	lsrs	r3, r3, #19
 8004846:	04db      	lsls	r3, r3, #19
 8004848:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	0151      	lsls	r1, r2, #5
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	440a      	add	r2, r1
 8004860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004864:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004868:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800486c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	440a      	add	r2, r1
 800489c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048bc:	6939      	ldr	r1, [r7, #16]
 80048be:	0148      	lsls	r0, r1, #5
 80048c0:	6979      	ldr	r1, [r7, #20]
 80048c2:	4401      	add	r1, r0
 80048c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048c8:	4313      	orrs	r3, r2
 80048ca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80048cc:	79fb      	ldrb	r3, [r7, #7]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d10d      	bne.n	80048ee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d009      	beq.n	80048ee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	6919      	ldr	r1, [r3, #16]
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ea:	460a      	mov	r2, r1
 80048ec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	0151      	lsls	r1, r2, #5
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	440a      	add	r2, r1
 8004904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004908:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800490c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	785b      	ldrb	r3, [r3, #1]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d14a      	bne.n	80049d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800494e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004952:	f040 8086 	bne.w	8004a62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	7812      	ldrb	r2, [r2, #0]
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	440a      	add	r2, r1
 8004970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004974:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004978:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	7812      	ldrb	r2, [r2, #0]
 800498e:	0151      	lsls	r1, r2, #5
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	440a      	add	r2, r1
 8004994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800499c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3301      	adds	r3, #1
 80049a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d902      	bls.n	80049b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
          break;
 80049b2:	e056      	b.n	8004a62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049cc:	d0e7      	beq.n	800499e <USB_EPStopXfer+0x82>
 80049ce:	e048      	b.n	8004a62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049e8:	d13b      	bne.n	8004a62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	7812      	ldrb	r2, [r2, #0]
 80049fe:	0151      	lsls	r1, r2, #5
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	440a      	add	r2, r1
 8004a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	7812      	ldrb	r2, [r2, #0]
 8004a22:	0151      	lsls	r1, r2, #5
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	440a      	add	r2, r1
 8004a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3301      	adds	r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d902      	bls.n	8004a48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
          break;
 8004a46:	e00c      	b.n	8004a62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a60:	d0e7      	beq.n	8004a32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	; 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	460b      	mov	r3, r1
 8004a80:	71fb      	strb	r3, [r7, #7]
 8004a82:	4613      	mov	r3, r2
 8004a84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004a8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d123      	bne.n	8004ade <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004a96:	88bb      	ldrh	r3, [r7, #4]
 8004a98:	3303      	adds	r3, #3
 8004a9a:	089b      	lsrs	r3, r3, #2
 8004a9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	e018      	b.n	8004ad6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	031a      	lsls	r2, r3, #12
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	3301      	adds	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3301      	adds	r3, #1
 8004ace:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	61bb      	str	r3, [r7, #24]
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d3e2      	bcc.n	8004aa4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3724      	adds	r7, #36	; 0x24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b08b      	sub	sp, #44	; 0x2c
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	4613      	mov	r3, r2
 8004af8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	089b      	lsrs	r3, r3, #2
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	623b      	str	r3, [r7, #32]
 8004b16:	e014      	b.n	8004b42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	3301      	adds	r3, #1
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	3301      	adds	r3, #1
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	3301      	adds	r3, #1
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	623b      	str	r3, [r7, #32]
 8004b42:	6a3a      	ldr	r2, [r7, #32]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d3e6      	bcc.n	8004b18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b4a:	8bfb      	ldrh	r3, [r7, #30]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01e      	beq.n	8004b8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f107 0310 	add.w	r3, r7, #16
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	701a      	strb	r2, [r3, #0]
      i++;
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	3301      	adds	r3, #1
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004b82:	8bfb      	ldrh	r3, [r7, #30]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b88:	8bfb      	ldrh	r3, [r7, #30]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1ea      	bne.n	8004b64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	372c      	adds	r7, #44	; 0x2c
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	785b      	ldrb	r3, [r3, #1]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d12c      	bne.n	8004c12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	db12      	blt.n	8004bf0 <USB_EPSetStall+0x54>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00f      	beq.n	8004bf0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	0151      	lsls	r1, r2, #5
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	440a      	add	r2, r1
 8004be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	0151      	lsls	r1, r2, #5
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	440a      	add	r2, r1
 8004c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	e02b      	b.n	8004c6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	db12      	blt.n	8004c4a <USB_EPSetStall+0xae>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00f      	beq.n	8004c4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	0151      	lsls	r1, r2, #5
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	440a      	add	r2, r1
 8004c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	0151      	lsls	r1, r2, #5
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	440a      	add	r2, r1
 8004c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	785b      	ldrb	r3, [r3, #1]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d128      	bne.n	8004ce6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	0151      	lsls	r1, r2, #5
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	440a      	add	r2, r1
 8004caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	791b      	ldrb	r3, [r3, #4]
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d003      	beq.n	8004cc4 <USB_EPClearStall+0x4c>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	791b      	ldrb	r3, [r3, #4]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d138      	bne.n	8004d36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	0151      	lsls	r1, r2, #5
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	440a      	add	r2, r1
 8004cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	e027      	b.n	8004d36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	0151      	lsls	r1, r2, #5
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	440a      	add	r2, r1
 8004cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	791b      	ldrb	r3, [r3, #4]
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d003      	beq.n	8004d16 <USB_EPClearStall+0x9e>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	791b      	ldrb	r3, [r3, #4]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d10f      	bne.n	8004d36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004d78:	68f9      	ldr	r1, [r7, #12]
 8004d7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004daa:	f023 0303 	bic.w	r3, r3, #3
 8004dae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dbe:	f023 0302 	bic.w	r3, r3, #2
 8004dc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b085      	sub	sp, #20
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004dec:	f023 0303 	bic.w	r3, r3, #3
 8004df0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e00:	f043 0302 	orr.w	r3, r3, #2
 8004e04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	0c1b      	lsrs	r3, r3, #16
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b085      	sub	sp, #20
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	b29b      	uxth	r3, r3
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004eb2:	78fb      	ldrb	r3, [r7, #3]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b087      	sub	sp, #28
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0e:	01db      	lsls	r3, r3, #7
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f003 0301 	and.w	r3, r3, #1
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f74:	f023 0307 	bic.w	r3, r3, #7
 8004f78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	333c      	adds	r3, #60	; 0x3c
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4a26      	ldr	r2, [pc, #152]	; (8005054 <USB_EP0_OutStart+0xb8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d90a      	bls.n	8004fd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fd0:	d101      	bne.n	8004fd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e037      	b.n	8005046 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fdc:	461a      	mov	r2, r3
 8004fde:	2300      	movs	r3, #0
 8004fe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ff4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005004:	f043 0318 	orr.w	r3, r3, #24
 8005008:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005018:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800501c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800501e:	7afb      	ldrb	r3, [r7, #11]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d10f      	bne.n	8005044 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	461a      	mov	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800503e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005042:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	4f54300a 	.word	0x4f54300a

08005058 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3301      	adds	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4a13      	ldr	r2, [pc, #76]	; (80050bc <USB_CoreReset+0x64>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d901      	bls.n	8005076 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e01b      	b.n	80050ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	daf2      	bge.n	8005064 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f043 0201 	orr.w	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3301      	adds	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4a09      	ldr	r2, [pc, #36]	; (80050bc <USB_CoreReset+0x64>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d901      	bls.n	80050a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e006      	b.n	80050ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d0f0      	beq.n	800508e <USB_CoreReset+0x36>

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	00030d40 	.word	0x00030d40

080050c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80050cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80050d0:	f002 fc8a 	bl	80079e8 <USBD_static_malloc>
 80050d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d109      	bne.n	80050f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	32b0      	adds	r2, #176	; 0xb0
 80050e6:	2100      	movs	r1, #0
 80050e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80050ec:	2302      	movs	r3, #2
 80050ee:	e0d4      	b.n	800529a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80050f0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80050f4:	2100      	movs	r1, #0
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f002 fce4 	bl	8007ac4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	32b0      	adds	r2, #176	; 0xb0
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	32b0      	adds	r2, #176	; 0xb0
 8005116:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	7c1b      	ldrb	r3, [r3, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d138      	bne.n	800519a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005128:	4b5e      	ldr	r3, [pc, #376]	; (80052a4 <USBD_CDC_Init+0x1e4>)
 800512a:	7819      	ldrb	r1, [r3, #0]
 800512c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005130:	2202      	movs	r2, #2
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f002 fb35 	bl	80077a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005138:	4b5a      	ldr	r3, [pc, #360]	; (80052a4 <USBD_CDC_Init+0x1e4>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	f003 020f 	and.w	r2, r3, #15
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	3324      	adds	r3, #36	; 0x24
 800514e:	2201      	movs	r2, #1
 8005150:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005152:	4b55      	ldr	r3, [pc, #340]	; (80052a8 <USBD_CDC_Init+0x1e8>)
 8005154:	7819      	ldrb	r1, [r3, #0]
 8005156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800515a:	2202      	movs	r2, #2
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f002 fb20 	bl	80077a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005162:	4b51      	ldr	r3, [pc, #324]	; (80052a8 <USBD_CDC_Init+0x1e8>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	f003 020f 	and.w	r2, r3, #15
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800517a:	2201      	movs	r2, #1
 800517c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800517e:	4b4b      	ldr	r3, [pc, #300]	; (80052ac <USBD_CDC_Init+0x1ec>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	f003 020f 	and.w	r2, r3, #15
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	3326      	adds	r3, #38	; 0x26
 8005194:	2210      	movs	r2, #16
 8005196:	801a      	strh	r2, [r3, #0]
 8005198:	e035      	b.n	8005206 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800519a:	4b42      	ldr	r3, [pc, #264]	; (80052a4 <USBD_CDC_Init+0x1e4>)
 800519c:	7819      	ldrb	r1, [r3, #0]
 800519e:	2340      	movs	r3, #64	; 0x40
 80051a0:	2202      	movs	r2, #2
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f002 fafd 	bl	80077a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80051a8:	4b3e      	ldr	r3, [pc, #248]	; (80052a4 <USBD_CDC_Init+0x1e4>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	f003 020f 	and.w	r2, r3, #15
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	3324      	adds	r3, #36	; 0x24
 80051be:	2201      	movs	r2, #1
 80051c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80051c2:	4b39      	ldr	r3, [pc, #228]	; (80052a8 <USBD_CDC_Init+0x1e8>)
 80051c4:	7819      	ldrb	r1, [r3, #0]
 80051c6:	2340      	movs	r3, #64	; 0x40
 80051c8:	2202      	movs	r2, #2
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f002 fae9 	bl	80077a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80051d0:	4b35      	ldr	r3, [pc, #212]	; (80052a8 <USBD_CDC_Init+0x1e8>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	f003 020f 	and.w	r2, r3, #15
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051e8:	2201      	movs	r2, #1
 80051ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80051ec:	4b2f      	ldr	r3, [pc, #188]	; (80052ac <USBD_CDC_Init+0x1ec>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	f003 020f 	and.w	r2, r3, #15
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	3326      	adds	r3, #38	; 0x26
 8005202:	2210      	movs	r2, #16
 8005204:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005206:	4b29      	ldr	r3, [pc, #164]	; (80052ac <USBD_CDC_Init+0x1ec>)
 8005208:	7819      	ldrb	r1, [r3, #0]
 800520a:	2308      	movs	r3, #8
 800520c:	2203      	movs	r2, #3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f002 fac7 	bl	80077a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005214:	4b25      	ldr	r3, [pc, #148]	; (80052ac <USBD_CDC_Init+0x1ec>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	f003 020f 	and.w	r2, r3, #15
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	3324      	adds	r3, #36	; 0x24
 800522a:	2201      	movs	r2, #1
 800522c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	33b0      	adds	r3, #176	; 0xb0
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005264:	2302      	movs	r3, #2
 8005266:	e018      	b.n	800529a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	7c1b      	ldrb	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005270:	4b0d      	ldr	r3, [pc, #52]	; (80052a8 <USBD_CDC_Init+0x1e8>)
 8005272:	7819      	ldrb	r1, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800527a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f002 fb7e 	bl	8007980 <USBD_LL_PrepareReceive>
 8005284:	e008      	b.n	8005298 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005286:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <USBD_CDC_Init+0x1e8>)
 8005288:	7819      	ldrb	r1, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005290:	2340      	movs	r3, #64	; 0x40
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f002 fb74 	bl	8007980 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	200000fb 	.word	0x200000fb
 80052a8:	200000fc 	.word	0x200000fc
 80052ac:	200000fd 	.word	0x200000fd

080052b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	460b      	mov	r3, r1
 80052ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80052bc:	4b3a      	ldr	r3, [pc, #232]	; (80053a8 <USBD_CDC_DeInit+0xf8>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f002 fa93 	bl	80077ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80052c8:	4b37      	ldr	r3, [pc, #220]	; (80053a8 <USBD_CDC_DeInit+0xf8>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	f003 020f 	and.w	r2, r3, #15
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	3324      	adds	r3, #36	; 0x24
 80052de:	2200      	movs	r2, #0
 80052e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80052e2:	4b32      	ldr	r3, [pc, #200]	; (80053ac <USBD_CDC_DeInit+0xfc>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	4619      	mov	r1, r3
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f002 fa80 	bl	80077ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80052ee:	4b2f      	ldr	r3, [pc, #188]	; (80053ac <USBD_CDC_DeInit+0xfc>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	f003 020f 	and.w	r2, r3, #15
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005306:	2200      	movs	r2, #0
 8005308:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800530a:	4b29      	ldr	r3, [pc, #164]	; (80053b0 <USBD_CDC_DeInit+0x100>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f002 fa6c 	bl	80077ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005316:	4b26      	ldr	r3, [pc, #152]	; (80053b0 <USBD_CDC_DeInit+0x100>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	f003 020f 	and.w	r2, r3, #15
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	3324      	adds	r3, #36	; 0x24
 800532c:	2200      	movs	r2, #0
 800532e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005330:	4b1f      	ldr	r3, [pc, #124]	; (80053b0 <USBD_CDC_DeInit+0x100>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	f003 020f 	and.w	r2, r3, #15
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	3326      	adds	r3, #38	; 0x26
 8005346:	2200      	movs	r2, #0
 8005348:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	32b0      	adds	r2, #176	; 0xb0
 8005354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01f      	beq.n	800539c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	33b0      	adds	r3, #176	; 0xb0
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	32b0      	adds	r2, #176	; 0xb0
 800537a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800537e:	4618      	mov	r0, r3
 8005380:	f002 fb40 	bl	8007a04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	32b0      	adds	r2, #176	; 0xb0
 800538e:	2100      	movs	r1, #0
 8005390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	200000fb 	.word	0x200000fb
 80053ac:	200000fc 	.word	0x200000fc
 80053b0:	200000fd 	.word	0x200000fd

080053b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	32b0      	adds	r2, #176	; 0xb0
 80053c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e0bf      	b.n	8005564 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d050      	beq.n	8005492 <USBD_CDC_Setup+0xde>
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	f040 80af 	bne.w	8005554 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	88db      	ldrh	r3, [r3, #6]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d03a      	beq.n	8005474 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	b25b      	sxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	da1b      	bge.n	8005440 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	33b0      	adds	r3, #176	; 0xb0
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800541e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	88d2      	ldrh	r2, [r2, #6]
 8005424:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	88db      	ldrh	r3, [r3, #6]
 800542a:	2b07      	cmp	r3, #7
 800542c:	bf28      	it	cs
 800542e:	2307      	movcs	r3, #7
 8005430:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	89fa      	ldrh	r2, [r7, #14]
 8005436:	4619      	mov	r1, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 fd89 	bl	8006f50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800543e:	e090      	b.n	8005562 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	785a      	ldrb	r2, [r3, #1]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	88db      	ldrh	r3, [r3, #6]
 800544e:	2b3f      	cmp	r3, #63	; 0x3f
 8005450:	d803      	bhi.n	800545a <USBD_CDC_Setup+0xa6>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	88db      	ldrh	r3, [r3, #6]
 8005456:	b2da      	uxtb	r2, r3
 8005458:	e000      	b.n	800545c <USBD_CDC_Setup+0xa8>
 800545a:	2240      	movs	r2, #64	; 0x40
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005462:	6939      	ldr	r1, [r7, #16]
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800546a:	461a      	mov	r2, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f001 fd9b 	bl	8006fa8 <USBD_CtlPrepareRx>
      break;
 8005472:	e076      	b.n	8005562 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	33b0      	adds	r3, #176	; 0xb0
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	7850      	ldrb	r0, [r2, #1]
 800548a:	2200      	movs	r2, #0
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	4798      	blx	r3
      break;
 8005490:	e067      	b.n	8005562 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b0b      	cmp	r3, #11
 8005498:	d851      	bhi.n	800553e <USBD_CDC_Setup+0x18a>
 800549a:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <USBD_CDC_Setup+0xec>)
 800549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a0:	080054d1 	.word	0x080054d1
 80054a4:	0800554d 	.word	0x0800554d
 80054a8:	0800553f 	.word	0x0800553f
 80054ac:	0800553f 	.word	0x0800553f
 80054b0:	0800553f 	.word	0x0800553f
 80054b4:	0800553f 	.word	0x0800553f
 80054b8:	0800553f 	.word	0x0800553f
 80054bc:	0800553f 	.word	0x0800553f
 80054c0:	0800553f 	.word	0x0800553f
 80054c4:	0800553f 	.word	0x0800553f
 80054c8:	080054fb 	.word	0x080054fb
 80054cc:	08005525 	.word	0x08005525
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d107      	bne.n	80054ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80054dc:	f107 030a 	add.w	r3, r7, #10
 80054e0:	2202      	movs	r2, #2
 80054e2:	4619      	mov	r1, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f001 fd33 	bl	8006f50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054ea:	e032      	b.n	8005552 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80054ec:	6839      	ldr	r1, [r7, #0]
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f001 fcbd 	bl	8006e6e <USBD_CtlError>
            ret = USBD_FAIL;
 80054f4:	2303      	movs	r3, #3
 80054f6:	75fb      	strb	r3, [r7, #23]
          break;
 80054f8:	e02b      	b.n	8005552 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b03      	cmp	r3, #3
 8005504:	d107      	bne.n	8005516 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005506:	f107 030d 	add.w	r3, r7, #13
 800550a:	2201      	movs	r2, #1
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 fd1e 	bl	8006f50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005514:	e01d      	b.n	8005552 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005516:	6839      	ldr	r1, [r7, #0]
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f001 fca8 	bl	8006e6e <USBD_CtlError>
            ret = USBD_FAIL;
 800551e:	2303      	movs	r3, #3
 8005520:	75fb      	strb	r3, [r7, #23]
          break;
 8005522:	e016      	b.n	8005552 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b03      	cmp	r3, #3
 800552e:	d00f      	beq.n	8005550 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005530:	6839      	ldr	r1, [r7, #0]
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f001 fc9b 	bl	8006e6e <USBD_CtlError>
            ret = USBD_FAIL;
 8005538:	2303      	movs	r3, #3
 800553a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800553c:	e008      	b.n	8005550 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800553e:	6839      	ldr	r1, [r7, #0]
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f001 fc94 	bl	8006e6e <USBD_CtlError>
          ret = USBD_FAIL;
 8005546:	2303      	movs	r3, #3
 8005548:	75fb      	strb	r3, [r7, #23]
          break;
 800554a:	e002      	b.n	8005552 <USBD_CDC_Setup+0x19e>
          break;
 800554c:	bf00      	nop
 800554e:	e008      	b.n	8005562 <USBD_CDC_Setup+0x1ae>
          break;
 8005550:	bf00      	nop
      }
      break;
 8005552:	e006      	b.n	8005562 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005554:	6839      	ldr	r1, [r7, #0]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f001 fc89 	bl	8006e6e <USBD_CtlError>
      ret = USBD_FAIL;
 800555c:	2303      	movs	r3, #3
 800555e:	75fb      	strb	r3, [r7, #23]
      break;
 8005560:	bf00      	nop
  }

  return (uint8_t)ret;
 8005562:	7dfb      	ldrb	r3, [r7, #23]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800557e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	32b0      	adds	r2, #176	; 0xb0
 800558a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005592:	2303      	movs	r3, #3
 8005594:	e065      	b.n	8005662 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	32b0      	adds	r2, #176	; 0xb0
 80055a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	f003 020f 	and.w	r2, r3, #15
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	3318      	adds	r3, #24
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d02f      	beq.n	8005620 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80055c0:	78fb      	ldrb	r3, [r7, #3]
 80055c2:	f003 020f 	and.w	r2, r3, #15
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	3318      	adds	r3, #24
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	f003 010f 	and.w	r1, r3, #15
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	460b      	mov	r3, r1
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	440b      	add	r3, r1
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4403      	add	r3, r0
 80055e8:	3348      	adds	r3, #72	; 0x48
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d112      	bne.n	8005620 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80055fa:	78fb      	ldrb	r3, [r7, #3]
 80055fc:	f003 020f 	and.w	r2, r3, #15
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	440b      	add	r3, r1
 800560c:	3318      	adds	r3, #24
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005612:	78f9      	ldrb	r1, [r7, #3]
 8005614:	2300      	movs	r3, #0
 8005616:	2200      	movs	r2, #0
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f002 f990 	bl	800793e <USBD_LL_Transmit>
 800561e:	e01f      	b.n	8005660 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2200      	movs	r2, #0
 8005624:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	33b0      	adds	r3, #176	; 0xb0
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d010      	beq.n	8005660 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	33b0      	adds	r3, #176	; 0xb0
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800565c:	78fa      	ldrb	r2, [r7, #3]
 800565e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	32b0      	adds	r2, #176	; 0xb0
 8005680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005684:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	32b0      	adds	r2, #176	; 0xb0
 8005690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005698:	2303      	movs	r3, #3
 800569a:	e01a      	b.n	80056d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f002 f98e 	bl	80079c2 <USBD_LL_GetRxDataSize>
 80056a6:	4602      	mov	r2, r0
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	33b0      	adds	r3, #176	; 0xb0
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80056cc:	4611      	mov	r1, r2
 80056ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	32b0      	adds	r2, #176	; 0xb0
 80056ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e025      	b.n	8005748 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	33b0      	adds	r3, #176	; 0xb0
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01a      	beq.n	8005746 <USBD_CDC_EP0_RxReady+0x6c>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005716:	2bff      	cmp	r3, #255	; 0xff
 8005718:	d015      	beq.n	8005746 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	33b0      	adds	r3, #176	; 0xb0
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005732:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800573a:	b292      	uxth	r2, r2
 800573c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	22ff      	movs	r2, #255	; 0xff
 8005742:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005758:	2182      	movs	r1, #130	; 0x82
 800575a:	4818      	ldr	r0, [pc, #96]	; (80057bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800575c:	f000 fd4f 	bl	80061fe <USBD_GetEpDesc>
 8005760:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005762:	2101      	movs	r1, #1
 8005764:	4815      	ldr	r0, [pc, #84]	; (80057bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005766:	f000 fd4a 	bl	80061fe <USBD_GetEpDesc>
 800576a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800576c:	2181      	movs	r1, #129	; 0x81
 800576e:	4813      	ldr	r0, [pc, #76]	; (80057bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005770:	f000 fd45 	bl	80061fe <USBD_GetEpDesc>
 8005774:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2210      	movs	r2, #16
 8005780:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d006      	beq.n	8005796 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	2200      	movs	r2, #0
 800578c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005790:	711a      	strb	r2, [r3, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d006      	beq.n	80057aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057a4:	711a      	strb	r2, [r3, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2243      	movs	r2, #67	; 0x43
 80057ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80057b0:	4b02      	ldr	r3, [pc, #8]	; (80057bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	200000b8 	.word	0x200000b8

080057c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80057c8:	2182      	movs	r1, #130	; 0x82
 80057ca:	4818      	ldr	r0, [pc, #96]	; (800582c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80057cc:	f000 fd17 	bl	80061fe <USBD_GetEpDesc>
 80057d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80057d2:	2101      	movs	r1, #1
 80057d4:	4815      	ldr	r0, [pc, #84]	; (800582c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80057d6:	f000 fd12 	bl	80061fe <USBD_GetEpDesc>
 80057da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80057dc:	2181      	movs	r1, #129	; 0x81
 80057de:	4813      	ldr	r0, [pc, #76]	; (800582c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80057e0:	f000 fd0d 	bl	80061fe <USBD_GetEpDesc>
 80057e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	2210      	movs	r2, #16
 80057f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d006      	beq.n	8005806 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2200      	movs	r2, #0
 80057fc:	711a      	strb	r2, [r3, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f042 0202 	orr.w	r2, r2, #2
 8005804:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d006      	beq.n	800581a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	711a      	strb	r2, [r3, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f042 0202 	orr.w	r2, r2, #2
 8005818:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2243      	movs	r2, #67	; 0x43
 800581e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005820:	4b02      	ldr	r3, [pc, #8]	; (800582c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005822:	4618      	mov	r0, r3
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	200000b8 	.word	0x200000b8

08005830 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005838:	2182      	movs	r1, #130	; 0x82
 800583a:	4818      	ldr	r0, [pc, #96]	; (800589c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800583c:	f000 fcdf 	bl	80061fe <USBD_GetEpDesc>
 8005840:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005842:	2101      	movs	r1, #1
 8005844:	4815      	ldr	r0, [pc, #84]	; (800589c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005846:	f000 fcda 	bl	80061fe <USBD_GetEpDesc>
 800584a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800584c:	2181      	movs	r1, #129	; 0x81
 800584e:	4813      	ldr	r0, [pc, #76]	; (800589c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005850:	f000 fcd5 	bl	80061fe <USBD_GetEpDesc>
 8005854:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2210      	movs	r2, #16
 8005860:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d006      	beq.n	8005876 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	2200      	movs	r2, #0
 800586c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005870:	711a      	strb	r2, [r3, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d006      	beq.n	800588a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005884:	711a      	strb	r2, [r3, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2243      	movs	r2, #67	; 0x43
 800588e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005890:	4b02      	ldr	r3, [pc, #8]	; (800589c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005892:	4618      	mov	r0, r3
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	200000b8 	.word	0x200000b8

080058a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	220a      	movs	r2, #10
 80058ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80058ae:	4b03      	ldr	r3, [pc, #12]	; (80058bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	20000074 	.word	0x20000074

080058c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e009      	b.n	80058e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	33b0      	adds	r3, #176	; 0xb0
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	32b0      	adds	r2, #176	; 0xb0
 800590a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800590e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005916:	2303      	movs	r3, #3
 8005918:	e008      	b.n	800592c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	371c      	adds	r7, #28
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	32b0      	adds	r2, #176	; 0xb0
 800594c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005950:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005958:	2303      	movs	r3, #3
 800595a:	e004      	b.n	8005966 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	32b0      	adds	r2, #176	; 0xb0
 8005986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	32b0      	adds	r2, #176	; 0xb0
 800599a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e025      	b.n	80059f2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d11f      	bne.n	80059f0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80059b8:	4b10      	ldr	r3, [pc, #64]	; (80059fc <USBD_CDC_TransmitPacket+0x88>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	f003 020f 	and.w	r2, r3, #15
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4403      	add	r3, r0
 80059d2:	3318      	adds	r3, #24
 80059d4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80059d6:	4b09      	ldr	r3, [pc, #36]	; (80059fc <USBD_CDC_TransmitPacket+0x88>)
 80059d8:	7819      	ldrb	r1, [r3, #0]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f001 ffa9 	bl	800793e <USBD_LL_Transmit>

    ret = USBD_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	200000fb 	.word	0x200000fb

08005a00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	32b0      	adds	r2, #176	; 0xb0
 8005a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a16:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	32b0      	adds	r2, #176	; 0xb0
 8005a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e018      	b.n	8005a60 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	7c1b      	ldrb	r3, [r3, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10a      	bne.n	8005a4c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a36:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <USBD_CDC_ReceivePacket+0x68>)
 8005a38:	7819      	ldrb	r1, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f001 ff9b 	bl	8007980 <USBD_LL_PrepareReceive>
 8005a4a:	e008      	b.n	8005a5e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a4c:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <USBD_CDC_ReceivePacket+0x68>)
 8005a4e:	7819      	ldrb	r1, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a56:	2340      	movs	r3, #64	; 0x40
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 ff91 	bl	8007980 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	200000fc 	.word	0x200000fc

08005a6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	4613      	mov	r3, r2
 8005a78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e01f      	b.n	8005ac4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	79fa      	ldrb	r2, [r7, #7]
 8005ab6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f001 fe0b 	bl	80076d4 <USBD_LL_Init>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e025      	b.n	8005b30 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	32ae      	adds	r2, #174	; 0xae
 8005af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00f      	beq.n	8005b20 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	32ae      	adds	r2, #174	; 0xae
 8005b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	f107 020e 	add.w	r2, r7, #14
 8005b14:	4610      	mov	r0, r2
 8005b16:	4798      	blx	r3
 8005b18:	4602      	mov	r2, r0
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f001 fe13 	bl	800776c <USBD_LL_Start>
 8005b46:	4603      	mov	r3, r0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b58:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	460b      	mov	r3, r1
 8005b70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d009      	beq.n	8005b94 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	78fa      	ldrb	r2, [r7, #3]
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	4798      	blx	r3
 8005b90:	4603      	mov	r3, r0
 8005b92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	78fa      	ldrb	r2, [r7, #3]
 8005bb8:	4611      	mov	r1, r2
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4798      	blx	r3
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005be2:	6839      	ldr	r1, [r7, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f001 f908 	bl	8006dfa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c06:	f003 031f 	and.w	r3, r3, #31
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d01a      	beq.n	8005c44 <USBD_LL_SetupStage+0x72>
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d822      	bhi.n	8005c58 <USBD_LL_SetupStage+0x86>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <USBD_LL_SetupStage+0x4a>
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d00a      	beq.n	8005c30 <USBD_LL_SetupStage+0x5e>
 8005c1a:	e01d      	b.n	8005c58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c22:	4619      	mov	r1, r3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fb5f 	bl	80062e8 <USBD_StdDevReq>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2e:	e020      	b.n	8005c72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fbc7 	bl	80063cc <USBD_StdItfReq>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	73fb      	strb	r3, [r7, #15]
      break;
 8005c42:	e016      	b.n	8005c72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fc29 	bl	80064a4 <USBD_StdEPReq>
 8005c52:	4603      	mov	r3, r0
 8005c54:	73fb      	strb	r3, [r7, #15]
      break;
 8005c56:	e00c      	b.n	8005c72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f001 fde0 	bl	800782c <USBD_LL_StallEP>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c70:	bf00      	nop
  }

  return ret;
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	460b      	mov	r3, r1
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005c8e:	7afb      	ldrb	r3, [r7, #11]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d16e      	bne.n	8005d72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	f040 8098 	bne.w	8005dd8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d913      	bls.n	8005cdc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	1ad2      	subs	r2, r2, r3
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	bf28      	it	cs
 8005cce:	4613      	movcs	r3, r2
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f001 f984 	bl	8006fe2 <USBD_CtlContinueRx>
 8005cda:	e07d      	b.n	8005dd8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d014      	beq.n	8005d14 <USBD_LL_DataOutStage+0x98>
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d81d      	bhi.n	8005d2a <USBD_LL_DataOutStage+0xae>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <USBD_LL_DataOutStage+0x7c>
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d003      	beq.n	8005cfe <USBD_LL_DataOutStage+0x82>
 8005cf6:	e018      	b.n	8005d2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	75bb      	strb	r3, [r7, #22]
            break;
 8005cfc:	e018      	b.n	8005d30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	4619      	mov	r1, r3
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 fa5e 	bl	80061ca <USBD_CoreFindIF>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	75bb      	strb	r3, [r7, #22]
            break;
 8005d12:	e00d      	b.n	8005d30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 fa60 	bl	80061e4 <USBD_CoreFindEP>
 8005d24:	4603      	mov	r3, r0
 8005d26:	75bb      	strb	r3, [r7, #22]
            break;
 8005d28:	e002      	b.n	8005d30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	75bb      	strb	r3, [r7, #22]
            break;
 8005d2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005d30:	7dbb      	ldrb	r3, [r7, #22]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d119      	bne.n	8005d6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d113      	bne.n	8005d6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005d42:	7dba      	ldrb	r2, [r7, #22]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	32ae      	adds	r2, #174	; 0xae
 8005d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00b      	beq.n	8005d6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005d52:	7dba      	ldrb	r2, [r7, #22]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005d5a:	7dba      	ldrb	r2, [r7, #22]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	32ae      	adds	r2, #174	; 0xae
 8005d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f001 f94a 	bl	8007004 <USBD_CtlSendStatus>
 8005d70:	e032      	b.n	8005dd8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005d72:	7afb      	ldrb	r3, [r7, #11]
 8005d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 fa31 	bl	80061e4 <USBD_CoreFindEP>
 8005d82:	4603      	mov	r3, r0
 8005d84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d86:	7dbb      	ldrb	r3, [r7, #22]
 8005d88:	2bff      	cmp	r3, #255	; 0xff
 8005d8a:	d025      	beq.n	8005dd8 <USBD_LL_DataOutStage+0x15c>
 8005d8c:	7dbb      	ldrb	r3, [r7, #22]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d122      	bne.n	8005dd8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d117      	bne.n	8005dce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005d9e:	7dba      	ldrb	r2, [r7, #22]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	32ae      	adds	r2, #174	; 0xae
 8005da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00f      	beq.n	8005dce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005dae:	7dba      	ldrb	r2, [r7, #22]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005db6:	7dba      	ldrb	r2, [r7, #22]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	32ae      	adds	r2, #174	; 0xae
 8005dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	7afa      	ldrb	r2, [r7, #11]
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	4798      	blx	r3
 8005dca:	4603      	mov	r3, r0
 8005dcc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
 8005dd6:	e000      	b.n	8005dda <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b086      	sub	sp, #24
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	460b      	mov	r3, r1
 8005dec:	607a      	str	r2, [r7, #4]
 8005dee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005df0:	7afb      	ldrb	r3, [r7, #11]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d16f      	bne.n	8005ed6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3314      	adds	r3, #20
 8005dfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d15a      	bne.n	8005ebc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d914      	bls.n	8005e3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	1ad2      	subs	r2, r2, r3
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	461a      	mov	r2, r3
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f001 f8ac 	bl	8006f86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	2200      	movs	r2, #0
 8005e32:	2100      	movs	r1, #0
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f001 fda3 	bl	8007980 <USBD_LL_PrepareReceive>
 8005e3a:	e03f      	b.n	8005ebc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d11c      	bne.n	8005e82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d316      	bcc.n	8005e82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d20f      	bcs.n	8005e82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e62:	2200      	movs	r2, #0
 8005e64:	2100      	movs	r1, #0
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f001 f88d 	bl	8006f86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e74:	2300      	movs	r3, #0
 8005e76:	2200      	movs	r2, #0
 8005e78:	2100      	movs	r1, #0
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f001 fd80 	bl	8007980 <USBD_LL_PrepareReceive>
 8005e80:	e01c      	b.n	8005ebc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d10f      	bne.n	8005eae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005eae:	2180      	movs	r1, #128	; 0x80
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f001 fcbb 	bl	800782c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f001 f8b7 	bl	800702a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d03a      	beq.n	8005f3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f7ff fe42 	bl	8005b50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005ed4:	e032      	b.n	8005f3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005ed6:	7afb      	ldrb	r3, [r7, #11]
 8005ed8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	4619      	mov	r1, r3
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 f97f 	bl	80061e4 <USBD_CoreFindEP>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
 8005eec:	2bff      	cmp	r3, #255	; 0xff
 8005eee:	d025      	beq.n	8005f3c <USBD_LL_DataInStage+0x15a>
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d122      	bne.n	8005f3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d11c      	bne.n	8005f3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005f02:	7dfa      	ldrb	r2, [r7, #23]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	32ae      	adds	r2, #174	; 0xae
 8005f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d014      	beq.n	8005f3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005f12:	7dfa      	ldrb	r2, [r7, #23]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005f1a:	7dfa      	ldrb	r2, [r7, #23]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	32ae      	adds	r2, #174	; 0xae
 8005f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	7afa      	ldrb	r2, [r7, #11]
 8005f28:	4611      	mov	r1, r2
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	4798      	blx	r3
 8005f2e:	4603      	mov	r3, r0
 8005f30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005f32:	7dbb      	ldrb	r3, [r7, #22]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005f38:	7dbb      	ldrb	r3, [r7, #22]
 8005f3a:	e000      	b.n	8005f3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d014      	beq.n	8005fac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00e      	beq.n	8005fac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	6852      	ldr	r2, [r2, #4]
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	4798      	blx	r3
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fac:	2340      	movs	r3, #64	; 0x40
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 fbf5 	bl	80077a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2240      	movs	r2, #64	; 0x40
 8005fc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fc8:	2340      	movs	r3, #64	; 0x40
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2180      	movs	r1, #128	; 0x80
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f001 fbe7 	bl	80077a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2240      	movs	r2, #64	; 0x40
 8005fde:	621a      	str	r2, [r3, #32]

  return ret;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	78fa      	ldrb	r2, [r7, #3]
 8005ffa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006018:	b2da      	uxtb	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2204      	movs	r2, #4
 8006024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b04      	cmp	r3, #4
 8006048:	d106      	bne.n	8006058 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006050:	b2da      	uxtb	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b03      	cmp	r3, #3
 8006078:	d110      	bne.n	800609c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00b      	beq.n	800609c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d005      	beq.n	800609c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	460b      	mov	r3, r1
 80060b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	32ae      	adds	r2, #174	; 0xae
 80060bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e01c      	b.n	8006102 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d115      	bne.n	8006100 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	32ae      	adds	r2, #174	; 0xae
 80060de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00b      	beq.n	8006100 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	32ae      	adds	r2, #174	; 0xae
 80060f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	78fa      	ldrb	r2, [r7, #3]
 80060fa:	4611      	mov	r1, r2
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	460b      	mov	r3, r1
 8006114:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	32ae      	adds	r2, #174	; 0xae
 8006120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006128:	2303      	movs	r3, #3
 800612a:	e01c      	b.n	8006166 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b03      	cmp	r3, #3
 8006136:	d115      	bne.n	8006164 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	32ae      	adds	r2, #174	; 0xae
 8006142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	32ae      	adds	r2, #174	; 0xae
 8006156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	78fa      	ldrb	r2, [r7, #3]
 800615e:	4611      	mov	r1, r2
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00e      	beq.n	80061c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6852      	ldr	r2, [r2, #4]
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	4611      	mov	r1, r2
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80061bc:	2303      	movs	r3, #3
 80061be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	460b      	mov	r3, r1
 80061d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80061d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80061d8:	4618      	mov	r0, r3
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80061f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b086      	sub	sp, #24
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006212:	2300      	movs	r3, #0
 8006214:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	885b      	ldrh	r3, [r3, #2]
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	b29b      	uxth	r3, r3
 8006222:	429a      	cmp	r2, r3
 8006224:	d920      	bls.n	8006268 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800622e:	e013      	b.n	8006258 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006230:	f107 030a 	add.w	r3, r7, #10
 8006234:	4619      	mov	r1, r3
 8006236:	6978      	ldr	r0, [r7, #20]
 8006238:	f000 f81b 	bl	8006272 <USBD_GetNextDesc>
 800623c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	2b05      	cmp	r3, #5
 8006244:	d108      	bne.n	8006258 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	789b      	ldrb	r3, [r3, #2]
 800624e:	78fa      	ldrb	r2, [r7, #3]
 8006250:	429a      	cmp	r2, r3
 8006252:	d008      	beq.n	8006266 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006254:	2300      	movs	r3, #0
 8006256:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	885b      	ldrh	r3, [r3, #2]
 800625c:	b29a      	uxth	r2, r3
 800625e:	897b      	ldrh	r3, [r7, #10]
 8006260:	429a      	cmp	r2, r3
 8006262:	d8e5      	bhi.n	8006230 <USBD_GetEpDesc+0x32>
 8006264:	e000      	b.n	8006268 <USBD_GetEpDesc+0x6a>
          break;
 8006266:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006268:	693b      	ldr	r3, [r7, #16]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006272:	b480      	push	{r7}
 8006274:	b085      	sub	sp, #20
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	881a      	ldrh	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	b29b      	uxth	r3, r3
 800628a:	4413      	add	r3, r2
 800628c:	b29a      	uxth	r2, r3
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4413      	add	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800629e:	68fb      	ldr	r3, [r7, #12]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	3301      	adds	r3, #1
 80062c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80062ca:	8a3b      	ldrh	r3, [r7, #16]
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	b21a      	sxth	r2, r3
 80062d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	b21b      	sxth	r3, r3
 80062d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80062da:	89fb      	ldrh	r3, [r7, #14]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062fe:	2b40      	cmp	r3, #64	; 0x40
 8006300:	d005      	beq.n	800630e <USBD_StdDevReq+0x26>
 8006302:	2b40      	cmp	r3, #64	; 0x40
 8006304:	d857      	bhi.n	80063b6 <USBD_StdDevReq+0xce>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00f      	beq.n	800632a <USBD_StdDevReq+0x42>
 800630a:	2b20      	cmp	r3, #32
 800630c:	d153      	bne.n	80063b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	32ae      	adds	r2, #174	; 0xae
 8006318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	4798      	blx	r3
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]
      break;
 8006328:	e04a      	b.n	80063c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	785b      	ldrb	r3, [r3, #1]
 800632e:	2b09      	cmp	r3, #9
 8006330:	d83b      	bhi.n	80063aa <USBD_StdDevReq+0xc2>
 8006332:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <USBD_StdDevReq+0x50>)
 8006334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006338:	0800638d 	.word	0x0800638d
 800633c:	080063a1 	.word	0x080063a1
 8006340:	080063ab 	.word	0x080063ab
 8006344:	08006397 	.word	0x08006397
 8006348:	080063ab 	.word	0x080063ab
 800634c:	0800636b 	.word	0x0800636b
 8006350:	08006361 	.word	0x08006361
 8006354:	080063ab 	.word	0x080063ab
 8006358:	08006383 	.word	0x08006383
 800635c:	08006375 	.word	0x08006375
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fa3c 	bl	80067e0 <USBD_GetDescriptor>
          break;
 8006368:	e024      	b.n	80063b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fba1 	bl	8006ab4 <USBD_SetAddress>
          break;
 8006372:	e01f      	b.n	80063b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006374:	6839      	ldr	r1, [r7, #0]
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fbe0 	bl	8006b3c <USBD_SetConfig>
 800637c:	4603      	mov	r3, r0
 800637e:	73fb      	strb	r3, [r7, #15]
          break;
 8006380:	e018      	b.n	80063b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fc83 	bl	8006c90 <USBD_GetConfig>
          break;
 800638a:	e013      	b.n	80063b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fcb4 	bl	8006cfc <USBD_GetStatus>
          break;
 8006394:	e00e      	b.n	80063b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fce3 	bl	8006d64 <USBD_SetFeature>
          break;
 800639e:	e009      	b.n	80063b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fd07 	bl	8006db6 <USBD_ClrFeature>
          break;
 80063a8:	e004      	b.n	80063b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fd5e 	bl	8006e6e <USBD_CtlError>
          break;
 80063b2:	bf00      	nop
      }
      break;
 80063b4:	e004      	b.n	80063c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fd58 	bl	8006e6e <USBD_CtlError>
      break;
 80063be:	bf00      	nop
  }

  return ret;
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop

080063cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d005      	beq.n	80063f2 <USBD_StdItfReq+0x26>
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d852      	bhi.n	8006490 <USBD_StdItfReq+0xc4>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <USBD_StdItfReq+0x26>
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d14e      	bne.n	8006490 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d840      	bhi.n	8006482 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	889b      	ldrh	r3, [r3, #4]
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b01      	cmp	r3, #1
 8006408:	d836      	bhi.n	8006478 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	889b      	ldrh	r3, [r3, #4]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fed9 	bl	80061ca <USBD_CoreFindIF>
 8006418:	4603      	mov	r3, r0
 800641a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	2bff      	cmp	r3, #255	; 0xff
 8006420:	d01d      	beq.n	800645e <USBD_StdItfReq+0x92>
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d11a      	bne.n	800645e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006428:	7bba      	ldrb	r2, [r7, #14]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	32ae      	adds	r2, #174	; 0xae
 800642e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00f      	beq.n	8006458 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006438:	7bba      	ldrb	r2, [r7, #14]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006440:	7bba      	ldrb	r2, [r7, #14]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	32ae      	adds	r2, #174	; 0xae
 8006446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	4798      	blx	r3
 8006452:	4603      	mov	r3, r0
 8006454:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006456:	e004      	b.n	8006462 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006458:	2303      	movs	r3, #3
 800645a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800645c:	e001      	b.n	8006462 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800645e:	2303      	movs	r3, #3
 8006460:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	88db      	ldrh	r3, [r3, #6]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d110      	bne.n	800648c <USBD_StdItfReq+0xc0>
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10d      	bne.n	800648c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fdc7 	bl	8007004 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006476:	e009      	b.n	800648c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fcf7 	bl	8006e6e <USBD_CtlError>
          break;
 8006480:	e004      	b.n	800648c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006482:	6839      	ldr	r1, [r7, #0]
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fcf2 	bl	8006e6e <USBD_CtlError>
          break;
 800648a:	e000      	b.n	800648e <USBD_StdItfReq+0xc2>
          break;
 800648c:	bf00      	nop
      }
      break;
 800648e:	e004      	b.n	800649a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fceb 	bl	8006e6e <USBD_CtlError>
      break;
 8006498:	bf00      	nop
  }

  return ret;
 800649a:	7bfb      	ldrb	r3, [r7, #15]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	889b      	ldrh	r3, [r3, #4]
 80064b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064c0:	2b40      	cmp	r3, #64	; 0x40
 80064c2:	d007      	beq.n	80064d4 <USBD_StdEPReq+0x30>
 80064c4:	2b40      	cmp	r3, #64	; 0x40
 80064c6:	f200 817f 	bhi.w	80067c8 <USBD_StdEPReq+0x324>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d02a      	beq.n	8006524 <USBD_StdEPReq+0x80>
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	f040 817a 	bne.w	80067c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff fe83 	bl	80061e4 <USBD_CoreFindEP>
 80064de:	4603      	mov	r3, r0
 80064e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064e2:	7b7b      	ldrb	r3, [r7, #13]
 80064e4:	2bff      	cmp	r3, #255	; 0xff
 80064e6:	f000 8174 	beq.w	80067d2 <USBD_StdEPReq+0x32e>
 80064ea:	7b7b      	ldrb	r3, [r7, #13]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f040 8170 	bne.w	80067d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80064f2:	7b7a      	ldrb	r2, [r7, #13]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80064fa:	7b7a      	ldrb	r2, [r7, #13]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	32ae      	adds	r2, #174	; 0xae
 8006500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 8163 	beq.w	80067d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800650c:	7b7a      	ldrb	r2, [r7, #13]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	32ae      	adds	r2, #174	; 0xae
 8006512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	4798      	blx	r3
 800651e:	4603      	mov	r3, r0
 8006520:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006522:	e156      	b.n	80067d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	785b      	ldrb	r3, [r3, #1]
 8006528:	2b03      	cmp	r3, #3
 800652a:	d008      	beq.n	800653e <USBD_StdEPReq+0x9a>
 800652c:	2b03      	cmp	r3, #3
 800652e:	f300 8145 	bgt.w	80067bc <USBD_StdEPReq+0x318>
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 809b 	beq.w	800666e <USBD_StdEPReq+0x1ca>
 8006538:	2b01      	cmp	r3, #1
 800653a:	d03c      	beq.n	80065b6 <USBD_StdEPReq+0x112>
 800653c:	e13e      	b.n	80067bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d002      	beq.n	8006550 <USBD_StdEPReq+0xac>
 800654a:	2b03      	cmp	r3, #3
 800654c:	d016      	beq.n	800657c <USBD_StdEPReq+0xd8>
 800654e:	e02c      	b.n	80065aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006550:	7bbb      	ldrb	r3, [r7, #14]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00d      	beq.n	8006572 <USBD_StdEPReq+0xce>
 8006556:	7bbb      	ldrb	r3, [r7, #14]
 8006558:	2b80      	cmp	r3, #128	; 0x80
 800655a:	d00a      	beq.n	8006572 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 f963 	bl	800782c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006566:	2180      	movs	r1, #128	; 0x80
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 f95f 	bl	800782c <USBD_LL_StallEP>
 800656e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006570:	e020      	b.n	80065b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fc7a 	bl	8006e6e <USBD_CtlError>
              break;
 800657a:	e01b      	b.n	80065b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	885b      	ldrh	r3, [r3, #2]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10e      	bne.n	80065a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <USBD_StdEPReq+0xfe>
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	2b80      	cmp	r3, #128	; 0x80
 800658e:	d008      	beq.n	80065a2 <USBD_StdEPReq+0xfe>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	88db      	ldrh	r3, [r3, #6]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d104      	bne.n	80065a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006598:	7bbb      	ldrb	r3, [r7, #14]
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 f945 	bl	800782c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fd2e 	bl	8007004 <USBD_CtlSendStatus>

              break;
 80065a8:	e004      	b.n	80065b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fc5e 	bl	8006e6e <USBD_CtlError>
              break;
 80065b2:	bf00      	nop
          }
          break;
 80065b4:	e107      	b.n	80067c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d002      	beq.n	80065c8 <USBD_StdEPReq+0x124>
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d016      	beq.n	80065f4 <USBD_StdEPReq+0x150>
 80065c6:	e04b      	b.n	8006660 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065c8:	7bbb      	ldrb	r3, [r7, #14]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00d      	beq.n	80065ea <USBD_StdEPReq+0x146>
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	2b80      	cmp	r3, #128	; 0x80
 80065d2:	d00a      	beq.n	80065ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065d4:	7bbb      	ldrb	r3, [r7, #14]
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 f927 	bl	800782c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065de:	2180      	movs	r1, #128	; 0x80
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 f923 	bl	800782c <USBD_LL_StallEP>
 80065e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065e8:	e040      	b.n	800666c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fc3e 	bl	8006e6e <USBD_CtlError>
              break;
 80065f2:	e03b      	b.n	800666c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	885b      	ldrh	r3, [r3, #2]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d136      	bne.n	800666a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80065fc:	7bbb      	ldrb	r3, [r7, #14]
 80065fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006602:	2b00      	cmp	r3, #0
 8006604:	d004      	beq.n	8006610 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006606:	7bbb      	ldrb	r3, [r7, #14]
 8006608:	4619      	mov	r1, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f001 f92d 	bl	800786a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fcf7 	bl	8007004 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7ff fde2 	bl	80061e4 <USBD_CoreFindEP>
 8006620:	4603      	mov	r3, r0
 8006622:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006624:	7b7b      	ldrb	r3, [r7, #13]
 8006626:	2bff      	cmp	r3, #255	; 0xff
 8006628:	d01f      	beq.n	800666a <USBD_StdEPReq+0x1c6>
 800662a:	7b7b      	ldrb	r3, [r7, #13]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d11c      	bne.n	800666a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006630:	7b7a      	ldrb	r2, [r7, #13]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006638:	7b7a      	ldrb	r2, [r7, #13]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	32ae      	adds	r2, #174	; 0xae
 800663e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d010      	beq.n	800666a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006648:	7b7a      	ldrb	r2, [r7, #13]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	32ae      	adds	r2, #174	; 0xae
 800664e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
 800665a:	4603      	mov	r3, r0
 800665c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800665e:	e004      	b.n	800666a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fc03 	bl	8006e6e <USBD_CtlError>
              break;
 8006668:	e000      	b.n	800666c <USBD_StdEPReq+0x1c8>
              break;
 800666a:	bf00      	nop
          }
          break;
 800666c:	e0ab      	b.n	80067c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d002      	beq.n	8006680 <USBD_StdEPReq+0x1dc>
 800667a:	2b03      	cmp	r3, #3
 800667c:	d032      	beq.n	80066e4 <USBD_StdEPReq+0x240>
 800667e:	e097      	b.n	80067b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006680:	7bbb      	ldrb	r3, [r7, #14]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d007      	beq.n	8006696 <USBD_StdEPReq+0x1f2>
 8006686:	7bbb      	ldrb	r3, [r7, #14]
 8006688:	2b80      	cmp	r3, #128	; 0x80
 800668a:	d004      	beq.n	8006696 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fbed 	bl	8006e6e <USBD_CtlError>
                break;
 8006694:	e091      	b.n	80067ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006696:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800669a:	2b00      	cmp	r3, #0
 800669c:	da0b      	bge.n	80066b6 <USBD_StdEPReq+0x212>
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	3310      	adds	r3, #16
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	4413      	add	r3, r2
 80066b2:	3304      	adds	r3, #4
 80066b4:	e00b      	b.n	80066ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066bc:	4613      	mov	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	4413      	add	r3, r2
 80066cc:	3304      	adds	r3, #4
 80066ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2202      	movs	r2, #2
 80066da:	4619      	mov	r1, r3
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fc37 	bl	8006f50 <USBD_CtlSendData>
              break;
 80066e2:	e06a      	b.n	80067ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	da11      	bge.n	8006710 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066ec:	7bbb      	ldrb	r3, [r7, #14]
 80066ee:	f003 020f 	and.w	r2, r3, #15
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	3324      	adds	r3, #36	; 0x24
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d117      	bne.n	8006736 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fbb0 	bl	8006e6e <USBD_CtlError>
                  break;
 800670e:	e054      	b.n	80067ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	f003 020f 	and.w	r2, r3, #15
 8006716:	6879      	ldr	r1, [r7, #4]
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d104      	bne.n	8006736 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fb9d 	bl	8006e6e <USBD_CtlError>
                  break;
 8006734:	e041      	b.n	80067ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800673a:	2b00      	cmp	r3, #0
 800673c:	da0b      	bge.n	8006756 <USBD_StdEPReq+0x2b2>
 800673e:	7bbb      	ldrb	r3, [r7, #14]
 8006740:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006744:	4613      	mov	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	3310      	adds	r3, #16
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	4413      	add	r3, r2
 8006752:	3304      	adds	r3, #4
 8006754:	e00b      	b.n	800676e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006756:	7bbb      	ldrb	r3, [r7, #14]
 8006758:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	4413      	add	r3, r2
 800676c:	3304      	adds	r3, #4
 800676e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006770:	7bbb      	ldrb	r3, [r7, #14]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <USBD_StdEPReq+0x2d8>
 8006776:	7bbb      	ldrb	r3, [r7, #14]
 8006778:	2b80      	cmp	r3, #128	; 0x80
 800677a:	d103      	bne.n	8006784 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	e00e      	b.n	80067a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006784:	7bbb      	ldrb	r3, [r7, #14]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 f88d 	bl	80078a8 <USBD_LL_IsStallEP>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2201      	movs	r2, #1
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	e002      	b.n	80067a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2202      	movs	r2, #2
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fbd1 	bl	8006f50 <USBD_CtlSendData>
              break;
 80067ae:	e004      	b.n	80067ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fb5b 	bl	8006e6e <USBD_CtlError>
              break;
 80067b8:	bf00      	nop
          }
          break;
 80067ba:	e004      	b.n	80067c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fb55 	bl	8006e6e <USBD_CtlError>
          break;
 80067c4:	bf00      	nop
      }
      break;
 80067c6:	e005      	b.n	80067d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fb4f 	bl	8006e6e <USBD_CtlError>
      break;
 80067d0:	e000      	b.n	80067d4 <USBD_StdEPReq+0x330>
      break;
 80067d2:	bf00      	nop
  }

  return ret;
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	885b      	ldrh	r3, [r3, #2]
 80067fa:	0a1b      	lsrs	r3, r3, #8
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	3b01      	subs	r3, #1
 8006800:	2b06      	cmp	r3, #6
 8006802:	f200 8128 	bhi.w	8006a56 <USBD_GetDescriptor+0x276>
 8006806:	a201      	add	r2, pc, #4	; (adr r2, 800680c <USBD_GetDescriptor+0x2c>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	08006829 	.word	0x08006829
 8006810:	08006841 	.word	0x08006841
 8006814:	08006881 	.word	0x08006881
 8006818:	08006a57 	.word	0x08006a57
 800681c:	08006a57 	.word	0x08006a57
 8006820:	080069f7 	.word	0x080069f7
 8006824:	08006a23 	.word	0x08006a23
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	7c12      	ldrb	r2, [r2, #16]
 8006834:	f107 0108 	add.w	r1, r7, #8
 8006838:	4610      	mov	r0, r2
 800683a:	4798      	blx	r3
 800683c:	60f8      	str	r0, [r7, #12]
      break;
 800683e:	e112      	b.n	8006a66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	7c1b      	ldrb	r3, [r3, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10d      	bne.n	8006864 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	f107 0208 	add.w	r2, r7, #8
 8006854:	4610      	mov	r0, r2
 8006856:	4798      	blx	r3
 8006858:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3301      	adds	r3, #1
 800685e:	2202      	movs	r2, #2
 8006860:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006862:	e100      	b.n	8006a66 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	f107 0208 	add.w	r2, r7, #8
 8006870:	4610      	mov	r0, r2
 8006872:	4798      	blx	r3
 8006874:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3301      	adds	r3, #1
 800687a:	2202      	movs	r2, #2
 800687c:	701a      	strb	r2, [r3, #0]
      break;
 800687e:	e0f2      	b.n	8006a66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	885b      	ldrh	r3, [r3, #2]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b05      	cmp	r3, #5
 8006888:	f200 80ac 	bhi.w	80069e4 <USBD_GetDescriptor+0x204>
 800688c:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <USBD_GetDescriptor+0xb4>)
 800688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006892:	bf00      	nop
 8006894:	080068ad 	.word	0x080068ad
 8006898:	080068e1 	.word	0x080068e1
 800689c:	08006915 	.word	0x08006915
 80068a0:	08006949 	.word	0x08006949
 80068a4:	0800697d 	.word	0x0800697d
 80068a8:	080069b1 	.word	0x080069b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00b      	beq.n	80068d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	7c12      	ldrb	r2, [r2, #16]
 80068c4:	f107 0108 	add.w	r1, r7, #8
 80068c8:	4610      	mov	r0, r2
 80068ca:	4798      	blx	r3
 80068cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068ce:	e091      	b.n	80069f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 facb 	bl	8006e6e <USBD_CtlError>
            err++;
 80068d8:	7afb      	ldrb	r3, [r7, #11]
 80068da:	3301      	adds	r3, #1
 80068dc:	72fb      	strb	r3, [r7, #11]
          break;
 80068de:	e089      	b.n	80069f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00b      	beq.n	8006904 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	7c12      	ldrb	r2, [r2, #16]
 80068f8:	f107 0108 	add.w	r1, r7, #8
 80068fc:	4610      	mov	r0, r2
 80068fe:	4798      	blx	r3
 8006900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006902:	e077      	b.n	80069f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fab1 	bl	8006e6e <USBD_CtlError>
            err++;
 800690c:	7afb      	ldrb	r3, [r7, #11]
 800690e:	3301      	adds	r3, #1
 8006910:	72fb      	strb	r3, [r7, #11]
          break;
 8006912:	e06f      	b.n	80069f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00b      	beq.n	8006938 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	7c12      	ldrb	r2, [r2, #16]
 800692c:	f107 0108 	add.w	r1, r7, #8
 8006930:	4610      	mov	r0, r2
 8006932:	4798      	blx	r3
 8006934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006936:	e05d      	b.n	80069f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fa97 	bl	8006e6e <USBD_CtlError>
            err++;
 8006940:	7afb      	ldrb	r3, [r7, #11]
 8006942:	3301      	adds	r3, #1
 8006944:	72fb      	strb	r3, [r7, #11]
          break;
 8006946:	e055      	b.n	80069f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00b      	beq.n	800696c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	7c12      	ldrb	r2, [r2, #16]
 8006960:	f107 0108 	add.w	r1, r7, #8
 8006964:	4610      	mov	r0, r2
 8006966:	4798      	blx	r3
 8006968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800696a:	e043      	b.n	80069f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa7d 	bl	8006e6e <USBD_CtlError>
            err++;
 8006974:	7afb      	ldrb	r3, [r7, #11]
 8006976:	3301      	adds	r3, #1
 8006978:	72fb      	strb	r3, [r7, #11]
          break;
 800697a:	e03b      	b.n	80069f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	7c12      	ldrb	r2, [r2, #16]
 8006994:	f107 0108 	add.w	r1, r7, #8
 8006998:	4610      	mov	r0, r2
 800699a:	4798      	blx	r3
 800699c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800699e:	e029      	b.n	80069f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fa63 	bl	8006e6e <USBD_CtlError>
            err++;
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	3301      	adds	r3, #1
 80069ac:	72fb      	strb	r3, [r7, #11]
          break;
 80069ae:	e021      	b.n	80069f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00b      	beq.n	80069d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	7c12      	ldrb	r2, [r2, #16]
 80069c8:	f107 0108 	add.w	r1, r7, #8
 80069cc:	4610      	mov	r0, r2
 80069ce:	4798      	blx	r3
 80069d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069d2:	e00f      	b.n	80069f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa49 	bl	8006e6e <USBD_CtlError>
            err++;
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	3301      	adds	r3, #1
 80069e0:	72fb      	strb	r3, [r7, #11]
          break;
 80069e2:	e007      	b.n	80069f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa41 	bl	8006e6e <USBD_CtlError>
          err++;
 80069ec:	7afb      	ldrb	r3, [r7, #11]
 80069ee:	3301      	adds	r3, #1
 80069f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80069f2:	bf00      	nop
      }
      break;
 80069f4:	e037      	b.n	8006a66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	7c1b      	ldrb	r3, [r3, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d109      	bne.n	8006a12 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a06:	f107 0208 	add.w	r2, r7, #8
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	4798      	blx	r3
 8006a0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a10:	e029      	b.n	8006a66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fa2a 	bl	8006e6e <USBD_CtlError>
        err++;
 8006a1a:	7afb      	ldrb	r3, [r7, #11]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	72fb      	strb	r3, [r7, #11]
      break;
 8006a20:	e021      	b.n	8006a66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	7c1b      	ldrb	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10d      	bne.n	8006a46 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	f107 0208 	add.w	r2, r7, #8
 8006a36:	4610      	mov	r0, r2
 8006a38:	4798      	blx	r3
 8006a3a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	2207      	movs	r2, #7
 8006a42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a44:	e00f      	b.n	8006a66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fa10 	bl	8006e6e <USBD_CtlError>
        err++;
 8006a4e:	7afb      	ldrb	r3, [r7, #11]
 8006a50:	3301      	adds	r3, #1
 8006a52:	72fb      	strb	r3, [r7, #11]
      break;
 8006a54:	e007      	b.n	8006a66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fa08 	bl	8006e6e <USBD_CtlError>
      err++;
 8006a5e:	7afb      	ldrb	r3, [r7, #11]
 8006a60:	3301      	adds	r3, #1
 8006a62:	72fb      	strb	r3, [r7, #11]
      break;
 8006a64:	bf00      	nop
  }

  if (err != 0U)
 8006a66:	7afb      	ldrb	r3, [r7, #11]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d11e      	bne.n	8006aaa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	88db      	ldrh	r3, [r3, #6]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d016      	beq.n	8006aa2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006a74:	893b      	ldrh	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00e      	beq.n	8006a98 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	88da      	ldrh	r2, [r3, #6]
 8006a7e:	893b      	ldrh	r3, [r7, #8]
 8006a80:	4293      	cmp	r3, r2
 8006a82:	bf28      	it	cs
 8006a84:	4613      	movcs	r3, r2
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a8a:	893b      	ldrh	r3, [r7, #8]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	68f9      	ldr	r1, [r7, #12]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fa5d 	bl	8006f50 <USBD_CtlSendData>
 8006a96:	e009      	b.n	8006aac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f9e7 	bl	8006e6e <USBD_CtlError>
 8006aa0:	e004      	b.n	8006aac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 faae 	bl	8007004 <USBD_CtlSendStatus>
 8006aa8:	e000      	b.n	8006aac <USBD_GetDescriptor+0x2cc>
    return;
 8006aaa:	bf00      	nop
  }
}
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop

08006ab4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	889b      	ldrh	r3, [r3, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d131      	bne.n	8006b2a <USBD_SetAddress+0x76>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	88db      	ldrh	r3, [r3, #6]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d12d      	bne.n	8006b2a <USBD_SetAddress+0x76>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	885b      	ldrh	r3, [r3, #2]
 8006ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad4:	d829      	bhi.n	8006b2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	885b      	ldrh	r3, [r3, #2]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d104      	bne.n	8006af8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f9bc 	bl	8006e6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006af6:	e01d      	b.n	8006b34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	7bfa      	ldrb	r2, [r7, #15]
 8006afc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fefb 	bl	8007900 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fa7a 	bl	8007004 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b1e:	e009      	b.n	8006b34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b28:	e004      	b.n	8006b34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f99e 	bl	8006e6e <USBD_CtlError>
  }
}
 8006b32:	bf00      	nop
 8006b34:	bf00      	nop
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	885b      	ldrh	r3, [r3, #2]
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	4b4e      	ldr	r3, [pc, #312]	; (8006c8c <USBD_SetConfig+0x150>)
 8006b52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b54:	4b4d      	ldr	r3, [pc, #308]	; (8006c8c <USBD_SetConfig+0x150>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d905      	bls.n	8006b68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f985 	bl	8006e6e <USBD_CtlError>
    return USBD_FAIL;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e08c      	b.n	8006c82 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d002      	beq.n	8006b7a <USBD_SetConfig+0x3e>
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d029      	beq.n	8006bcc <USBD_SetConfig+0x90>
 8006b78:	e075      	b.n	8006c66 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006b7a:	4b44      	ldr	r3, [pc, #272]	; (8006c8c <USBD_SetConfig+0x150>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d020      	beq.n	8006bc4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006b82:	4b42      	ldr	r3, [pc, #264]	; (8006c8c <USBD_SetConfig+0x150>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b8c:	4b3f      	ldr	r3, [pc, #252]	; (8006c8c <USBD_SetConfig+0x150>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	4619      	mov	r1, r3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7fe ffe7 	bl	8005b66 <USBD_SetClassConfig>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d008      	beq.n	8006bb4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f962 	bl	8006e6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2202      	movs	r2, #2
 8006bae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006bb2:	e065      	b.n	8006c80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fa25 	bl	8007004 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2203      	movs	r2, #3
 8006bbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006bc2:	e05d      	b.n	8006c80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fa1d 	bl	8007004 <USBD_CtlSendStatus>
      break;
 8006bca:	e059      	b.n	8006c80 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006bcc:	4b2f      	ldr	r3, [pc, #188]	; (8006c8c <USBD_SetConfig+0x150>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d112      	bne.n	8006bfa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006bdc:	4b2b      	ldr	r3, [pc, #172]	; (8006c8c <USBD_SetConfig+0x150>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006be6:	4b29      	ldr	r3, [pc, #164]	; (8006c8c <USBD_SetConfig+0x150>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7fe ffd6 	bl	8005b9e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fa06 	bl	8007004 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006bf8:	e042      	b.n	8006c80 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006bfa:	4b24      	ldr	r3, [pc, #144]	; (8006c8c <USBD_SetConfig+0x150>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d02a      	beq.n	8006c5e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f7fe ffc4 	bl	8005b9e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c16:	4b1d      	ldr	r3, [pc, #116]	; (8006c8c <USBD_SetConfig+0x150>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c20:	4b1a      	ldr	r3, [pc, #104]	; (8006c8c <USBD_SetConfig+0x150>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fe ff9d 	bl	8005b66 <USBD_SetClassConfig>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00f      	beq.n	8006c56 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f918 	bl	8006e6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fe ffa9 	bl	8005b9e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c54:	e014      	b.n	8006c80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f9d4 	bl	8007004 <USBD_CtlSendStatus>
      break;
 8006c5c:	e010      	b.n	8006c80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f9d0 	bl	8007004 <USBD_CtlSendStatus>
      break;
 8006c64:	e00c      	b.n	8006c80 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f900 	bl	8006e6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c6e:	4b07      	ldr	r3, [pc, #28]	; (8006c8c <USBD_SetConfig+0x150>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7fe ff92 	bl	8005b9e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c7e:	bf00      	nop
  }

  return ret;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000234 	.word	0x20000234

08006c90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	88db      	ldrh	r3, [r3, #6]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d004      	beq.n	8006cac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f8e2 	bl	8006e6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006caa:	e023      	b.n	8006cf4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	dc02      	bgt.n	8006cbe <USBD_GetConfig+0x2e>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	dc03      	bgt.n	8006cc4 <USBD_GetConfig+0x34>
 8006cbc:	e015      	b.n	8006cea <USBD_GetConfig+0x5a>
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d00b      	beq.n	8006cda <USBD_GetConfig+0x4a>
 8006cc2:	e012      	b.n	8006cea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	2201      	movs	r2, #1
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f93c 	bl	8006f50 <USBD_CtlSendData>
        break;
 8006cd8:	e00c      	b.n	8006cf4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	2201      	movs	r2, #1
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f934 	bl	8006f50 <USBD_CtlSendData>
        break;
 8006ce8:	e004      	b.n	8006cf4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f8be 	bl	8006e6e <USBD_CtlError>
        break;
 8006cf2:	bf00      	nop
}
 8006cf4:	bf00      	nop
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d81e      	bhi.n	8006d52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	88db      	ldrh	r3, [r3, #6]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d004      	beq.n	8006d26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f8a5 	bl	8006e6e <USBD_CtlError>
        break;
 8006d24:	e01a      	b.n	8006d5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d005      	beq.n	8006d42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f043 0202 	orr.w	r2, r3, #2
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	330c      	adds	r3, #12
 8006d46:	2202      	movs	r2, #2
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f900 	bl	8006f50 <USBD_CtlSendData>
      break;
 8006d50:	e004      	b.n	8006d5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f88a 	bl	8006e6e <USBD_CtlError>
      break;
 8006d5a:	bf00      	nop
  }
}
 8006d5c:	bf00      	nop
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	885b      	ldrh	r3, [r3, #2]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d107      	bne.n	8006d86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f940 	bl	8007004 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006d84:	e013      	b.n	8006dae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	885b      	ldrh	r3, [r3, #2]
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d10b      	bne.n	8006da6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	889b      	ldrh	r3, [r3, #4]
 8006d92:	0a1b      	lsrs	r3, r3, #8
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f930 	bl	8007004 <USBD_CtlSendStatus>
}
 8006da4:	e003      	b.n	8006dae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f860 	bl	8006e6e <USBD_CtlError>
}
 8006dae:	bf00      	nop
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d80b      	bhi.n	8006de6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	885b      	ldrh	r3, [r3, #2]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d10c      	bne.n	8006df0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f910 	bl	8007004 <USBD_CtlSendStatus>
      }
      break;
 8006de4:	e004      	b.n	8006df0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f840 	bl	8006e6e <USBD_CtlError>
      break;
 8006dee:	e000      	b.n	8006df2 <USBD_ClrFeature+0x3c>
      break;
 8006df0:	bf00      	nop
  }
}
 8006df2:	bf00      	nop
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	781a      	ldrb	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3301      	adds	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	781a      	ldrb	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3301      	adds	r3, #1
 8006e22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f7ff fa41 	bl	80062ac <SWAPBYTE>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3301      	adds	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7ff fa34 	bl	80062ac <SWAPBYTE>
 8006e44:	4603      	mov	r3, r0
 8006e46:	461a      	mov	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3301      	adds	r3, #1
 8006e56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f7ff fa27 	bl	80062ac <SWAPBYTE>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	461a      	mov	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	80da      	strh	r2, [r3, #6]
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e78:	2180      	movs	r1, #128	; 0x80
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fcd6 	bl	800782c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e80:	2100      	movs	r1, #0
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fcd2 	bl	800782c <USBD_LL_StallEP>
}
 8006e88:	bf00      	nop
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d036      	beq.n	8006f14 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006eaa:	6938      	ldr	r0, [r7, #16]
 8006eac:	f000 f836 	bl	8006f1c <USBD_GetLen>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	7812      	ldrb	r2, [r2, #0]
 8006ec8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	2203      	movs	r2, #3
 8006ed8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	3301      	adds	r3, #1
 8006ede:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ee0:	e013      	b.n	8006f0a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	7812      	ldrb	r2, [r2, #0]
 8006eec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	613b      	str	r3, [r7, #16]
    idx++;
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	4413      	add	r3, r2
 8006f00:	2200      	movs	r2, #0
 8006f02:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	3301      	adds	r3, #1
 8006f08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1e7      	bne.n	8006ee2 <USBD_GetString+0x52>
 8006f12:	e000      	b.n	8006f16 <USBD_GetString+0x86>
    return;
 8006f14:	bf00      	nop
  }
}
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f2c:	e005      	b.n	8006f3a <USBD_GetLen+0x1e>
  {
    len++;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
 8006f30:	3301      	adds	r3, #1
 8006f32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	3301      	adds	r3, #1
 8006f38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1f5      	bne.n	8006f2e <USBD_GetLen+0x12>
  }

  return len;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	2100      	movs	r1, #0
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 fce1 	bl	800793e <USBD_LL_Transmit>

  return USBD_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	2100      	movs	r1, #0
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 fcd0 	bl	800793e <USBD_LL_Transmit>

  return USBD_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2203      	movs	r2, #3
 8006fb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 fcd4 	bl	8007980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 fcc3 	bl	8007980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2204      	movs	r2, #4
 8007010:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007014:	2300      	movs	r3, #0
 8007016:	2200      	movs	r2, #0
 8007018:	2100      	movs	r1, #0
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fc8f 	bl	800793e <USBD_LL_Transmit>

  return USBD_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b082      	sub	sp, #8
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2205      	movs	r2, #5
 8007036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800703a:	2300      	movs	r3, #0
 800703c:	2200      	movs	r2, #0
 800703e:	2100      	movs	r1, #0
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fc9d 	bl	8007980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007054:	2200      	movs	r2, #0
 8007056:	4912      	ldr	r1, [pc, #72]	; (80070a0 <MX_USB_DEVICE_Init+0x50>)
 8007058:	4812      	ldr	r0, [pc, #72]	; (80070a4 <MX_USB_DEVICE_Init+0x54>)
 800705a:	f7fe fd07 	bl	8005a6c <USBD_Init>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007064:	f7f9 fde4 	bl	8000c30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007068:	490f      	ldr	r1, [pc, #60]	; (80070a8 <MX_USB_DEVICE_Init+0x58>)
 800706a:	480e      	ldr	r0, [pc, #56]	; (80070a4 <MX_USB_DEVICE_Init+0x54>)
 800706c:	f7fe fd2e 	bl	8005acc <USBD_RegisterClass>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007076:	f7f9 fddb 	bl	8000c30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800707a:	490c      	ldr	r1, [pc, #48]	; (80070ac <MX_USB_DEVICE_Init+0x5c>)
 800707c:	4809      	ldr	r0, [pc, #36]	; (80070a4 <MX_USB_DEVICE_Init+0x54>)
 800707e:	f7fe fc1f 	bl	80058c0 <USBD_CDC_RegisterInterface>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007088:	f7f9 fdd2 	bl	8000c30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800708c:	4805      	ldr	r0, [pc, #20]	; (80070a4 <MX_USB_DEVICE_Init+0x54>)
 800708e:	f7fe fd53 	bl	8005b38 <USBD_Start>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007098:	f7f9 fdca 	bl	8000c30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800709c:	bf00      	nop
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	20000114 	.word	0x20000114
 80070a4:	20000238 	.word	0x20000238
 80070a8:	20000080 	.word	0x20000080
 80070ac:	20000100 	.word	0x20000100

080070b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80070b4:	2200      	movs	r2, #0
 80070b6:	4905      	ldr	r1, [pc, #20]	; (80070cc <CDC_Init_FS+0x1c>)
 80070b8:	4805      	ldr	r0, [pc, #20]	; (80070d0 <CDC_Init_FS+0x20>)
 80070ba:	f7fe fc1b 	bl	80058f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80070be:	4905      	ldr	r1, [pc, #20]	; (80070d4 <CDC_Init_FS+0x24>)
 80070c0:	4803      	ldr	r0, [pc, #12]	; (80070d0 <CDC_Init_FS+0x20>)
 80070c2:	f7fe fc39 	bl	8005938 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80070c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20000d14 	.word	0x20000d14
 80070d0:	20000238 	.word	0x20000238
 80070d4:	20000514 	.word	0x20000514

080070d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80070d8:	b480      	push	{r7}
 80070da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80070dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80070de:	4618      	mov	r0, r3
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	6039      	str	r1, [r7, #0]
 80070f2:	71fb      	strb	r3, [r7, #7]
 80070f4:	4613      	mov	r3, r2
 80070f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	2b23      	cmp	r3, #35	; 0x23
 80070fc:	d84a      	bhi.n	8007194 <CDC_Control_FS+0xac>
 80070fe:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <CDC_Control_FS+0x1c>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	08007195 	.word	0x08007195
 8007108:	08007195 	.word	0x08007195
 800710c:	08007195 	.word	0x08007195
 8007110:	08007195 	.word	0x08007195
 8007114:	08007195 	.word	0x08007195
 8007118:	08007195 	.word	0x08007195
 800711c:	08007195 	.word	0x08007195
 8007120:	08007195 	.word	0x08007195
 8007124:	08007195 	.word	0x08007195
 8007128:	08007195 	.word	0x08007195
 800712c:	08007195 	.word	0x08007195
 8007130:	08007195 	.word	0x08007195
 8007134:	08007195 	.word	0x08007195
 8007138:	08007195 	.word	0x08007195
 800713c:	08007195 	.word	0x08007195
 8007140:	08007195 	.word	0x08007195
 8007144:	08007195 	.word	0x08007195
 8007148:	08007195 	.word	0x08007195
 800714c:	08007195 	.word	0x08007195
 8007150:	08007195 	.word	0x08007195
 8007154:	08007195 	.word	0x08007195
 8007158:	08007195 	.word	0x08007195
 800715c:	08007195 	.word	0x08007195
 8007160:	08007195 	.word	0x08007195
 8007164:	08007195 	.word	0x08007195
 8007168:	08007195 	.word	0x08007195
 800716c:	08007195 	.word	0x08007195
 8007170:	08007195 	.word	0x08007195
 8007174:	08007195 	.word	0x08007195
 8007178:	08007195 	.word	0x08007195
 800717c:	08007195 	.word	0x08007195
 8007180:	08007195 	.word	0x08007195
 8007184:	08007195 	.word	0x08007195
 8007188:	08007195 	.word	0x08007195
 800718c:	08007195 	.word	0x08007195
 8007190:	08007195 	.word	0x08007195
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007194:	bf00      	nop
  }

  return (USBD_OK);
 8007196:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	4805      	ldr	r0, [pc, #20]	; (80071c8 <CDC_Receive_FS+0x24>)
 80071b2:	f7fe fbc1 	bl	8005938 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80071b6:	4804      	ldr	r0, [pc, #16]	; (80071c8 <CDC_Receive_FS+0x24>)
 80071b8:	f7fe fc22 	bl	8005a00 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80071bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000238 	.word	0x20000238

080071cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80071dc:	4b0d      	ldr	r3, [pc, #52]	; (8007214 <CDC_Transmit_FS+0x48>)
 80071de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e00b      	b.n	800720a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80071f2:	887b      	ldrh	r3, [r7, #2]
 80071f4:	461a      	mov	r2, r3
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	4806      	ldr	r0, [pc, #24]	; (8007214 <CDC_Transmit_FS+0x48>)
 80071fa:	f7fe fb7b 	bl	80058f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80071fe:	4805      	ldr	r0, [pc, #20]	; (8007214 <CDC_Transmit_FS+0x48>)
 8007200:	f7fe fbb8 	bl	8005974 <USBD_CDC_TransmitPacket>
 8007204:	4603      	mov	r3, r0
 8007206:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007208:	7bfb      	ldrb	r3, [r7, #15]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20000238 	.word	0x20000238

08007218 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	4613      	mov	r3, r2
 8007224:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800722a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800722e:	4618      	mov	r0, r3
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
	...

0800723c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	4603      	mov	r3, r0
 8007244:	6039      	str	r1, [r7, #0]
 8007246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2212      	movs	r2, #18
 800724c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800724e:	4b03      	ldr	r3, [pc, #12]	; (800725c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007250:	4618      	mov	r0, r3
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	20000130 	.word	0x20000130

08007260 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	4603      	mov	r3, r0
 8007268:	6039      	str	r1, [r7, #0]
 800726a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2204      	movs	r2, #4
 8007270:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007272:	4b03      	ldr	r3, [pc, #12]	; (8007280 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	20000144 	.word	0x20000144

08007284 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	4603      	mov	r3, r0
 800728c:	6039      	str	r1, [r7, #0]
 800728e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d105      	bne.n	80072a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	4907      	ldr	r1, [pc, #28]	; (80072b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800729a:	4808      	ldr	r0, [pc, #32]	; (80072bc <USBD_FS_ProductStrDescriptor+0x38>)
 800729c:	f7ff fdf8 	bl	8006e90 <USBD_GetString>
 80072a0:	e004      	b.n	80072ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	4904      	ldr	r1, [pc, #16]	; (80072b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80072a6:	4805      	ldr	r0, [pc, #20]	; (80072bc <USBD_FS_ProductStrDescriptor+0x38>)
 80072a8:	f7ff fdf2 	bl	8006e90 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20001514 	.word	0x20001514
 80072bc:	08008464 	.word	0x08008464

080072c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	6039      	str	r1, [r7, #0]
 80072ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	4904      	ldr	r1, [pc, #16]	; (80072e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80072d0:	4804      	ldr	r0, [pc, #16]	; (80072e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80072d2:	f7ff fddd 	bl	8006e90 <USBD_GetString>
  return USBD_StrDesc;
 80072d6:	4b02      	ldr	r3, [pc, #8]	; (80072e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20001514 	.word	0x20001514
 80072e4:	0800847c 	.word	0x0800847c

080072e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4603      	mov	r3, r0
 80072f0:	6039      	str	r1, [r7, #0]
 80072f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	221a      	movs	r2, #26
 80072f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80072fa:	f000 f843 	bl	8007384 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80072fe:	4b02      	ldr	r3, [pc, #8]	; (8007308 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	20000148 	.word	0x20000148

0800730c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	6039      	str	r1, [r7, #0]
 8007316:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d105      	bne.n	800732a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	4907      	ldr	r1, [pc, #28]	; (8007340 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007322:	4808      	ldr	r0, [pc, #32]	; (8007344 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007324:	f7ff fdb4 	bl	8006e90 <USBD_GetString>
 8007328:	e004      	b.n	8007334 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	4904      	ldr	r1, [pc, #16]	; (8007340 <USBD_FS_ConfigStrDescriptor+0x34>)
 800732e:	4805      	ldr	r0, [pc, #20]	; (8007344 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007330:	f7ff fdae 	bl	8006e90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007334:	4b02      	ldr	r3, [pc, #8]	; (8007340 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20001514 	.word	0x20001514
 8007344:	08008490 	.word	0x08008490

08007348 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	6039      	str	r1, [r7, #0]
 8007352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d105      	bne.n	8007366 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	4907      	ldr	r1, [pc, #28]	; (800737c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800735e:	4808      	ldr	r0, [pc, #32]	; (8007380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007360:	f7ff fd96 	bl	8006e90 <USBD_GetString>
 8007364:	e004      	b.n	8007370 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	4904      	ldr	r1, [pc, #16]	; (800737c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800736a:	4805      	ldr	r0, [pc, #20]	; (8007380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800736c:	f7ff fd90 	bl	8006e90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007370:	4b02      	ldr	r3, [pc, #8]	; (800737c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	20001514 	.word	0x20001514
 8007380:	0800849c 	.word	0x0800849c

08007384 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800738a:	4b0f      	ldr	r3, [pc, #60]	; (80073c8 <Get_SerialNum+0x44>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007390:	4b0e      	ldr	r3, [pc, #56]	; (80073cc <Get_SerialNum+0x48>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007396:	4b0e      	ldr	r3, [pc, #56]	; (80073d0 <Get_SerialNum+0x4c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4413      	add	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80073aa:	2208      	movs	r2, #8
 80073ac:	4909      	ldr	r1, [pc, #36]	; (80073d4 <Get_SerialNum+0x50>)
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 f814 	bl	80073dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80073b4:	2204      	movs	r2, #4
 80073b6:	4908      	ldr	r1, [pc, #32]	; (80073d8 <Get_SerialNum+0x54>)
 80073b8:	68b8      	ldr	r0, [r7, #8]
 80073ba:	f000 f80f 	bl	80073dc <IntToUnicode>
  }
}
 80073be:	bf00      	nop
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	1fff7a10 	.word	0x1fff7a10
 80073cc:	1fff7a14 	.word	0x1fff7a14
 80073d0:	1fff7a18 	.word	0x1fff7a18
 80073d4:	2000014a 	.word	0x2000014a
 80073d8:	2000015a 	.word	0x2000015a

080073dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	4613      	mov	r3, r2
 80073e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80073ee:	2300      	movs	r3, #0
 80073f0:	75fb      	strb	r3, [r7, #23]
 80073f2:	e027      	b.n	8007444 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	0f1b      	lsrs	r3, r3, #28
 80073f8:	2b09      	cmp	r3, #9
 80073fa:	d80b      	bhi.n	8007414 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	0f1b      	lsrs	r3, r3, #28
 8007400:	b2da      	uxtb	r2, r3
 8007402:	7dfb      	ldrb	r3, [r7, #23]
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	4619      	mov	r1, r3
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	440b      	add	r3, r1
 800740c:	3230      	adds	r2, #48	; 0x30
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	701a      	strb	r2, [r3, #0]
 8007412:	e00a      	b.n	800742a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	0f1b      	lsrs	r3, r3, #28
 8007418:	b2da      	uxtb	r2, r3
 800741a:	7dfb      	ldrb	r3, [r7, #23]
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	4619      	mov	r1, r3
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	440b      	add	r3, r1
 8007424:	3237      	adds	r2, #55	; 0x37
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	011b      	lsls	r3, r3, #4
 800742e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	3301      	adds	r3, #1
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	4413      	add	r3, r2
 800743a:	2200      	movs	r2, #0
 800743c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800743e:	7dfb      	ldrb	r3, [r7, #23]
 8007440:	3301      	adds	r3, #1
 8007442:	75fb      	strb	r3, [r7, #23]
 8007444:	7dfa      	ldrb	r2, [r7, #23]
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	429a      	cmp	r2, r3
 800744a:	d3d3      	bcc.n	80073f4 <IntToUnicode+0x18>
  }
}
 800744c:	bf00      	nop
 800744e:	bf00      	nop
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
	...

0800745c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08a      	sub	sp, #40	; 0x28
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007464:	f107 0314 	add.w	r3, r7, #20
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	605a      	str	r2, [r3, #4]
 800746e:	609a      	str	r2, [r3, #8]
 8007470:	60da      	str	r2, [r3, #12]
 8007472:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800747c:	d13a      	bne.n	80074f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800747e:	2300      	movs	r3, #0
 8007480:	613b      	str	r3, [r7, #16]
 8007482:	4b1e      	ldr	r3, [pc, #120]	; (80074fc <HAL_PCD_MspInit+0xa0>)
 8007484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007486:	4a1d      	ldr	r2, [pc, #116]	; (80074fc <HAL_PCD_MspInit+0xa0>)
 8007488:	f043 0301 	orr.w	r3, r3, #1
 800748c:	6313      	str	r3, [r2, #48]	; 0x30
 800748e:	4b1b      	ldr	r3, [pc, #108]	; (80074fc <HAL_PCD_MspInit+0xa0>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	613b      	str	r3, [r7, #16]
 8007498:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800749a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800749e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074a0:	2302      	movs	r3, #2
 80074a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074a4:	2300      	movs	r3, #0
 80074a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074a8:	2303      	movs	r3, #3
 80074aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80074ac:	230a      	movs	r3, #10
 80074ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074b0:	f107 0314 	add.w	r3, r7, #20
 80074b4:	4619      	mov	r1, r3
 80074b6:	4812      	ldr	r0, [pc, #72]	; (8007500 <HAL_PCD_MspInit+0xa4>)
 80074b8:	f7f9 fe58 	bl	800116c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80074bc:	4b0f      	ldr	r3, [pc, #60]	; (80074fc <HAL_PCD_MspInit+0xa0>)
 80074be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c0:	4a0e      	ldr	r2, [pc, #56]	; (80074fc <HAL_PCD_MspInit+0xa0>)
 80074c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c6:	6353      	str	r3, [r2, #52]	; 0x34
 80074c8:	2300      	movs	r3, #0
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	4b0b      	ldr	r3, [pc, #44]	; (80074fc <HAL_PCD_MspInit+0xa0>)
 80074ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d0:	4a0a      	ldr	r2, [pc, #40]	; (80074fc <HAL_PCD_MspInit+0xa0>)
 80074d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074d6:	6453      	str	r3, [r2, #68]	; 0x44
 80074d8:	4b08      	ldr	r3, [pc, #32]	; (80074fc <HAL_PCD_MspInit+0xa0>)
 80074da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80074e4:	2200      	movs	r2, #0
 80074e6:	2100      	movs	r1, #0
 80074e8:	2043      	movs	r0, #67	; 0x43
 80074ea:	f7f9 fe08 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80074ee:	2043      	movs	r0, #67	; 0x43
 80074f0:	f7f9 fe21 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80074f4:	bf00      	nop
 80074f6:	3728      	adds	r7, #40	; 0x28
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	40023800 	.word	0x40023800
 8007500:	40020000 	.word	0x40020000

08007504 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007518:	4619      	mov	r1, r3
 800751a:	4610      	mov	r0, r2
 800751c:	f7fe fb59 	bl	8005bd2 <USBD_LL_SetupStage>
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800753a:	78fa      	ldrb	r2, [r7, #3]
 800753c:	6879      	ldr	r1, [r7, #4]
 800753e:	4613      	mov	r3, r2
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	4413      	add	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	440b      	add	r3, r1
 8007548:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	4619      	mov	r1, r3
 8007552:	f7fe fb93 	bl	8005c7c <USBD_LL_DataOutStage>
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	460b      	mov	r3, r1
 8007568:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007570:	78fa      	ldrb	r2, [r7, #3]
 8007572:	6879      	ldr	r1, [r7, #4]
 8007574:	4613      	mov	r3, r2
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	334c      	adds	r3, #76	; 0x4c
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	78fb      	ldrb	r3, [r7, #3]
 8007584:	4619      	mov	r1, r3
 8007586:	f7fe fc2c 	bl	8005de2 <USBD_LL_DataInStage>
}
 800758a:	bf00      	nop
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b082      	sub	sp, #8
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe fd60 	bl	8006066 <USBD_LL_SOF>
}
 80075a6:	bf00      	nop
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b084      	sub	sp, #16
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80075b6:	2301      	movs	r3, #1
 80075b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d001      	beq.n	80075c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80075c2:	f7f9 fb35 	bl	8000c30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075cc:	7bfa      	ldrb	r2, [r7, #15]
 80075ce:	4611      	mov	r1, r2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fe fd0a 	bl	8005fea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fe fcb2 	bl	8005f46 <USBD_LL_Reset>
}
 80075e2:	bf00      	nop
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fd05 	bl	800600a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6812      	ldr	r2, [r2, #0]
 800760e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007612:	f043 0301 	orr.w	r3, r3, #1
 8007616:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d005      	beq.n	800762c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007620:	4b04      	ldr	r3, [pc, #16]	; (8007634 <HAL_PCD_SuspendCallback+0x48>)
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	4a03      	ldr	r2, [pc, #12]	; (8007634 <HAL_PCD_SuspendCallback+0x48>)
 8007626:	f043 0306 	orr.w	r3, r3, #6
 800762a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800762c:	bf00      	nop
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	e000ed00 	.word	0xe000ed00

08007638 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fcf5 	bl	8006036 <USBD_LL_Resume>
}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007666:	78fa      	ldrb	r2, [r7, #3]
 8007668:	4611      	mov	r1, r2
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fd4d 	bl	800610a <USBD_LL_IsoOUTIncomplete>
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800768a:	78fa      	ldrb	r2, [r7, #3]
 800768c:	4611      	mov	r1, r2
 800768e:	4618      	mov	r0, r3
 8007690:	f7fe fd09 	bl	80060a6 <USBD_LL_IsoINIncomplete>
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe fd5f 	bl	800616e <USBD_LL_DevConnected>
}
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe fd5c 	bl	8006184 <USBD_LL_DevDisconnected>
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d13c      	bne.n	800775e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80076e4:	4a20      	ldr	r2, [pc, #128]	; (8007768 <USBD_LL_Init+0x94>)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a1e      	ldr	r2, [pc, #120]	; (8007768 <USBD_LL_Init+0x94>)
 80076f0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076f4:	4b1c      	ldr	r3, [pc, #112]	; (8007768 <USBD_LL_Init+0x94>)
 80076f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80076fc:	4b1a      	ldr	r3, [pc, #104]	; (8007768 <USBD_LL_Init+0x94>)
 80076fe:	2204      	movs	r2, #4
 8007700:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007702:	4b19      	ldr	r3, [pc, #100]	; (8007768 <USBD_LL_Init+0x94>)
 8007704:	2202      	movs	r2, #2
 8007706:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007708:	4b17      	ldr	r3, [pc, #92]	; (8007768 <USBD_LL_Init+0x94>)
 800770a:	2200      	movs	r2, #0
 800770c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800770e:	4b16      	ldr	r3, [pc, #88]	; (8007768 <USBD_LL_Init+0x94>)
 8007710:	2202      	movs	r2, #2
 8007712:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007714:	4b14      	ldr	r3, [pc, #80]	; (8007768 <USBD_LL_Init+0x94>)
 8007716:	2200      	movs	r2, #0
 8007718:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800771a:	4b13      	ldr	r3, [pc, #76]	; (8007768 <USBD_LL_Init+0x94>)
 800771c:	2200      	movs	r2, #0
 800771e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007720:	4b11      	ldr	r3, [pc, #68]	; (8007768 <USBD_LL_Init+0x94>)
 8007722:	2200      	movs	r2, #0
 8007724:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007726:	4b10      	ldr	r3, [pc, #64]	; (8007768 <USBD_LL_Init+0x94>)
 8007728:	2200      	movs	r2, #0
 800772a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800772c:	4b0e      	ldr	r3, [pc, #56]	; (8007768 <USBD_LL_Init+0x94>)
 800772e:	2200      	movs	r2, #0
 8007730:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007732:	480d      	ldr	r0, [pc, #52]	; (8007768 <USBD_LL_Init+0x94>)
 8007734:	f7f9 fecf 	bl	80014d6 <HAL_PCD_Init>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800773e:	f7f9 fa77 	bl	8000c30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007742:	2180      	movs	r1, #128	; 0x80
 8007744:	4808      	ldr	r0, [pc, #32]	; (8007768 <USBD_LL_Init+0x94>)
 8007746:	f7fb f926 	bl	8002996 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800774a:	2240      	movs	r2, #64	; 0x40
 800774c:	2100      	movs	r1, #0
 800774e:	4806      	ldr	r0, [pc, #24]	; (8007768 <USBD_LL_Init+0x94>)
 8007750:	f7fb f8da 	bl	8002908 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007754:	2280      	movs	r2, #128	; 0x80
 8007756:	2101      	movs	r1, #1
 8007758:	4803      	ldr	r0, [pc, #12]	; (8007768 <USBD_LL_Init+0x94>)
 800775a:	f7fb f8d5 	bl	8002908 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	20001714 	.word	0x20001714

0800776c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007782:	4618      	mov	r0, r3
 8007784:	f7f9 ffc4 	bl	8001710 <HAL_PCD_Start>
 8007788:	4603      	mov	r3, r0
 800778a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	4618      	mov	r0, r3
 8007790:	f000 f942 	bl	8007a18 <USBD_Get_USB_Status>
 8007794:	4603      	mov	r3, r0
 8007796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007798:	7bbb      	ldrb	r3, [r7, #14]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	4608      	mov	r0, r1
 80077ac:	4611      	mov	r1, r2
 80077ae:	461a      	mov	r2, r3
 80077b0:	4603      	mov	r3, r0
 80077b2:	70fb      	strb	r3, [r7, #3]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70bb      	strb	r3, [r7, #2]
 80077b8:	4613      	mov	r3, r2
 80077ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077ca:	78bb      	ldrb	r3, [r7, #2]
 80077cc:	883a      	ldrh	r2, [r7, #0]
 80077ce:	78f9      	ldrb	r1, [r7, #3]
 80077d0:	f7fa fc95 	bl	80020fe <HAL_PCD_EP_Open>
 80077d4:	4603      	mov	r3, r0
 80077d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 f91c 	bl	8007a18 <USBD_Get_USB_Status>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b084      	sub	sp, #16
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	460b      	mov	r3, r1
 80077f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007808:	78fa      	ldrb	r2, [r7, #3]
 800780a:	4611      	mov	r1, r2
 800780c:	4618      	mov	r0, r3
 800780e:	f7fa fcde 	bl	80021ce <HAL_PCD_EP_Close>
 8007812:	4603      	mov	r3, r0
 8007814:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 f8fd 	bl	8007a18 <USBD_Get_USB_Status>
 800781e:	4603      	mov	r3, r0
 8007820:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007822:	7bbb      	ldrb	r3, [r7, #14]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007846:	78fa      	ldrb	r2, [r7, #3]
 8007848:	4611      	mov	r1, r2
 800784a:	4618      	mov	r0, r3
 800784c:	f7fa fdb6 	bl	80023bc <HAL_PCD_EP_SetStall>
 8007850:	4603      	mov	r3, r0
 8007852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	4618      	mov	r0, r3
 8007858:	f000 f8de 	bl	8007a18 <USBD_Get_USB_Status>
 800785c:	4603      	mov	r3, r0
 800785e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007860:	7bbb      	ldrb	r3, [r7, #14]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b084      	sub	sp, #16
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	460b      	mov	r3, r1
 8007874:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007884:	78fa      	ldrb	r2, [r7, #3]
 8007886:	4611      	mov	r1, r2
 8007888:	4618      	mov	r0, r3
 800788a:	f7fa fdfb 	bl	8002484 <HAL_PCD_EP_ClrStall>
 800788e:	4603      	mov	r3, r0
 8007890:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007892:	7bfb      	ldrb	r3, [r7, #15]
 8007894:	4618      	mov	r0, r3
 8007896:	f000 f8bf 	bl	8007a18 <USBD_Get_USB_Status>
 800789a:	4603      	mov	r3, r0
 800789c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800789e:	7bbb      	ldrb	r3, [r7, #14]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80078bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	da0b      	bge.n	80078dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078ca:	68f9      	ldr	r1, [r7, #12]
 80078cc:	4613      	mov	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	4413      	add	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	440b      	add	r3, r1
 80078d6:	333e      	adds	r3, #62	; 0x3e
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	e00b      	b.n	80078f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078e2:	68f9      	ldr	r1, [r7, #12]
 80078e4:	4613      	mov	r3, r2
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	440b      	add	r3, r1
 80078ee:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80078f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800791a:	78fa      	ldrb	r2, [r7, #3]
 800791c:	4611      	mov	r1, r2
 800791e:	4618      	mov	r0, r3
 8007920:	f7fa fbc8 	bl	80020b4 <HAL_PCD_SetAddress>
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	4618      	mov	r0, r3
 800792c:	f000 f874 	bl	8007a18 <USBD_Get_USB_Status>
 8007930:	4603      	mov	r3, r0
 8007932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007934:	7bbb      	ldrb	r3, [r7, #14]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b086      	sub	sp, #24
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	603b      	str	r3, [r7, #0]
 800794a:	460b      	mov	r3, r1
 800794c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800795c:	7af9      	ldrb	r1, [r7, #11]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	f7fa fce1 	bl	8002328 <HAL_PCD_EP_Transmit>
 8007966:	4603      	mov	r3, r0
 8007968:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	4618      	mov	r0, r3
 800796e:	f000 f853 	bl	8007a18 <USBD_Get_USB_Status>
 8007972:	4603      	mov	r3, r0
 8007974:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007976:	7dbb      	ldrb	r3, [r7, #22]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	607a      	str	r2, [r7, #4]
 800798a:	603b      	str	r3, [r7, #0]
 800798c:	460b      	mov	r3, r1
 800798e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800799e:	7af9      	ldrb	r1, [r7, #11]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	f7fa fc5d 	bl	8002262 <HAL_PCD_EP_Receive>
 80079a8:	4603      	mov	r3, r0
 80079aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 f832 	bl	8007a18 <USBD_Get_USB_Status>
 80079b4:	4603      	mov	r3, r0
 80079b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80079b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3718      	adds	r7, #24
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b082      	sub	sp, #8
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	460b      	mov	r3, r1
 80079cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079d4:	78fa      	ldrb	r2, [r7, #3]
 80079d6:	4611      	mov	r1, r2
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fa fc8d 	bl	80022f8 <HAL_PCD_EP_GetRxCount>
 80079de:	4603      	mov	r3, r0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80079f0:	4b03      	ldr	r3, [pc, #12]	; (8007a00 <USBD_static_malloc+0x18>)
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	20001c20 	.word	0x20001c20

08007a04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]

}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a26:	79fb      	ldrb	r3, [r7, #7]
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d817      	bhi.n	8007a5c <USBD_Get_USB_Status+0x44>
 8007a2c:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <USBD_Get_USB_Status+0x1c>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007a45 	.word	0x08007a45
 8007a38:	08007a4b 	.word	0x08007a4b
 8007a3c:	08007a51 	.word	0x08007a51
 8007a40:	08007a57 	.word	0x08007a57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
    break;
 8007a48:	e00b      	b.n	8007a62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a4e:	e008      	b.n	8007a62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a50:	2301      	movs	r3, #1
 8007a52:	73fb      	strb	r3, [r7, #15]
    break;
 8007a54:	e005      	b.n	8007a62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a56:	2303      	movs	r3, #3
 8007a58:	73fb      	strb	r3, [r7, #15]
    break;
 8007a5a:	e002      	b.n	8007a62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a60:	bf00      	nop
  }
  return usb_status;
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <__errno>:
 8007a70:	4b01      	ldr	r3, [pc, #4]	; (8007a78 <__errno+0x8>)
 8007a72:	6818      	ldr	r0, [r3, #0]
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	20000164 	.word	0x20000164

08007a7c <__libc_init_array>:
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	4d0d      	ldr	r5, [pc, #52]	; (8007ab4 <__libc_init_array+0x38>)
 8007a80:	4c0d      	ldr	r4, [pc, #52]	; (8007ab8 <__libc_init_array+0x3c>)
 8007a82:	1b64      	subs	r4, r4, r5
 8007a84:	10a4      	asrs	r4, r4, #2
 8007a86:	2600      	movs	r6, #0
 8007a88:	42a6      	cmp	r6, r4
 8007a8a:	d109      	bne.n	8007aa0 <__libc_init_array+0x24>
 8007a8c:	4d0b      	ldr	r5, [pc, #44]	; (8007abc <__libc_init_array+0x40>)
 8007a8e:	4c0c      	ldr	r4, [pc, #48]	; (8007ac0 <__libc_init_array+0x44>)
 8007a90:	f000 fc8e 	bl	80083b0 <_init>
 8007a94:	1b64      	subs	r4, r4, r5
 8007a96:	10a4      	asrs	r4, r4, #2
 8007a98:	2600      	movs	r6, #0
 8007a9a:	42a6      	cmp	r6, r4
 8007a9c:	d105      	bne.n	8007aaa <__libc_init_array+0x2e>
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}
 8007aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa4:	4798      	blx	r3
 8007aa6:	3601      	adds	r6, #1
 8007aa8:	e7ee      	b.n	8007a88 <__libc_init_array+0xc>
 8007aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aae:	4798      	blx	r3
 8007ab0:	3601      	adds	r6, #1
 8007ab2:	e7f2      	b.n	8007a9a <__libc_init_array+0x1e>
 8007ab4:	080084f8 	.word	0x080084f8
 8007ab8:	080084f8 	.word	0x080084f8
 8007abc:	080084f8 	.word	0x080084f8
 8007ac0:	080084fc 	.word	0x080084fc

08007ac4 <memset>:
 8007ac4:	4402      	add	r2, r0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d100      	bne.n	8007ace <memset+0xa>
 8007acc:	4770      	bx	lr
 8007ace:	f803 1b01 	strb.w	r1, [r3], #1
 8007ad2:	e7f9      	b.n	8007ac8 <memset+0x4>

08007ad4 <siprintf>:
 8007ad4:	b40e      	push	{r1, r2, r3}
 8007ad6:	b500      	push	{lr}
 8007ad8:	b09c      	sub	sp, #112	; 0x70
 8007ada:	ab1d      	add	r3, sp, #116	; 0x74
 8007adc:	9002      	str	r0, [sp, #8]
 8007ade:	9006      	str	r0, [sp, #24]
 8007ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ae4:	4809      	ldr	r0, [pc, #36]	; (8007b0c <siprintf+0x38>)
 8007ae6:	9107      	str	r1, [sp, #28]
 8007ae8:	9104      	str	r1, [sp, #16]
 8007aea:	4909      	ldr	r1, [pc, #36]	; (8007b10 <siprintf+0x3c>)
 8007aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af0:	9105      	str	r1, [sp, #20]
 8007af2:	6800      	ldr	r0, [r0, #0]
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	a902      	add	r1, sp, #8
 8007af8:	f000 f868 	bl	8007bcc <_svfiprintf_r>
 8007afc:	9b02      	ldr	r3, [sp, #8]
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	b01c      	add	sp, #112	; 0x70
 8007b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b08:	b003      	add	sp, #12
 8007b0a:	4770      	bx	lr
 8007b0c:	20000164 	.word	0x20000164
 8007b10:	ffff0208 	.word	0xffff0208

08007b14 <__ssputs_r>:
 8007b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b18:	688e      	ldr	r6, [r1, #8]
 8007b1a:	429e      	cmp	r6, r3
 8007b1c:	4682      	mov	sl, r0
 8007b1e:	460c      	mov	r4, r1
 8007b20:	4690      	mov	r8, r2
 8007b22:	461f      	mov	r7, r3
 8007b24:	d838      	bhi.n	8007b98 <__ssputs_r+0x84>
 8007b26:	898a      	ldrh	r2, [r1, #12]
 8007b28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b2c:	d032      	beq.n	8007b94 <__ssputs_r+0x80>
 8007b2e:	6825      	ldr	r5, [r4, #0]
 8007b30:	6909      	ldr	r1, [r1, #16]
 8007b32:	eba5 0901 	sub.w	r9, r5, r1
 8007b36:	6965      	ldr	r5, [r4, #20]
 8007b38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b40:	3301      	adds	r3, #1
 8007b42:	444b      	add	r3, r9
 8007b44:	106d      	asrs	r5, r5, #1
 8007b46:	429d      	cmp	r5, r3
 8007b48:	bf38      	it	cc
 8007b4a:	461d      	movcc	r5, r3
 8007b4c:	0553      	lsls	r3, r2, #21
 8007b4e:	d531      	bpl.n	8007bb4 <__ssputs_r+0xa0>
 8007b50:	4629      	mov	r1, r5
 8007b52:	f000 fb63 	bl	800821c <_malloc_r>
 8007b56:	4606      	mov	r6, r0
 8007b58:	b950      	cbnz	r0, 8007b70 <__ssputs_r+0x5c>
 8007b5a:	230c      	movs	r3, #12
 8007b5c:	f8ca 3000 	str.w	r3, [sl]
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b66:	81a3      	strh	r3, [r4, #12]
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b70:	6921      	ldr	r1, [r4, #16]
 8007b72:	464a      	mov	r2, r9
 8007b74:	f000 fabe 	bl	80080f4 <memcpy>
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b82:	81a3      	strh	r3, [r4, #12]
 8007b84:	6126      	str	r6, [r4, #16]
 8007b86:	6165      	str	r5, [r4, #20]
 8007b88:	444e      	add	r6, r9
 8007b8a:	eba5 0509 	sub.w	r5, r5, r9
 8007b8e:	6026      	str	r6, [r4, #0]
 8007b90:	60a5      	str	r5, [r4, #8]
 8007b92:	463e      	mov	r6, r7
 8007b94:	42be      	cmp	r6, r7
 8007b96:	d900      	bls.n	8007b9a <__ssputs_r+0x86>
 8007b98:	463e      	mov	r6, r7
 8007b9a:	6820      	ldr	r0, [r4, #0]
 8007b9c:	4632      	mov	r2, r6
 8007b9e:	4641      	mov	r1, r8
 8007ba0:	f000 fab6 	bl	8008110 <memmove>
 8007ba4:	68a3      	ldr	r3, [r4, #8]
 8007ba6:	1b9b      	subs	r3, r3, r6
 8007ba8:	60a3      	str	r3, [r4, #8]
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	4433      	add	r3, r6
 8007bae:	6023      	str	r3, [r4, #0]
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	e7db      	b.n	8007b6c <__ssputs_r+0x58>
 8007bb4:	462a      	mov	r2, r5
 8007bb6:	f000 fba5 	bl	8008304 <_realloc_r>
 8007bba:	4606      	mov	r6, r0
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d1e1      	bne.n	8007b84 <__ssputs_r+0x70>
 8007bc0:	6921      	ldr	r1, [r4, #16]
 8007bc2:	4650      	mov	r0, sl
 8007bc4:	f000 fabe 	bl	8008144 <_free_r>
 8007bc8:	e7c7      	b.n	8007b5a <__ssputs_r+0x46>
	...

08007bcc <_svfiprintf_r>:
 8007bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd0:	4698      	mov	r8, r3
 8007bd2:	898b      	ldrh	r3, [r1, #12]
 8007bd4:	061b      	lsls	r3, r3, #24
 8007bd6:	b09d      	sub	sp, #116	; 0x74
 8007bd8:	4607      	mov	r7, r0
 8007bda:	460d      	mov	r5, r1
 8007bdc:	4614      	mov	r4, r2
 8007bde:	d50e      	bpl.n	8007bfe <_svfiprintf_r+0x32>
 8007be0:	690b      	ldr	r3, [r1, #16]
 8007be2:	b963      	cbnz	r3, 8007bfe <_svfiprintf_r+0x32>
 8007be4:	2140      	movs	r1, #64	; 0x40
 8007be6:	f000 fb19 	bl	800821c <_malloc_r>
 8007bea:	6028      	str	r0, [r5, #0]
 8007bec:	6128      	str	r0, [r5, #16]
 8007bee:	b920      	cbnz	r0, 8007bfa <_svfiprintf_r+0x2e>
 8007bf0:	230c      	movs	r3, #12
 8007bf2:	603b      	str	r3, [r7, #0]
 8007bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bf8:	e0d1      	b.n	8007d9e <_svfiprintf_r+0x1d2>
 8007bfa:	2340      	movs	r3, #64	; 0x40
 8007bfc:	616b      	str	r3, [r5, #20]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9309      	str	r3, [sp, #36]	; 0x24
 8007c02:	2320      	movs	r3, #32
 8007c04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c08:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c0c:	2330      	movs	r3, #48	; 0x30
 8007c0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007db8 <_svfiprintf_r+0x1ec>
 8007c12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c16:	f04f 0901 	mov.w	r9, #1
 8007c1a:	4623      	mov	r3, r4
 8007c1c:	469a      	mov	sl, r3
 8007c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c22:	b10a      	cbz	r2, 8007c28 <_svfiprintf_r+0x5c>
 8007c24:	2a25      	cmp	r2, #37	; 0x25
 8007c26:	d1f9      	bne.n	8007c1c <_svfiprintf_r+0x50>
 8007c28:	ebba 0b04 	subs.w	fp, sl, r4
 8007c2c:	d00b      	beq.n	8007c46 <_svfiprintf_r+0x7a>
 8007c2e:	465b      	mov	r3, fp
 8007c30:	4622      	mov	r2, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	4638      	mov	r0, r7
 8007c36:	f7ff ff6d 	bl	8007b14 <__ssputs_r>
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	f000 80aa 	beq.w	8007d94 <_svfiprintf_r+0x1c8>
 8007c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c42:	445a      	add	r2, fp
 8007c44:	9209      	str	r2, [sp, #36]	; 0x24
 8007c46:	f89a 3000 	ldrb.w	r3, [sl]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 80a2 	beq.w	8007d94 <_svfiprintf_r+0x1c8>
 8007c50:	2300      	movs	r3, #0
 8007c52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c5a:	f10a 0a01 	add.w	sl, sl, #1
 8007c5e:	9304      	str	r3, [sp, #16]
 8007c60:	9307      	str	r3, [sp, #28]
 8007c62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c66:	931a      	str	r3, [sp, #104]	; 0x68
 8007c68:	4654      	mov	r4, sl
 8007c6a:	2205      	movs	r2, #5
 8007c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c70:	4851      	ldr	r0, [pc, #324]	; (8007db8 <_svfiprintf_r+0x1ec>)
 8007c72:	f7f8 facd 	bl	8000210 <memchr>
 8007c76:	9a04      	ldr	r2, [sp, #16]
 8007c78:	b9d8      	cbnz	r0, 8007cb2 <_svfiprintf_r+0xe6>
 8007c7a:	06d0      	lsls	r0, r2, #27
 8007c7c:	bf44      	itt	mi
 8007c7e:	2320      	movmi	r3, #32
 8007c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c84:	0711      	lsls	r1, r2, #28
 8007c86:	bf44      	itt	mi
 8007c88:	232b      	movmi	r3, #43	; 0x2b
 8007c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c92:	2b2a      	cmp	r3, #42	; 0x2a
 8007c94:	d015      	beq.n	8007cc2 <_svfiprintf_r+0xf6>
 8007c96:	9a07      	ldr	r2, [sp, #28]
 8007c98:	4654      	mov	r4, sl
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	f04f 0c0a 	mov.w	ip, #10
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ca6:	3b30      	subs	r3, #48	; 0x30
 8007ca8:	2b09      	cmp	r3, #9
 8007caa:	d94e      	bls.n	8007d4a <_svfiprintf_r+0x17e>
 8007cac:	b1b0      	cbz	r0, 8007cdc <_svfiprintf_r+0x110>
 8007cae:	9207      	str	r2, [sp, #28]
 8007cb0:	e014      	b.n	8007cdc <_svfiprintf_r+0x110>
 8007cb2:	eba0 0308 	sub.w	r3, r0, r8
 8007cb6:	fa09 f303 	lsl.w	r3, r9, r3
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	9304      	str	r3, [sp, #16]
 8007cbe:	46a2      	mov	sl, r4
 8007cc0:	e7d2      	b.n	8007c68 <_svfiprintf_r+0x9c>
 8007cc2:	9b03      	ldr	r3, [sp, #12]
 8007cc4:	1d19      	adds	r1, r3, #4
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	9103      	str	r1, [sp, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bfbb      	ittet	lt
 8007cce:	425b      	neglt	r3, r3
 8007cd0:	f042 0202 	orrlt.w	r2, r2, #2
 8007cd4:	9307      	strge	r3, [sp, #28]
 8007cd6:	9307      	strlt	r3, [sp, #28]
 8007cd8:	bfb8      	it	lt
 8007cda:	9204      	strlt	r2, [sp, #16]
 8007cdc:	7823      	ldrb	r3, [r4, #0]
 8007cde:	2b2e      	cmp	r3, #46	; 0x2e
 8007ce0:	d10c      	bne.n	8007cfc <_svfiprintf_r+0x130>
 8007ce2:	7863      	ldrb	r3, [r4, #1]
 8007ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ce6:	d135      	bne.n	8007d54 <_svfiprintf_r+0x188>
 8007ce8:	9b03      	ldr	r3, [sp, #12]
 8007cea:	1d1a      	adds	r2, r3, #4
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	9203      	str	r2, [sp, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	bfb8      	it	lt
 8007cf4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007cf8:	3402      	adds	r4, #2
 8007cfa:	9305      	str	r3, [sp, #20]
 8007cfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007dc8 <_svfiprintf_r+0x1fc>
 8007d00:	7821      	ldrb	r1, [r4, #0]
 8007d02:	2203      	movs	r2, #3
 8007d04:	4650      	mov	r0, sl
 8007d06:	f7f8 fa83 	bl	8000210 <memchr>
 8007d0a:	b140      	cbz	r0, 8007d1e <_svfiprintf_r+0x152>
 8007d0c:	2340      	movs	r3, #64	; 0x40
 8007d0e:	eba0 000a 	sub.w	r0, r0, sl
 8007d12:	fa03 f000 	lsl.w	r0, r3, r0
 8007d16:	9b04      	ldr	r3, [sp, #16]
 8007d18:	4303      	orrs	r3, r0
 8007d1a:	3401      	adds	r4, #1
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d22:	4826      	ldr	r0, [pc, #152]	; (8007dbc <_svfiprintf_r+0x1f0>)
 8007d24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d28:	2206      	movs	r2, #6
 8007d2a:	f7f8 fa71 	bl	8000210 <memchr>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	d038      	beq.n	8007da4 <_svfiprintf_r+0x1d8>
 8007d32:	4b23      	ldr	r3, [pc, #140]	; (8007dc0 <_svfiprintf_r+0x1f4>)
 8007d34:	bb1b      	cbnz	r3, 8007d7e <_svfiprintf_r+0x1b2>
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	3307      	adds	r3, #7
 8007d3a:	f023 0307 	bic.w	r3, r3, #7
 8007d3e:	3308      	adds	r3, #8
 8007d40:	9303      	str	r3, [sp, #12]
 8007d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d44:	4433      	add	r3, r6
 8007d46:	9309      	str	r3, [sp, #36]	; 0x24
 8007d48:	e767      	b.n	8007c1a <_svfiprintf_r+0x4e>
 8007d4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d4e:	460c      	mov	r4, r1
 8007d50:	2001      	movs	r0, #1
 8007d52:	e7a5      	b.n	8007ca0 <_svfiprintf_r+0xd4>
 8007d54:	2300      	movs	r3, #0
 8007d56:	3401      	adds	r4, #1
 8007d58:	9305      	str	r3, [sp, #20]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	f04f 0c0a 	mov.w	ip, #10
 8007d60:	4620      	mov	r0, r4
 8007d62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d66:	3a30      	subs	r2, #48	; 0x30
 8007d68:	2a09      	cmp	r2, #9
 8007d6a:	d903      	bls.n	8007d74 <_svfiprintf_r+0x1a8>
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d0c5      	beq.n	8007cfc <_svfiprintf_r+0x130>
 8007d70:	9105      	str	r1, [sp, #20]
 8007d72:	e7c3      	b.n	8007cfc <_svfiprintf_r+0x130>
 8007d74:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d78:	4604      	mov	r4, r0
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e7f0      	b.n	8007d60 <_svfiprintf_r+0x194>
 8007d7e:	ab03      	add	r3, sp, #12
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	462a      	mov	r2, r5
 8007d84:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <_svfiprintf_r+0x1f8>)
 8007d86:	a904      	add	r1, sp, #16
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f3af 8000 	nop.w
 8007d8e:	1c42      	adds	r2, r0, #1
 8007d90:	4606      	mov	r6, r0
 8007d92:	d1d6      	bne.n	8007d42 <_svfiprintf_r+0x176>
 8007d94:	89ab      	ldrh	r3, [r5, #12]
 8007d96:	065b      	lsls	r3, r3, #25
 8007d98:	f53f af2c 	bmi.w	8007bf4 <_svfiprintf_r+0x28>
 8007d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d9e:	b01d      	add	sp, #116	; 0x74
 8007da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da4:	ab03      	add	r3, sp, #12
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	462a      	mov	r2, r5
 8007daa:	4b06      	ldr	r3, [pc, #24]	; (8007dc4 <_svfiprintf_r+0x1f8>)
 8007dac:	a904      	add	r1, sp, #16
 8007dae:	4638      	mov	r0, r7
 8007db0:	f000 f87a 	bl	8007ea8 <_printf_i>
 8007db4:	e7eb      	b.n	8007d8e <_svfiprintf_r+0x1c2>
 8007db6:	bf00      	nop
 8007db8:	080084bc 	.word	0x080084bc
 8007dbc:	080084c6 	.word	0x080084c6
 8007dc0:	00000000 	.word	0x00000000
 8007dc4:	08007b15 	.word	0x08007b15
 8007dc8:	080084c2 	.word	0x080084c2

08007dcc <_printf_common>:
 8007dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd0:	4616      	mov	r6, r2
 8007dd2:	4699      	mov	r9, r3
 8007dd4:	688a      	ldr	r2, [r1, #8]
 8007dd6:	690b      	ldr	r3, [r1, #16]
 8007dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	bfb8      	it	lt
 8007de0:	4613      	movlt	r3, r2
 8007de2:	6033      	str	r3, [r6, #0]
 8007de4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007de8:	4607      	mov	r7, r0
 8007dea:	460c      	mov	r4, r1
 8007dec:	b10a      	cbz	r2, 8007df2 <_printf_common+0x26>
 8007dee:	3301      	adds	r3, #1
 8007df0:	6033      	str	r3, [r6, #0]
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	0699      	lsls	r1, r3, #26
 8007df6:	bf42      	ittt	mi
 8007df8:	6833      	ldrmi	r3, [r6, #0]
 8007dfa:	3302      	addmi	r3, #2
 8007dfc:	6033      	strmi	r3, [r6, #0]
 8007dfe:	6825      	ldr	r5, [r4, #0]
 8007e00:	f015 0506 	ands.w	r5, r5, #6
 8007e04:	d106      	bne.n	8007e14 <_printf_common+0x48>
 8007e06:	f104 0a19 	add.w	sl, r4, #25
 8007e0a:	68e3      	ldr	r3, [r4, #12]
 8007e0c:	6832      	ldr	r2, [r6, #0]
 8007e0e:	1a9b      	subs	r3, r3, r2
 8007e10:	42ab      	cmp	r3, r5
 8007e12:	dc26      	bgt.n	8007e62 <_printf_common+0x96>
 8007e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e18:	1e13      	subs	r3, r2, #0
 8007e1a:	6822      	ldr	r2, [r4, #0]
 8007e1c:	bf18      	it	ne
 8007e1e:	2301      	movne	r3, #1
 8007e20:	0692      	lsls	r2, r2, #26
 8007e22:	d42b      	bmi.n	8007e7c <_printf_common+0xb0>
 8007e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e28:	4649      	mov	r1, r9
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	47c0      	blx	r8
 8007e2e:	3001      	adds	r0, #1
 8007e30:	d01e      	beq.n	8007e70 <_printf_common+0xa4>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	68e5      	ldr	r5, [r4, #12]
 8007e36:	6832      	ldr	r2, [r6, #0]
 8007e38:	f003 0306 	and.w	r3, r3, #6
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	bf08      	it	eq
 8007e40:	1aad      	subeq	r5, r5, r2
 8007e42:	68a3      	ldr	r3, [r4, #8]
 8007e44:	6922      	ldr	r2, [r4, #16]
 8007e46:	bf0c      	ite	eq
 8007e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e4c:	2500      	movne	r5, #0
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	bfc4      	itt	gt
 8007e52:	1a9b      	subgt	r3, r3, r2
 8007e54:	18ed      	addgt	r5, r5, r3
 8007e56:	2600      	movs	r6, #0
 8007e58:	341a      	adds	r4, #26
 8007e5a:	42b5      	cmp	r5, r6
 8007e5c:	d11a      	bne.n	8007e94 <_printf_common+0xc8>
 8007e5e:	2000      	movs	r0, #0
 8007e60:	e008      	b.n	8007e74 <_printf_common+0xa8>
 8007e62:	2301      	movs	r3, #1
 8007e64:	4652      	mov	r2, sl
 8007e66:	4649      	mov	r1, r9
 8007e68:	4638      	mov	r0, r7
 8007e6a:	47c0      	blx	r8
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d103      	bne.n	8007e78 <_printf_common+0xac>
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e78:	3501      	adds	r5, #1
 8007e7a:	e7c6      	b.n	8007e0a <_printf_common+0x3e>
 8007e7c:	18e1      	adds	r1, r4, r3
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	2030      	movs	r0, #48	; 0x30
 8007e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e86:	4422      	add	r2, r4
 8007e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e90:	3302      	adds	r3, #2
 8007e92:	e7c7      	b.n	8007e24 <_printf_common+0x58>
 8007e94:	2301      	movs	r3, #1
 8007e96:	4622      	mov	r2, r4
 8007e98:	4649      	mov	r1, r9
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	47c0      	blx	r8
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	d0e6      	beq.n	8007e70 <_printf_common+0xa4>
 8007ea2:	3601      	adds	r6, #1
 8007ea4:	e7d9      	b.n	8007e5a <_printf_common+0x8e>
	...

08007ea8 <_printf_i>:
 8007ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eac:	7e0f      	ldrb	r7, [r1, #24]
 8007eae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007eb0:	2f78      	cmp	r7, #120	; 0x78
 8007eb2:	4691      	mov	r9, r2
 8007eb4:	4680      	mov	r8, r0
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	469a      	mov	sl, r3
 8007eba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ebe:	d807      	bhi.n	8007ed0 <_printf_i+0x28>
 8007ec0:	2f62      	cmp	r7, #98	; 0x62
 8007ec2:	d80a      	bhi.n	8007eda <_printf_i+0x32>
 8007ec4:	2f00      	cmp	r7, #0
 8007ec6:	f000 80d8 	beq.w	800807a <_printf_i+0x1d2>
 8007eca:	2f58      	cmp	r7, #88	; 0x58
 8007ecc:	f000 80a3 	beq.w	8008016 <_printf_i+0x16e>
 8007ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ed8:	e03a      	b.n	8007f50 <_printf_i+0xa8>
 8007eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ede:	2b15      	cmp	r3, #21
 8007ee0:	d8f6      	bhi.n	8007ed0 <_printf_i+0x28>
 8007ee2:	a101      	add	r1, pc, #4	; (adr r1, 8007ee8 <_printf_i+0x40>)
 8007ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ee8:	08007f41 	.word	0x08007f41
 8007eec:	08007f55 	.word	0x08007f55
 8007ef0:	08007ed1 	.word	0x08007ed1
 8007ef4:	08007ed1 	.word	0x08007ed1
 8007ef8:	08007ed1 	.word	0x08007ed1
 8007efc:	08007ed1 	.word	0x08007ed1
 8007f00:	08007f55 	.word	0x08007f55
 8007f04:	08007ed1 	.word	0x08007ed1
 8007f08:	08007ed1 	.word	0x08007ed1
 8007f0c:	08007ed1 	.word	0x08007ed1
 8007f10:	08007ed1 	.word	0x08007ed1
 8007f14:	08008061 	.word	0x08008061
 8007f18:	08007f85 	.word	0x08007f85
 8007f1c:	08008043 	.word	0x08008043
 8007f20:	08007ed1 	.word	0x08007ed1
 8007f24:	08007ed1 	.word	0x08007ed1
 8007f28:	08008083 	.word	0x08008083
 8007f2c:	08007ed1 	.word	0x08007ed1
 8007f30:	08007f85 	.word	0x08007f85
 8007f34:	08007ed1 	.word	0x08007ed1
 8007f38:	08007ed1 	.word	0x08007ed1
 8007f3c:	0800804b 	.word	0x0800804b
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	1d1a      	adds	r2, r3, #4
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	602a      	str	r2, [r5, #0]
 8007f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f50:	2301      	movs	r3, #1
 8007f52:	e0a3      	b.n	800809c <_printf_i+0x1f4>
 8007f54:	6820      	ldr	r0, [r4, #0]
 8007f56:	6829      	ldr	r1, [r5, #0]
 8007f58:	0606      	lsls	r6, r0, #24
 8007f5a:	f101 0304 	add.w	r3, r1, #4
 8007f5e:	d50a      	bpl.n	8007f76 <_printf_i+0xce>
 8007f60:	680e      	ldr	r6, [r1, #0]
 8007f62:	602b      	str	r3, [r5, #0]
 8007f64:	2e00      	cmp	r6, #0
 8007f66:	da03      	bge.n	8007f70 <_printf_i+0xc8>
 8007f68:	232d      	movs	r3, #45	; 0x2d
 8007f6a:	4276      	negs	r6, r6
 8007f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f70:	485e      	ldr	r0, [pc, #376]	; (80080ec <_printf_i+0x244>)
 8007f72:	230a      	movs	r3, #10
 8007f74:	e019      	b.n	8007faa <_printf_i+0x102>
 8007f76:	680e      	ldr	r6, [r1, #0]
 8007f78:	602b      	str	r3, [r5, #0]
 8007f7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f7e:	bf18      	it	ne
 8007f80:	b236      	sxthne	r6, r6
 8007f82:	e7ef      	b.n	8007f64 <_printf_i+0xbc>
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	6820      	ldr	r0, [r4, #0]
 8007f88:	1d19      	adds	r1, r3, #4
 8007f8a:	6029      	str	r1, [r5, #0]
 8007f8c:	0601      	lsls	r1, r0, #24
 8007f8e:	d501      	bpl.n	8007f94 <_printf_i+0xec>
 8007f90:	681e      	ldr	r6, [r3, #0]
 8007f92:	e002      	b.n	8007f9a <_printf_i+0xf2>
 8007f94:	0646      	lsls	r6, r0, #25
 8007f96:	d5fb      	bpl.n	8007f90 <_printf_i+0xe8>
 8007f98:	881e      	ldrh	r6, [r3, #0]
 8007f9a:	4854      	ldr	r0, [pc, #336]	; (80080ec <_printf_i+0x244>)
 8007f9c:	2f6f      	cmp	r7, #111	; 0x6f
 8007f9e:	bf0c      	ite	eq
 8007fa0:	2308      	moveq	r3, #8
 8007fa2:	230a      	movne	r3, #10
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007faa:	6865      	ldr	r5, [r4, #4]
 8007fac:	60a5      	str	r5, [r4, #8]
 8007fae:	2d00      	cmp	r5, #0
 8007fb0:	bfa2      	ittt	ge
 8007fb2:	6821      	ldrge	r1, [r4, #0]
 8007fb4:	f021 0104 	bicge.w	r1, r1, #4
 8007fb8:	6021      	strge	r1, [r4, #0]
 8007fba:	b90e      	cbnz	r6, 8007fc0 <_printf_i+0x118>
 8007fbc:	2d00      	cmp	r5, #0
 8007fbe:	d04d      	beq.n	800805c <_printf_i+0x1b4>
 8007fc0:	4615      	mov	r5, r2
 8007fc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fc6:	fb03 6711 	mls	r7, r3, r1, r6
 8007fca:	5dc7      	ldrb	r7, [r0, r7]
 8007fcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fd0:	4637      	mov	r7, r6
 8007fd2:	42bb      	cmp	r3, r7
 8007fd4:	460e      	mov	r6, r1
 8007fd6:	d9f4      	bls.n	8007fc2 <_printf_i+0x11a>
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d10b      	bne.n	8007ff4 <_printf_i+0x14c>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	07de      	lsls	r6, r3, #31
 8007fe0:	d508      	bpl.n	8007ff4 <_printf_i+0x14c>
 8007fe2:	6923      	ldr	r3, [r4, #16]
 8007fe4:	6861      	ldr	r1, [r4, #4]
 8007fe6:	4299      	cmp	r1, r3
 8007fe8:	bfde      	ittt	le
 8007fea:	2330      	movle	r3, #48	; 0x30
 8007fec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ff0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007ff4:	1b52      	subs	r2, r2, r5
 8007ff6:	6122      	str	r2, [r4, #16]
 8007ff8:	f8cd a000 	str.w	sl, [sp]
 8007ffc:	464b      	mov	r3, r9
 8007ffe:	aa03      	add	r2, sp, #12
 8008000:	4621      	mov	r1, r4
 8008002:	4640      	mov	r0, r8
 8008004:	f7ff fee2 	bl	8007dcc <_printf_common>
 8008008:	3001      	adds	r0, #1
 800800a:	d14c      	bne.n	80080a6 <_printf_i+0x1fe>
 800800c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008010:	b004      	add	sp, #16
 8008012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008016:	4835      	ldr	r0, [pc, #212]	; (80080ec <_printf_i+0x244>)
 8008018:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800801c:	6829      	ldr	r1, [r5, #0]
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	f851 6b04 	ldr.w	r6, [r1], #4
 8008024:	6029      	str	r1, [r5, #0]
 8008026:	061d      	lsls	r5, r3, #24
 8008028:	d514      	bpl.n	8008054 <_printf_i+0x1ac>
 800802a:	07df      	lsls	r7, r3, #31
 800802c:	bf44      	itt	mi
 800802e:	f043 0320 	orrmi.w	r3, r3, #32
 8008032:	6023      	strmi	r3, [r4, #0]
 8008034:	b91e      	cbnz	r6, 800803e <_printf_i+0x196>
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	f023 0320 	bic.w	r3, r3, #32
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	2310      	movs	r3, #16
 8008040:	e7b0      	b.n	8007fa4 <_printf_i+0xfc>
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	f043 0320 	orr.w	r3, r3, #32
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	2378      	movs	r3, #120	; 0x78
 800804c:	4828      	ldr	r0, [pc, #160]	; (80080f0 <_printf_i+0x248>)
 800804e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008052:	e7e3      	b.n	800801c <_printf_i+0x174>
 8008054:	0659      	lsls	r1, r3, #25
 8008056:	bf48      	it	mi
 8008058:	b2b6      	uxthmi	r6, r6
 800805a:	e7e6      	b.n	800802a <_printf_i+0x182>
 800805c:	4615      	mov	r5, r2
 800805e:	e7bb      	b.n	8007fd8 <_printf_i+0x130>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	6826      	ldr	r6, [r4, #0]
 8008064:	6961      	ldr	r1, [r4, #20]
 8008066:	1d18      	adds	r0, r3, #4
 8008068:	6028      	str	r0, [r5, #0]
 800806a:	0635      	lsls	r5, r6, #24
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	d501      	bpl.n	8008074 <_printf_i+0x1cc>
 8008070:	6019      	str	r1, [r3, #0]
 8008072:	e002      	b.n	800807a <_printf_i+0x1d2>
 8008074:	0670      	lsls	r0, r6, #25
 8008076:	d5fb      	bpl.n	8008070 <_printf_i+0x1c8>
 8008078:	8019      	strh	r1, [r3, #0]
 800807a:	2300      	movs	r3, #0
 800807c:	6123      	str	r3, [r4, #16]
 800807e:	4615      	mov	r5, r2
 8008080:	e7ba      	b.n	8007ff8 <_printf_i+0x150>
 8008082:	682b      	ldr	r3, [r5, #0]
 8008084:	1d1a      	adds	r2, r3, #4
 8008086:	602a      	str	r2, [r5, #0]
 8008088:	681d      	ldr	r5, [r3, #0]
 800808a:	6862      	ldr	r2, [r4, #4]
 800808c:	2100      	movs	r1, #0
 800808e:	4628      	mov	r0, r5
 8008090:	f7f8 f8be 	bl	8000210 <memchr>
 8008094:	b108      	cbz	r0, 800809a <_printf_i+0x1f2>
 8008096:	1b40      	subs	r0, r0, r5
 8008098:	6060      	str	r0, [r4, #4]
 800809a:	6863      	ldr	r3, [r4, #4]
 800809c:	6123      	str	r3, [r4, #16]
 800809e:	2300      	movs	r3, #0
 80080a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a4:	e7a8      	b.n	8007ff8 <_printf_i+0x150>
 80080a6:	6923      	ldr	r3, [r4, #16]
 80080a8:	462a      	mov	r2, r5
 80080aa:	4649      	mov	r1, r9
 80080ac:	4640      	mov	r0, r8
 80080ae:	47d0      	blx	sl
 80080b0:	3001      	adds	r0, #1
 80080b2:	d0ab      	beq.n	800800c <_printf_i+0x164>
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	079b      	lsls	r3, r3, #30
 80080b8:	d413      	bmi.n	80080e2 <_printf_i+0x23a>
 80080ba:	68e0      	ldr	r0, [r4, #12]
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	4298      	cmp	r0, r3
 80080c0:	bfb8      	it	lt
 80080c2:	4618      	movlt	r0, r3
 80080c4:	e7a4      	b.n	8008010 <_printf_i+0x168>
 80080c6:	2301      	movs	r3, #1
 80080c8:	4632      	mov	r2, r6
 80080ca:	4649      	mov	r1, r9
 80080cc:	4640      	mov	r0, r8
 80080ce:	47d0      	blx	sl
 80080d0:	3001      	adds	r0, #1
 80080d2:	d09b      	beq.n	800800c <_printf_i+0x164>
 80080d4:	3501      	adds	r5, #1
 80080d6:	68e3      	ldr	r3, [r4, #12]
 80080d8:	9903      	ldr	r1, [sp, #12]
 80080da:	1a5b      	subs	r3, r3, r1
 80080dc:	42ab      	cmp	r3, r5
 80080de:	dcf2      	bgt.n	80080c6 <_printf_i+0x21e>
 80080e0:	e7eb      	b.n	80080ba <_printf_i+0x212>
 80080e2:	2500      	movs	r5, #0
 80080e4:	f104 0619 	add.w	r6, r4, #25
 80080e8:	e7f5      	b.n	80080d6 <_printf_i+0x22e>
 80080ea:	bf00      	nop
 80080ec:	080084cd 	.word	0x080084cd
 80080f0:	080084de 	.word	0x080084de

080080f4 <memcpy>:
 80080f4:	440a      	add	r2, r1
 80080f6:	4291      	cmp	r1, r2
 80080f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80080fc:	d100      	bne.n	8008100 <memcpy+0xc>
 80080fe:	4770      	bx	lr
 8008100:	b510      	push	{r4, lr}
 8008102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800810a:	4291      	cmp	r1, r2
 800810c:	d1f9      	bne.n	8008102 <memcpy+0xe>
 800810e:	bd10      	pop	{r4, pc}

08008110 <memmove>:
 8008110:	4288      	cmp	r0, r1
 8008112:	b510      	push	{r4, lr}
 8008114:	eb01 0402 	add.w	r4, r1, r2
 8008118:	d902      	bls.n	8008120 <memmove+0x10>
 800811a:	4284      	cmp	r4, r0
 800811c:	4623      	mov	r3, r4
 800811e:	d807      	bhi.n	8008130 <memmove+0x20>
 8008120:	1e43      	subs	r3, r0, #1
 8008122:	42a1      	cmp	r1, r4
 8008124:	d008      	beq.n	8008138 <memmove+0x28>
 8008126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800812a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800812e:	e7f8      	b.n	8008122 <memmove+0x12>
 8008130:	4402      	add	r2, r0
 8008132:	4601      	mov	r1, r0
 8008134:	428a      	cmp	r2, r1
 8008136:	d100      	bne.n	800813a <memmove+0x2a>
 8008138:	bd10      	pop	{r4, pc}
 800813a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800813e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008142:	e7f7      	b.n	8008134 <memmove+0x24>

08008144 <_free_r>:
 8008144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008146:	2900      	cmp	r1, #0
 8008148:	d044      	beq.n	80081d4 <_free_r+0x90>
 800814a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800814e:	9001      	str	r0, [sp, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	f1a1 0404 	sub.w	r4, r1, #4
 8008156:	bfb8      	it	lt
 8008158:	18e4      	addlt	r4, r4, r3
 800815a:	f000 f913 	bl	8008384 <__malloc_lock>
 800815e:	4a1e      	ldr	r2, [pc, #120]	; (80081d8 <_free_r+0x94>)
 8008160:	9801      	ldr	r0, [sp, #4]
 8008162:	6813      	ldr	r3, [r2, #0]
 8008164:	b933      	cbnz	r3, 8008174 <_free_r+0x30>
 8008166:	6063      	str	r3, [r4, #4]
 8008168:	6014      	str	r4, [r2, #0]
 800816a:	b003      	add	sp, #12
 800816c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008170:	f000 b90e 	b.w	8008390 <__malloc_unlock>
 8008174:	42a3      	cmp	r3, r4
 8008176:	d908      	bls.n	800818a <_free_r+0x46>
 8008178:	6825      	ldr	r5, [r4, #0]
 800817a:	1961      	adds	r1, r4, r5
 800817c:	428b      	cmp	r3, r1
 800817e:	bf01      	itttt	eq
 8008180:	6819      	ldreq	r1, [r3, #0]
 8008182:	685b      	ldreq	r3, [r3, #4]
 8008184:	1949      	addeq	r1, r1, r5
 8008186:	6021      	streq	r1, [r4, #0]
 8008188:	e7ed      	b.n	8008166 <_free_r+0x22>
 800818a:	461a      	mov	r2, r3
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	b10b      	cbz	r3, 8008194 <_free_r+0x50>
 8008190:	42a3      	cmp	r3, r4
 8008192:	d9fa      	bls.n	800818a <_free_r+0x46>
 8008194:	6811      	ldr	r1, [r2, #0]
 8008196:	1855      	adds	r5, r2, r1
 8008198:	42a5      	cmp	r5, r4
 800819a:	d10b      	bne.n	80081b4 <_free_r+0x70>
 800819c:	6824      	ldr	r4, [r4, #0]
 800819e:	4421      	add	r1, r4
 80081a0:	1854      	adds	r4, r2, r1
 80081a2:	42a3      	cmp	r3, r4
 80081a4:	6011      	str	r1, [r2, #0]
 80081a6:	d1e0      	bne.n	800816a <_free_r+0x26>
 80081a8:	681c      	ldr	r4, [r3, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	6053      	str	r3, [r2, #4]
 80081ae:	4421      	add	r1, r4
 80081b0:	6011      	str	r1, [r2, #0]
 80081b2:	e7da      	b.n	800816a <_free_r+0x26>
 80081b4:	d902      	bls.n	80081bc <_free_r+0x78>
 80081b6:	230c      	movs	r3, #12
 80081b8:	6003      	str	r3, [r0, #0]
 80081ba:	e7d6      	b.n	800816a <_free_r+0x26>
 80081bc:	6825      	ldr	r5, [r4, #0]
 80081be:	1961      	adds	r1, r4, r5
 80081c0:	428b      	cmp	r3, r1
 80081c2:	bf04      	itt	eq
 80081c4:	6819      	ldreq	r1, [r3, #0]
 80081c6:	685b      	ldreq	r3, [r3, #4]
 80081c8:	6063      	str	r3, [r4, #4]
 80081ca:	bf04      	itt	eq
 80081cc:	1949      	addeq	r1, r1, r5
 80081ce:	6021      	streq	r1, [r4, #0]
 80081d0:	6054      	str	r4, [r2, #4]
 80081d2:	e7ca      	b.n	800816a <_free_r+0x26>
 80081d4:	b003      	add	sp, #12
 80081d6:	bd30      	pop	{r4, r5, pc}
 80081d8:	20001e40 	.word	0x20001e40

080081dc <sbrk_aligned>:
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	4e0e      	ldr	r6, [pc, #56]	; (8008218 <sbrk_aligned+0x3c>)
 80081e0:	460c      	mov	r4, r1
 80081e2:	6831      	ldr	r1, [r6, #0]
 80081e4:	4605      	mov	r5, r0
 80081e6:	b911      	cbnz	r1, 80081ee <sbrk_aligned+0x12>
 80081e8:	f000 f8bc 	bl	8008364 <_sbrk_r>
 80081ec:	6030      	str	r0, [r6, #0]
 80081ee:	4621      	mov	r1, r4
 80081f0:	4628      	mov	r0, r5
 80081f2:	f000 f8b7 	bl	8008364 <_sbrk_r>
 80081f6:	1c43      	adds	r3, r0, #1
 80081f8:	d00a      	beq.n	8008210 <sbrk_aligned+0x34>
 80081fa:	1cc4      	adds	r4, r0, #3
 80081fc:	f024 0403 	bic.w	r4, r4, #3
 8008200:	42a0      	cmp	r0, r4
 8008202:	d007      	beq.n	8008214 <sbrk_aligned+0x38>
 8008204:	1a21      	subs	r1, r4, r0
 8008206:	4628      	mov	r0, r5
 8008208:	f000 f8ac 	bl	8008364 <_sbrk_r>
 800820c:	3001      	adds	r0, #1
 800820e:	d101      	bne.n	8008214 <sbrk_aligned+0x38>
 8008210:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008214:	4620      	mov	r0, r4
 8008216:	bd70      	pop	{r4, r5, r6, pc}
 8008218:	20001e44 	.word	0x20001e44

0800821c <_malloc_r>:
 800821c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008220:	1ccd      	adds	r5, r1, #3
 8008222:	f025 0503 	bic.w	r5, r5, #3
 8008226:	3508      	adds	r5, #8
 8008228:	2d0c      	cmp	r5, #12
 800822a:	bf38      	it	cc
 800822c:	250c      	movcc	r5, #12
 800822e:	2d00      	cmp	r5, #0
 8008230:	4607      	mov	r7, r0
 8008232:	db01      	blt.n	8008238 <_malloc_r+0x1c>
 8008234:	42a9      	cmp	r1, r5
 8008236:	d905      	bls.n	8008244 <_malloc_r+0x28>
 8008238:	230c      	movs	r3, #12
 800823a:	603b      	str	r3, [r7, #0]
 800823c:	2600      	movs	r6, #0
 800823e:	4630      	mov	r0, r6
 8008240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008244:	4e2e      	ldr	r6, [pc, #184]	; (8008300 <_malloc_r+0xe4>)
 8008246:	f000 f89d 	bl	8008384 <__malloc_lock>
 800824a:	6833      	ldr	r3, [r6, #0]
 800824c:	461c      	mov	r4, r3
 800824e:	bb34      	cbnz	r4, 800829e <_malloc_r+0x82>
 8008250:	4629      	mov	r1, r5
 8008252:	4638      	mov	r0, r7
 8008254:	f7ff ffc2 	bl	80081dc <sbrk_aligned>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	4604      	mov	r4, r0
 800825c:	d14d      	bne.n	80082fa <_malloc_r+0xde>
 800825e:	6834      	ldr	r4, [r6, #0]
 8008260:	4626      	mov	r6, r4
 8008262:	2e00      	cmp	r6, #0
 8008264:	d140      	bne.n	80082e8 <_malloc_r+0xcc>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	4631      	mov	r1, r6
 800826a:	4638      	mov	r0, r7
 800826c:	eb04 0803 	add.w	r8, r4, r3
 8008270:	f000 f878 	bl	8008364 <_sbrk_r>
 8008274:	4580      	cmp	r8, r0
 8008276:	d13a      	bne.n	80082ee <_malloc_r+0xd2>
 8008278:	6821      	ldr	r1, [r4, #0]
 800827a:	3503      	adds	r5, #3
 800827c:	1a6d      	subs	r5, r5, r1
 800827e:	f025 0503 	bic.w	r5, r5, #3
 8008282:	3508      	adds	r5, #8
 8008284:	2d0c      	cmp	r5, #12
 8008286:	bf38      	it	cc
 8008288:	250c      	movcc	r5, #12
 800828a:	4629      	mov	r1, r5
 800828c:	4638      	mov	r0, r7
 800828e:	f7ff ffa5 	bl	80081dc <sbrk_aligned>
 8008292:	3001      	adds	r0, #1
 8008294:	d02b      	beq.n	80082ee <_malloc_r+0xd2>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	442b      	add	r3, r5
 800829a:	6023      	str	r3, [r4, #0]
 800829c:	e00e      	b.n	80082bc <_malloc_r+0xa0>
 800829e:	6822      	ldr	r2, [r4, #0]
 80082a0:	1b52      	subs	r2, r2, r5
 80082a2:	d41e      	bmi.n	80082e2 <_malloc_r+0xc6>
 80082a4:	2a0b      	cmp	r2, #11
 80082a6:	d916      	bls.n	80082d6 <_malloc_r+0xba>
 80082a8:	1961      	adds	r1, r4, r5
 80082aa:	42a3      	cmp	r3, r4
 80082ac:	6025      	str	r5, [r4, #0]
 80082ae:	bf18      	it	ne
 80082b0:	6059      	strne	r1, [r3, #4]
 80082b2:	6863      	ldr	r3, [r4, #4]
 80082b4:	bf08      	it	eq
 80082b6:	6031      	streq	r1, [r6, #0]
 80082b8:	5162      	str	r2, [r4, r5]
 80082ba:	604b      	str	r3, [r1, #4]
 80082bc:	4638      	mov	r0, r7
 80082be:	f104 060b 	add.w	r6, r4, #11
 80082c2:	f000 f865 	bl	8008390 <__malloc_unlock>
 80082c6:	f026 0607 	bic.w	r6, r6, #7
 80082ca:	1d23      	adds	r3, r4, #4
 80082cc:	1af2      	subs	r2, r6, r3
 80082ce:	d0b6      	beq.n	800823e <_malloc_r+0x22>
 80082d0:	1b9b      	subs	r3, r3, r6
 80082d2:	50a3      	str	r3, [r4, r2]
 80082d4:	e7b3      	b.n	800823e <_malloc_r+0x22>
 80082d6:	6862      	ldr	r2, [r4, #4]
 80082d8:	42a3      	cmp	r3, r4
 80082da:	bf0c      	ite	eq
 80082dc:	6032      	streq	r2, [r6, #0]
 80082de:	605a      	strne	r2, [r3, #4]
 80082e0:	e7ec      	b.n	80082bc <_malloc_r+0xa0>
 80082e2:	4623      	mov	r3, r4
 80082e4:	6864      	ldr	r4, [r4, #4]
 80082e6:	e7b2      	b.n	800824e <_malloc_r+0x32>
 80082e8:	4634      	mov	r4, r6
 80082ea:	6876      	ldr	r6, [r6, #4]
 80082ec:	e7b9      	b.n	8008262 <_malloc_r+0x46>
 80082ee:	230c      	movs	r3, #12
 80082f0:	603b      	str	r3, [r7, #0]
 80082f2:	4638      	mov	r0, r7
 80082f4:	f000 f84c 	bl	8008390 <__malloc_unlock>
 80082f8:	e7a1      	b.n	800823e <_malloc_r+0x22>
 80082fa:	6025      	str	r5, [r4, #0]
 80082fc:	e7de      	b.n	80082bc <_malloc_r+0xa0>
 80082fe:	bf00      	nop
 8008300:	20001e40 	.word	0x20001e40

08008304 <_realloc_r>:
 8008304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008308:	4680      	mov	r8, r0
 800830a:	4614      	mov	r4, r2
 800830c:	460e      	mov	r6, r1
 800830e:	b921      	cbnz	r1, 800831a <_realloc_r+0x16>
 8008310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008314:	4611      	mov	r1, r2
 8008316:	f7ff bf81 	b.w	800821c <_malloc_r>
 800831a:	b92a      	cbnz	r2, 8008328 <_realloc_r+0x24>
 800831c:	f7ff ff12 	bl	8008144 <_free_r>
 8008320:	4625      	mov	r5, r4
 8008322:	4628      	mov	r0, r5
 8008324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008328:	f000 f838 	bl	800839c <_malloc_usable_size_r>
 800832c:	4284      	cmp	r4, r0
 800832e:	4607      	mov	r7, r0
 8008330:	d802      	bhi.n	8008338 <_realloc_r+0x34>
 8008332:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008336:	d812      	bhi.n	800835e <_realloc_r+0x5a>
 8008338:	4621      	mov	r1, r4
 800833a:	4640      	mov	r0, r8
 800833c:	f7ff ff6e 	bl	800821c <_malloc_r>
 8008340:	4605      	mov	r5, r0
 8008342:	2800      	cmp	r0, #0
 8008344:	d0ed      	beq.n	8008322 <_realloc_r+0x1e>
 8008346:	42bc      	cmp	r4, r7
 8008348:	4622      	mov	r2, r4
 800834a:	4631      	mov	r1, r6
 800834c:	bf28      	it	cs
 800834e:	463a      	movcs	r2, r7
 8008350:	f7ff fed0 	bl	80080f4 <memcpy>
 8008354:	4631      	mov	r1, r6
 8008356:	4640      	mov	r0, r8
 8008358:	f7ff fef4 	bl	8008144 <_free_r>
 800835c:	e7e1      	b.n	8008322 <_realloc_r+0x1e>
 800835e:	4635      	mov	r5, r6
 8008360:	e7df      	b.n	8008322 <_realloc_r+0x1e>
	...

08008364 <_sbrk_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4d06      	ldr	r5, [pc, #24]	; (8008380 <_sbrk_r+0x1c>)
 8008368:	2300      	movs	r3, #0
 800836a:	4604      	mov	r4, r0
 800836c:	4608      	mov	r0, r1
 800836e:	602b      	str	r3, [r5, #0]
 8008370:	f7f8 fce2 	bl	8000d38 <_sbrk>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d102      	bne.n	800837e <_sbrk_r+0x1a>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b103      	cbz	r3, 800837e <_sbrk_r+0x1a>
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	20001e48 	.word	0x20001e48

08008384 <__malloc_lock>:
 8008384:	4801      	ldr	r0, [pc, #4]	; (800838c <__malloc_lock+0x8>)
 8008386:	f000 b811 	b.w	80083ac <__retarget_lock_acquire_recursive>
 800838a:	bf00      	nop
 800838c:	20001e4c 	.word	0x20001e4c

08008390 <__malloc_unlock>:
 8008390:	4801      	ldr	r0, [pc, #4]	; (8008398 <__malloc_unlock+0x8>)
 8008392:	f000 b80c 	b.w	80083ae <__retarget_lock_release_recursive>
 8008396:	bf00      	nop
 8008398:	20001e4c 	.word	0x20001e4c

0800839c <_malloc_usable_size_r>:
 800839c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083a0:	1f18      	subs	r0, r3, #4
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	bfbc      	itt	lt
 80083a6:	580b      	ldrlt	r3, [r1, r0]
 80083a8:	18c0      	addlt	r0, r0, r3
 80083aa:	4770      	bx	lr

080083ac <__retarget_lock_acquire_recursive>:
 80083ac:	4770      	bx	lr

080083ae <__retarget_lock_release_recursive>:
 80083ae:	4770      	bx	lr

080083b0 <_init>:
 80083b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b2:	bf00      	nop
 80083b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083b6:	bc08      	pop	{r3}
 80083b8:	469e      	mov	lr, r3
 80083ba:	4770      	bx	lr

080083bc <_fini>:
 80083bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083be:	bf00      	nop
 80083c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083c2:	bc08      	pop	{r3}
 80083c4:	469e      	mov	lr, r3
 80083c6:	4770      	bx	lr
